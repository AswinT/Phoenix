<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reset Password - Phoenix</title>

    <!-- Font imports for the new typography -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Audiowide:wght@400&family=Raleway:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600&display=swap"
      rel="stylesheet"
    />

    <!-- Icon and Bootstrap -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link rel="stylesheet" href="/styles/user/resetPassword.css" />

    <style>
      /* Validation styling that works with our elegant theme */
      .password-requirements {
        font-family: "Montserrat", sans-serif;
        font-size: 0.75rem;
        color: #456882;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
        opacity: 0.9;
      }

      .is-valid {
        border-color: #456882 !important;
        box-shadow: 0 0 0 2px rgba(69, 104, 130, 0.2) !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23456882' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }

      .is-invalid {
        border-color: #d63031 !important;
        box-shadow: 0 0 0 2px rgba(214, 48, 49, 0.2) !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23d63031'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23d63031' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }
    </style>
  </head>

  <body class="elegant-body">
    <!-- Animated background particles -->
    <div class="bg-particles">
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
    </div>

    <div class="reset-password-wrapper">
      <div class="container">
        <div class="reset-password-card">
          <!-- Left side - Brand section (simplified) -->
          <div class="brand-section">
            <div class="brand-content">
              <div class="brand-logo">
                <img
                  src="../../assets/phoenix-logo.png"
                  alt="Phoenix Logo"
                  class="logo-img"
                />
                <h1 class="brand-title">Phoenix</h1>
              </div>
            </div>
          </div>

          <!-- Right side - Form section -->
          <div class="form-section">
            <div class="form-container">
              <div class="form-header">
                <div class="reset-password-icon-wrapper">
                  <i class="ri-lock-password-line reset-password-icon"></i>
                </div>
                <h2 class="form-title">Create New Password</h2>
                <p class="form-subtitle">
                  Enter a strong new password to secure your account
                </p>
              </div>

              <div class="server-error" id="serverError"></div>

              <form
                id="resetPasswordForm"
                class="reset-password-form"
                novalidate
              >
                <div class="input-group-custom">
                  <label for="newPassword" class="form-label-custom"
                    >New Password</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="password"
                      name="newPassword"
                      class="form-input-custom"
                      id="newPassword"
                      placeholder="Enter your new password"
                    />
                    <i class="ri-lock-line input-icon"></i>
                    <button
                      class="password-toggle toggle-password"
                      type="button"
                      tabindex="-1"
                    >
                      <i class="ri-eye-off-line"></i>
                    </button>
                  </div>
                  <div class="password-requirements" id="passwordRequirements">
                    Password must be at least 8 characters with uppercase
                    letter, lowercase letter, numbers, and special characters
                    (@$!%*?&_-#)
                  </div>
                  <div id="passwordError" class="error-message"></div>
                </div>

                <div class="input-group-custom">
                  <label for="confirmPassword" class="form-label-custom"
                    >Confirm New Password</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="password"
                      name="confirmPassword"
                      class="form-input-custom"
                      id="confirmPassword"
                      placeholder="Confirm your new password"
                    />
                    <i class="ri-shield-check-line input-icon"></i>
                    <button
                      class="password-toggle toggle-password"
                      type="button"
                      tabindex="-1"
                    >
                      <i class="ri-eye-off-line"></i>
                    </button>
                  </div>
                  <div id="passwordMatchError" class="error-message"></div>
                  <div id="emptyFieldError" class="error-message"></div>
                </div>

                <button
                  type="submit"
                  class="btn-reset-password"
                  id="submitButton"
                >
                  <span class="btn-text">Reset Password</span>
                  <i class="ri-arrow-right-line btn-icon"></i>
                </button>

                <div class="form-footer">
                  <p class="back-to-login">
                    Remember your password?
                    <a href="/login" class="link-primary">Back to Sign In</a>
                  </p>
                </div>
              </form>
            </div>
          </div>
        </div>

        <div class="footer-text">
          <p>&copy; 2025 Phoenix Audio. All rights reserved.</p>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Validation helper functions
      function setInvalid(element) {
        element.classList.add("is-invalid");
        element.classList.remove("is-valid");
      }

      function setValid(element) {
        element.classList.add("is-valid");
        element.classList.remove("is-invalid");
      }

      // Enhanced password validation function
      function validatePassword(password) {
        const minLength = password.length >= 8;
        const hasUppercase = /[A-Z]/.test(password);
        const hasLowercase = /[a-z]/.test(password);
        const hasNumber = /\d/.test(password);
        const hasSpecial = /[@$!%*?&_\-#]/.test(password);

        // Check for common patterns
        const hasCommonPattern = /123456|password|qwerty/i.test(password);

        return (
          minLength &&
          hasUppercase &&
          hasLowercase &&
          hasNumber &&
          hasSpecial &&
          !hasCommonPattern
        );
      }

      // Display server error
      function showServerError(message) {
        const serverError = document.getElementById("serverError");
        serverError.textContent = message;
        serverError.style.display = "block";

        // Auto hide after 5 seconds
        setTimeout(() => {
          serverError.style.display = "none";
        }, 5000);
      }

      // Password toggle functionality
      document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", function () {
          const input = this.parentElement.querySelector("input");
          const icon = this.querySelector("i");

          if (input.type === "password") {
            input.type = "text";
            icon.classList.replace("ri-eye-off-line", "ri-eye-line");
          } else {
            input.type = "password";
            icon.classList.replace("ri-eye-line", "ri-eye-off-line");
          }
        });
      });

      // New Password validation in real-time
      document
        .getElementById("newPassword")
        .addEventListener("input", function () {
          const newPassword = this.value;
          const passwordError = document.getElementById("passwordError");

          if (newPassword === "") {
            passwordError.textContent = "";
            passwordError.style.display = "none";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (!validatePassword(newPassword)) {
            // Detailed feedback
            const minLength = newPassword.length >= 8;
            const hasUppercase = /[A-Z]/.test(newPassword);
            const hasLowercase = /[a-z]/.test(newPassword);
            const hasNumber = /\d/.test(newPassword);
            const hasSpecial = /[@$!%*?&_\-#]/.test(newPassword);
            const hasCommonPattern = /123456|password|qwerty/i.test(
              newPassword
            );

            let errorMsg = "Password must include: ";
            const missing = [];

            if (!minLength) missing.push("at least 8 characters");
            if (!hasUppercase) missing.push("uppercase letter");
            if (!hasLowercase) missing.push("lowercase letter");
            if (!hasNumber) missing.push("numbers");
            if (!hasSpecial) missing.push("special characters");
            if (hasCommonPattern)
              missing.push("avoid common patterns (123456, password, qwerty)");

            passwordError.textContent = errorMsg + missing.join(", ");
            passwordError.style.display = "block";
            setInvalid(this);
          } else {
            passwordError.textContent = "";
            passwordError.style.display = "none";
            setValid(this);
          }

          // Check match if confirm password has a value
          const confirmPassword =
            document.getElementById("confirmPassword").value;
          const passwordMatchError =
            document.getElementById("passwordMatchError");

          if (confirmPassword) {
            if (newPassword !== confirmPassword) {
              passwordMatchError.textContent = "Passwords do not match.";
              passwordMatchError.style.display = "block";
              setInvalid(document.getElementById("confirmPassword"));
            } else {
              passwordMatchError.textContent = "";
              passwordMatchError.style.display = "none";
              setValid(document.getElementById("confirmPassword"));
            }
          }
        });

      // Real-time password match validation
      document
        .getElementById("confirmPassword")
        .addEventListener("input", function () {
          const newPassword = document.getElementById("newPassword").value;
          const confirmPassword = this.value;
          const passwordMatchError =
            document.getElementById("passwordMatchError");

          if (confirmPassword === "") {
            passwordMatchError.textContent = "";
            passwordMatchError.style.display = "none";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (newPassword !== confirmPassword) {
            passwordMatchError.textContent = "Passwords do not match.";
            passwordMatchError.style.display = "block";
            setInvalid(this);
          } else {
            passwordMatchError.textContent = "";
            passwordMatchError.style.display = "none";
            setValid(this);
          }
        });

      // Form submission with enhanced validation
      document
        .getElementById("resetPasswordForm")
        .addEventListener("submit", function (event) {
          event.preventDefault();

          const newPassword = document.getElementById("newPassword").value;
          const confirmPassword =
            document.getElementById("confirmPassword").value;
          const passwordMatchError =
            document.getElementById("passwordMatchError");
          const passwordError = document.getElementById("passwordError");
          const emptyFieldError = document.getElementById("emptyFieldError");
          const submitButton = document.getElementById("submitButton");
          const btnText = submitButton.querySelector(".btn-text");
          const btnIcon = submitButton.querySelector(".btn-icon");

          let isValid = true;

          // Check for empty fields
          if (!newPassword || !confirmPassword) {
            emptyFieldError.textContent = "Please fill in all fields";
            emptyFieldError.style.display = "block";
            isValid = false;

            if (!newPassword) {
              setInvalid(document.getElementById("newPassword"));
            }
            if (!confirmPassword) {
              setInvalid(document.getElementById("confirmPassword"));
            }
          } else {
            emptyFieldError.textContent = "";
            emptyFieldError.style.display = "none";
          }

          // Validate password format with enhanced validation
          if (newPassword && !validatePassword(newPassword)) {
            // This error message will already be shown by the input event listener
            // But we need to make sure isValid is set to false
            setInvalid(document.getElementById("newPassword"));
            isValid = false;
          }

          // Check if passwords match
          if (
            newPassword &&
            confirmPassword &&
            newPassword !== confirmPassword
          ) {
            setInvalid(document.getElementById("confirmPassword"));
            isValid = false;
          }

          if (!isValid) {
            return;
          }

          // Show loading state
          submitButton.disabled = true;
          btnText.textContent = "Processing...";
          btnIcon.className = "ri-loader-4-line btn-icon rotating";

          // If validation passes, send the form data
          fetch("/resetPassword", {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              newPassword: newPassword,
              confirmPassword: confirmPassword,
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              submitButton.disabled = false;
              btnText.textContent = "Reset Password";
              btnIcon.className = "ri-arrow-right-line btn-icon";

              if (data.success) {
                Swal.fire({
                  icon: "success",
                  title: "Password Reset Successful",
                  text: "Your password has been updated successfully!",
                  confirmButtonColor: "#1B3C53",
                  confirmButtonText: "Continue to Login",
                }).then(() => {
                  window.location.href = "/login?reset=success";
                });
              } else {
                // Show inline error message instead of alert
                showServerError(
                  data.message || "Password reset failed. Please try again."
                );
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              submitButton.disabled = false;
              btnText.textContent = "Reset Password";
              btnIcon.className = "ri-arrow-right-line btn-icon";

              // Show inline error message instead of alert
              showServerError("An error occurred. Please try again later.");
            });
        });
    </script>
  </body>
</html>
