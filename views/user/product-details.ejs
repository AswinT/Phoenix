<%- include("../partials/user/header") %>

<!-- Product Details Section -->
<section class="product-details-section">
  <div class="container">
    <!-- Breadcrumb -->
    <nav class="product-breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/shopPage">Shop</a></li>
        <li class="breadcrumb-item active"><%= product.model %></li>
      </ol>
    </nav>

    <div class="row g-5">
      <!-- Left Column: Product Gallery + About Section -->
      <div class="col-lg-6">
        <!-- Product Gallery -->
        <div class="product-gallery">
          <!-- Main Image with Enhanced Zoom -->
          <div class="main-image-container">
            <div class="image-wrapper">
              <div class="zoom-container" id="zoomContainer">
                <img
                  src="<%= product.mainImage || '/api/placeholder/600/600' %>"
                  alt="<%= product.model %>"
                  id="mainImage"
                  class="main-image"
                >
              </div>
            </div>
          </div>
          
          <!-- Thumbnail Gallery -->
          <% 
            let allImages = [product.mainImage];
            if (product.subImages && product.subImages.length > 0) {
              allImages = allImages.concat(product.subImages);
            }
          %>
          
          <% if (allImages.length > 1) { %>
          <div class="thumbnail-gallery">
            <% allImages.forEach((image, index) => { %>
            <div class="thumbnail-item">
              <img 
                src="<%= image || '/api/placeholder/150/150' %>" 
                alt="<%= product.model %> - Image <%= index + 1 %>" 
                class="thumbnail <%= index === 0 ? 'active' : '' %>" 
                onclick="changeMainImage('<%= image %>', this)"
              >
            </div>
            <% }) %>
          </div>
          <% } %>
        </div>

        <!-- About This Headphone Section -->
        <div class="about-section">
          <h3 class="about-title">About This Headphone</h3>
          <div class="about-content">
            <p class="product-description">
              <%= product.description || 'Experience premium audio quality with crystal-clear sound and exceptional comfort for extended listening sessions. These headphones deliver superior performance with advanced drivers and noise isolation technology.' %>
            </p>
            
            <!-- Key Features -->
            <div class="key-features">
              <h4>Key Features</h4>
              <ul class="features-list">
                <li><i class="ri-check-circle-fill"></i> Premium audio drivers for superior sound quality</li>
                <li><i class="ri-check-circle-fill"></i> Comfortable over-ear design for extended use</li>
                <li><i class="ri-check-circle-fill"></i> Advanced noise isolation technology</li>
                <li><i class="ri-check-circle-fill"></i> Durable build with premium materials</li>
                <li><i class="ri-check-circle-fill"></i> Compatible with all devices</li>
              </ul>
            </div>

            <!-- Product Specifications -->
            <div class="specifications">
              <h4>Specifications</h4>
              <div class="spec-grid">
                <div class="spec-item">
                  <span class="spec-label">Brand</span>
                  <span class="spec-value"><%= product.brand %></span>
                </div>
                <div class="spec-item">
                  <span class="spec-label">Model</span>
                  <span class="spec-value"><%= product.model %></span>
                </div>
                <% if (product.connectivity) { %>
                <div class="spec-item">
                  <span class="spec-label">Connectivity</span>
                  <span class="spec-value"><%= product.connectivity %></span>
                </div>
                <% } %>
                <% if (product.manufacturer) { %>
                <div class="spec-item">
                  <span class="spec-label">Manufacturer</span>
                  <span class="spec-value"><%= product.manufacturer %></span>
                </div>
                <% } %>
                <% if (product.category) { %>
                <div class="spec-item">
                  <span class="spec-label">Category</span>
                  <span class="spec-value"><%= product.category.name %></span>
                </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column: Product Information & Purchase -->
      <div class="col-lg-6">
        <div class="product-details">
          <!-- Brand Badge -->
          <div class="brand-badge">
            <i class="ri-headphone-line"></i>
            <%= product.brand %>
          </div>
          
          <!-- Product Title -->
          <h1 class="product-title"><%= product.model %></h1>
          
          <!-- Rating & Reviews -->
          <div class="rating-section">
            <div class="rating-stars">
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-half-line"></i>
            </div>
            <span class="rating-text">(4.2)</span>
            <span class="review-count">• 128 reviews</span>
          </div>

          <!-- Price Section -->
          <div class="price-section">
            <% if (product.discountPercentage > 0) { %>
              <div class="price-main">
                <span class="current-price">₹<%= product.finalPrice.toFixed(2) %></span>
                <span class="original-price">₹<%= product.regularPrice.toFixed(2) %></span>
              </div>
              <div class="discount-info">
                <span class="discount-badge">
                  <%= Math.round(product.discountPercentage) %>% OFF
                </span>
                <span class="savings">You save ₹<%= (product.regularPrice - product.finalPrice).toFixed(0) %></span>
              </div>
              <% if (product.bestOfferTitle) { %>
                <div class="offer-banner">
                  <i class="ri-gift-line"></i>
                  <%= product.bestOfferTitle %>
                </div>
              <% } %>
            <% } else { %>
              <div class="price-main">
                <span class="current-price">₹<%= product.regularPrice.toFixed(2) %></span>
              </div>
            <% } %>
          </div>

          <!-- Stock Status -->
          <div class="stock-section">
            <% 
              const stockStatus = product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock';
              const stockText = product.stock > 10 ? 'In Stock' : product.stock > 0 ? `Only ${product.stock} left in stock` : 'Out of Stock';
              const stockIcon = product.stock > 10 ? 'ri-checkbox-circle-line' : product.stock > 0 ? 'ri-error-warning-line' : 'ri-close-circle-line';
            %>
            <div class="stock-indicator stock-<%= stockStatus %>">
              <i class="<%= stockIcon %>"></i>
              <%= stockText %>
            </div>
          </div>

          <!-- Purchase Section -->
          <div class="purchase-section">
            <!-- Quantity Selector -->
            <div class="quantity-section">
              <label class="quantity-label">Quantity:</label>
              <div class="quantity-selector">
                <button type="button" class="quantity-btn quantity-decrease" id="decreaseBtn" onclick="decreaseQuantity()">
                  <i class="ri-subtract-line"></i>
                </button>
                <input type="number" id="quantity" value="1" min="1" max="<%= Math.min(5, product.stock) %>" readonly>
                <button type="button" class="quantity-btn quantity-increase" id="increaseBtn" onclick="increaseQuantity()">
                  <i class="ri-add-line"></i>
                </button>
              </div>
              <div class="quantity-info">
                <span class="quantity-limit-text" id="quantityLimitText">
                  Max: <%= Math.min(5, product.stock) %> items
                </span>
                <span class="quantity-feedback" id="quantityFeedback" style="display: none;"></span>
              </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="action-buttons">
              <button class="btn-add-to-cart"
                      data-product-id="<%= product._id %>"
                      data-product-stock="<%= product.stock %>"
                      data-max-quantity="<%= Math.min(5, product.stock) %>"
                      <%= product.stock === 0 ? 'disabled' : '' %>>
                <i class="ri-shopping-cart-line"></i>
                <span><%= product.stock === 0 ? 'Out of Stock' : 'Add to Cart' %></span>
              </button>

              <button class="btn-wishlist <%= isWishlisted ? 'wishlisted' : '' %>" data-product-id="<%= product._id %>">
                <i class="<%= isWishlisted ? 'ri-heart-fill' : 'ri-heart-line' %>"></i>
              </button>
            </div>

            <!-- Additional Actions -->
            <div class="additional-actions">
              <button class="btn-buy-now" data-product-id="<%= product._id %>" <%= product.stock === 0 ? 'disabled' : '' %>>
                <i class="ri-flash-line"></i>
                Buy Now
              </button>
            </div>
          </div>

          <!-- Delivery Info -->
          <div class="delivery-info">
            <div class="delivery-item">
              <i class="ri-truck-line"></i>
              <div>
                <strong>Free Delivery</strong>
                <p>Free delivery on orders above ₹999</p>
              </div>
            </div>
            <div class="delivery-item">
              <i class="ri-arrow-go-back-line"></i>
              <div>
                <strong>Easy Returns</strong>
                <p>30-day return policy</p>
              </div>
            </div>
            <div class="delivery-item">
              <i class="ri-shield-check-line"></i>
              <div>
                <strong>Warranty</strong>
                <p>1 year manufacturer warranty</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- You Might Also Like Section -->
<% if (relatedProducts && relatedProducts.length > 0) { %>
<section class="related-products-section">
  <div class="container">
    <div class="section-header">
      <h2 class="section-title">You might also like</h2>
    </div>
    <div class="related-products-row">
      <% relatedProducts.slice(0, 4).forEach((relatedProduct) => { %>
      <div class="related-product-card">
        <div class="related-product-image">
          <a href="/products/<%= relatedProduct._id %>">
            <img src="<%= relatedProduct.mainImage || '/api/placeholder/300/300' %>" alt="<%= relatedProduct.model %>">
          </a>
          <button class="related-wishlist-btn" data-product-id="<%= relatedProduct._id %>">
            <i class="ri-heart-line"></i>
          </button>
          <% if (relatedProduct.discountPercentage > 0) { %>
          <span class="related-discount-badge">
            <%= Math.round(relatedProduct.discountPercentage) %>% OFF
          </span>
          <% } %>
        </div>
        <div class="related-product-info">
          <div class="related-brand"><%= relatedProduct.brand %></div>
          <h4 class="related-title">
            <a href="/products/<%= relatedProduct._id %>"><%= relatedProduct.model %></a>
          </h4>
          <div class="related-rating">
            <div class="related-stars">
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-fill"></i>
              <i class="ri-star-half-line"></i>
            </div>
            <span class="related-rating-text">(4.2)</span>
          </div>
          <div class="related-price">
            <% if (relatedProduct.discountPercentage > 0) { %>
              <span class="related-current-price">₹<%= relatedProduct.finalPrice.toFixed(2) %></span>
              <span class="related-original-price">₹<%= relatedProduct.regularPrice.toFixed(2) %></span>
            <% } else { %>
              <span class="related-current-price">₹<%= relatedProduct.regularPrice.toFixed(2) %></span>
            <% } %>
          </div>
          <button class="related-add-cart add-to-cart" data-product-id="<%= relatedProduct._id %>">
            <i class="ri-shopping-cart-line"></i>
            Add to Cart
          </button>
        </div>
      </div>
      <% }) %>
    </div>
  </div>
</section>
<% } %>

<%- include("../partials/user/footer") %>

<script>
// Image change functionality
function changeMainImage(imageSrc, thumbnailElement) {
  const mainImage = document.getElementById('mainImage');
  if (mainImage) {
    mainImage.src = imageSrc;
  }

  // Update active thumbnail
  document.querySelectorAll('.thumbnail').forEach(thumb => {
    thumb.classList.remove('active');
  });
  thumbnailElement.classList.add('active');

  // The zoom functionality will automatically update with the new image
  // No need to reinitialize as the productZoomer.js handles this
}

// Enhanced Quantity Controls with AJAX and Dynamic Limits
let quantityUpdateTimeout = null;

// Initialize quantity controls on page load
function initializeQuantityControls() {
  const quantityInput = document.getElementById('quantity');
  const increaseBtn = document.getElementById('increaseBtn');
  const decreaseBtn = document.getElementById('decreaseBtn');
  const addToCartBtn = document.querySelector('.btn-add-to-cart');

  if (!quantityInput || !addToCartBtn) return;

  const productStock = parseInt(addToCartBtn.dataset.productStock) || 0;
  const maxQuantity = Math.min(5, productStock);

  // Set initial max value
  quantityInput.max = maxQuantity;

  // Update button states
  updateQuantityButtonStates();

  // Add event listeners for real-time validation
  quantityInput.addEventListener('input', function() {
    validateQuantityInput();
  });
}

// Quantity increase function with AJAX validation
async function increaseQuantity() {
  const quantityInput = document.getElementById('quantity');
  const currentValue = parseInt(quantityInput.value);
  const maxValue = parseInt(quantityInput.max);

  if (currentValue >= maxValue) {
    showQuantityFeedback('Maximum quantity reached', 'warning');
    return;
  }

  const newQuantity = currentValue + 1;
  await updateQuantityWithValidation(newQuantity);
}

// Quantity decrease function
async function decreaseQuantity() {
  const quantityInput = document.getElementById('quantity');
  const currentValue = parseInt(quantityInput.value);

  if (currentValue <= 1) {
    showQuantityFeedback('Minimum quantity is 1', 'warning');
    return;
  }

  const newQuantity = currentValue - 1;
  await updateQuantityWithValidation(newQuantity);
}

// Update quantity with real-time validation
async function updateQuantityWithValidation(newQuantity) {
  const quantityInput = document.getElementById('quantity');
  const addToCartBtn = document.querySelector('.btn-add-to-cart');
  const productId = addToCartBtn.dataset.productId;

  // Clear any existing timeout
  if (quantityUpdateTimeout) {
    clearTimeout(quantityUpdateTimeout);
  }

  // Show loading state
  showQuantityFeedback('Updating...', 'info');

  try {
    // Validate quantity with server
    const response = await fetch('/api/products/validate-quantity', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        productId: productId,
        quantity: newQuantity
      })
    });

    const result = await response.json();

    if (result.success) {
      // Update quantity input
      quantityInput.value = newQuantity;

      // Update max value if stock changed
      if (result.data.currentStock !== undefined) {
        const newMaxQuantity = Math.min(5, result.data.currentStock);
        quantityInput.max = newMaxQuantity;
        updateQuantityLimitText(newMaxQuantity);
      }

      // Update button states
      updateQuantityButtonStates();

      // Show success feedback briefly
      showQuantityFeedback('Quantity updated', 'success');

      // Hide feedback after delay
      setTimeout(() => {
        hideQuantityFeedback();
      }, 1500);

    } else {
      // Revert to previous value and show error
      showQuantityFeedback(result.message || 'Invalid quantity', 'error');
      setTimeout(() => {
        hideQuantityFeedback();
      }, 3000);
    }

  } catch (error) {
    console.error('Error validating quantity:', error);

    // Handle different types of errors
    let errorMessage = 'Error updating quantity';
    if (error.name === 'TypeError' || error.message.includes('fetch')) {
      errorMessage = 'Network error. Please check your connection.';
    } else if (error.message.includes('timeout')) {
      errorMessage = 'Request timed out. Please try again.';
    }

    showQuantityFeedback(errorMessage, 'error');
    setTimeout(() => {
      hideQuantityFeedback();
    }, 3000);
  }
}

// Helper functions for quantity controls
function updateQuantityButtonStates() {
  const quantityInput = document.getElementById('quantity');
  const increaseBtn = document.getElementById('increaseBtn');
  const decreaseBtn = document.getElementById('decreaseBtn');

  if (!quantityInput || !increaseBtn || !decreaseBtn) return;

  const currentValue = parseInt(quantityInput.value);
  const maxValue = parseInt(quantityInput.max);
  const minValue = parseInt(quantityInput.min) || 1;

  // Update decrease button state
  if (currentValue <= minValue) {
    decreaseBtn.disabled = true;
    decreaseBtn.classList.add('disabled');
  } else {
    decreaseBtn.disabled = false;
    decreaseBtn.classList.remove('disabled');
  }

  // Update increase button state
  if (currentValue >= maxValue) {
    increaseBtn.disabled = true;
    increaseBtn.classList.add('disabled');
  } else {
    increaseBtn.disabled = false;
    increaseBtn.classList.remove('disabled');
  }
}

function updateQuantityLimitText(maxQuantity) {
  const limitText = document.getElementById('quantityLimitText');
  if (limitText) {
    limitText.textContent = `Max: ${maxQuantity} items`;
  }
}

function showQuantityFeedback(message, type = 'info') {
  const feedbackElement = document.getElementById('quantityFeedback');
  if (!feedbackElement) return;

  feedbackElement.textContent = message;
  feedbackElement.className = `quantity-feedback ${type}`;
  feedbackElement.style.display = 'inline-block';
}

function hideQuantityFeedback() {
  const feedbackElement = document.getElementById('quantityFeedback');
  if (feedbackElement) {
    feedbackElement.style.display = 'none';
  }
}

function validateQuantityInput() {
  const quantityInput = document.getElementById('quantity');
  const currentValue = parseInt(quantityInput.value);
  const maxValue = parseInt(quantityInput.max);
  const minValue = parseInt(quantityInput.min) || 1;

  if (currentValue > maxValue) {
    quantityInput.value = maxValue;
    showQuantityFeedback('Maximum quantity exceeded', 'warning');
  } else if (currentValue < minValue) {
    quantityInput.value = minValue;
    showQuantityFeedback('Minimum quantity is 1', 'warning');
  }

  updateQuantityButtonStates();
}

// Handle stock changes and real-time updates
function handleStockChange(newStock) {
  const quantityInput = document.getElementById('quantity');
  const addToCartBtn = document.querySelector('.btn-add-to-cart');

  if (!quantityInput || !addToCartBtn) return;

  const currentQuantity = parseInt(quantityInput.value);
  const newMaxQuantity = Math.min(5, newStock);

  // Update data attributes
  addToCartBtn.dataset.productStock = newStock;
  addToCartBtn.dataset.maxQuantity = newMaxQuantity;

  // Update input max value
  quantityInput.max = newMaxQuantity;

  // Update limit text
  updateQuantityLimitText(newMaxQuantity);

  // Handle out of stock
  if (newStock === 0) {
    quantityInput.value = 0;
    quantityInput.disabled = true;
    addToCartBtn.disabled = true;
    addToCartBtn.innerHTML = '<i class="ri-shopping-cart-line"></i><span>Out of Stock</span>';
    showQuantityFeedback('Product is now out of stock', 'error');
    return;
  }

  // Handle quantity adjustment if current quantity exceeds new stock
  if (currentQuantity > newMaxQuantity) {
    quantityInput.value = newMaxQuantity;
    showQuantityFeedback(`Quantity adjusted to ${newMaxQuantity} due to stock change`, 'warning');
  }

  // Re-enable controls if they were disabled
  quantityInput.disabled = false;
  addToCartBtn.disabled = false;
  addToCartBtn.innerHTML = '<i class="ri-shopping-cart-line"></i><span>Add to Cart</span>';

  updateQuantityButtonStates();
}

// Periodic stock check (optional - can be enabled for high-demand products)
let stockCheckInterval = null;

function startStockMonitoring() {
  const addToCartBtn = document.querySelector('.btn-add-to-cart');
  if (!addToCartBtn) return;

  const productId = addToCartBtn.dataset.productId;

  // Check stock every 30 seconds
  stockCheckInterval = setInterval(async () => {
    try {
      const response = await fetch(`/api/products/validate-quantity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productId: productId,
          quantity: 1 // Just checking stock availability
        })
      });

      const result = await response.json();

      if (result.success && result.data.currentStock !== undefined) {
        const currentStock = parseInt(addToCartBtn.dataset.productStock);
        const newStock = result.data.currentStock;

        if (currentStock !== newStock) {
          handleStockChange(newStock);
        }
      }
    } catch (error) {
      console.warn('Stock check failed:', error);
      // Don't show error to user for background checks
    }
  }, 30000); // 30 seconds
}

function stopStockMonitoring() {
  if (stockCheckInterval) {
    clearInterval(stockCheckInterval);
    stockCheckInterval = null;
  }
}

// Enhanced zoom functionality is now handled by productZoomer.js

document.addEventListener('DOMContentLoaded', function() {
  // Initialize quantity controls
  initializeQuantityControls();

  // Start stock monitoring for real-time updates (optional)
  // Uncomment the next line to enable real-time stock monitoring
  // startStockMonitoring();

  // Enhanced zoom functionality is handled by productZoomer.js

  const cartCountElement = document.querySelector('.cart-count');
  const wishlistCountElement = document.querySelector('.wishlist-count');

  // Enhanced add to cart functionality with quantity validation
  document.querySelectorAll('.add-to-cart, .btn-add-to-cart').forEach(button => {
    button.addEventListener('click', async function() {
      const productId = this.dataset.productId;
      const quantityInput = document.getElementById('quantity');
      const quantity = quantityInput ? parseInt(quantityInput.value) : 1;
      const maxQuantity = parseInt(this.dataset.maxQuantity) || 5;
      const productStock = parseInt(this.dataset.productStock) || 0;

      // Final validation before adding to cart
      if (quantity > maxQuantity) {
        showQuantityFeedback(`Cannot add ${quantity} items. Maximum allowed is ${maxQuantity}`, 'error');
        return;
      }

      if (quantity > productStock) {
        showQuantityFeedback(`Cannot add ${quantity} items. Only ${productStock} in stock`, 'error');
        return;
      }

      if (productStock === 0) {
        showQuantityFeedback('Product is out of stock', 'error');
        return;
      }

      try {
        const response = await fetch('/api/cart/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, quantity })
        });
        const result = await response.json();

        if (response.status === 401 || !result.success) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: result.message || 'Please log in to add items to your cart',
            showConfirmButton: false,
            timer: 2000
          }).then(() => {
            window.location.href = '/login';
          });
        } else if (result.success) {
          if (cartCountElement) {
            cartCountElement.textContent = result.cartCount;
            cartCountElement.dataset.count = result.cartCount;
          }

          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: result.message,
            showConfirmButton: false,
            timer: 1500
          });
        }
      } catch (error) {
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'error',
          title: 'Error adding to cart',
          showConfirmButton: false,
          timer: 1500
        });
      }
    });
  });

  // Wishlist functionality
  document.querySelectorAll('.btn-wishlist, .related-wishlist-btn').forEach(button => {
    button.addEventListener('click', async function() {
      const productId = this.dataset.productId;

      try {
        const response = await fetch('/api/wishlist/toggle', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId })
        });
        const result = await response.json();

        if (response.status === 401 || !result.success) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: result.message || 'Please log in to manage your wishlist',
            showConfirmButton: false,
            timer: 2000
          }).then(() => {
            window.location.href = '/login';
          });
        } else if (result.success) {
          const icon = this.querySelector('i');
          if (result.isWishlisted) {
            icon.className = 'ri-heart-fill';
            this.classList.add('wishlisted');
          } else {
            icon.className = 'ri-heart-line';
            this.classList.remove('wishlisted');
          }

          if (wishlistCountElement) {
            wishlistCountElement.textContent = result.wishlistCount;
            wishlistCountElement.dataset.count = result.wishlistCount;
          }

          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: result.message,
            showConfirmButton: false,
            timer: 1500
          });
        }
      } catch (error) {
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'error',
          title: 'Error managing wishlist',
          showConfirmButton: false,
          timer: 1500
        });
      }
    });
  });

  // Buy now functionality
  document.querySelectorAll('.btn-buy-now').forEach(button => {
    button.addEventListener('click', async function() {
      const productId = this.dataset.productId;
      const quantity = parseInt(document.getElementById('quantity').value);

      // Add to cart first
      try {
        const response = await fetch('/api/cart/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, quantity })
        });
        const result = await response.json();

        if (response.status === 401 || !result.success) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: result.message || 'Please log in to continue',
            showConfirmButton: false,
            timer: 2000
          }).then(() => {
            window.location.href = '/login';
          });
        } else if (result.success) {
          // Redirect to checkout
          window.location.href = '/cart';
        }
      } catch (error) {
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'error',
          title: 'Error processing request',
          showConfirmButton: false,
          timer: 1500
        });
      }
    });
  });

  // Cleanup when page is unloaded
  window.addEventListener('beforeunload', function() {
    stopStockMonitoring();

    // Clear any pending timeouts
    if (quantityUpdateTimeout) {
      clearTimeout(quantityUpdateTimeout);
    }
  });
});
</script>

<!-- Enhanced Product Zoom Functionality -->
<script src="/js/productZoomer.js"></script>

<%- include("../partials/user/footer") %>
