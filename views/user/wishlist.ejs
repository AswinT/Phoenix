<%- include("../partials/user/header") %>

<!-- Include Phoenix Design System CSS -->
<link rel="stylesheet" href="/styles/phoenix-design-system.css">

<div class="phoenix-container">
  <div class="container-fluid">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-4">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
        <li class="breadcrumb-item active" aria-current="page">Wishlist</li>
      </ol>
    </nav>

    <div class="row g-4">
      <%- include("../partials/user/accountSidebar") %>

      <!-- Main Content -->
      <div class="col-lg-10">
        <div class="phoenix-main-content">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
              <h1 class="phoenix-main-title">My Wishlist</h1>
              <p class="phoenix-main-subtitle">Your saved headphones and audio gear.</p>
            </div>
            <% if (wishlistItems.length > 0) { %>
            <div class="d-flex gap-2">
              <button class="btn phoenix-btn-primary" id="addAllToCartBtn">
                <i class="ri-arrow-right-line me-2"></i>Move All to Cart
              </button>
              <button class="btn phoenix-btn-secondary" id="clearWishlistBtn">
                <i class="ri-delete-bin-line me-2"></i>Clear Wishlist
              </button>
            </div>
            <% } %>
          </div>

          <!-- Empty Wishlist State -->
            <div class="empty-wishlist text-center py-5 <%= wishlistItems.length === 0 ? '' : 'd-none' %>">
              <div class="mb-4">
                <i class="ri-heart-line" style="font-size: 4rem; color: #ccc;"></i>
              </div>
              <h3 class="fs-4 fw-semibold mb-3">Your wishlist is empty</h3>
              <p class="text-muted mb-4">Save your favorite headphones to purchase later</p>

            </div>

            <!-- Wishlist Items List -->
            <div class="wishlist-items <%= wishlistItems.length === 0 ? 'd-none' : '' %>">
              <!-- Wishlist Statistics -->
              <div class="wishlist-stats mb-4">
                <span class="stock-status in-stock me-2">
                  <i class="ri-checkbox-circle-line me-1"></i> In Stock: <%= inStockItems %>
                </span>
                <span class="stock-status low-stock me-2">
                  <i class="ri-alert-line me-1"></i> Low Stock: <%= lowStockItems %>
                </span>
                <span class="stock-status out-of-stock">
                  <i class="ri-close-circle-line me-1"></i> Out of Stock: <%= outOfStockItems %>
                </span>
              </div>

              <% wishlistItems.forEach(item => { %>
                <div class="wishlist-item bg-white p-4 mb-3 rounded shadow-sm" data-product-id="<%= item.product._id %>">
                  <div class="row align-items-center">
                    <div class="col-md-2 col-4 mb-3 mb-md-0">
                      <div class="position-relative">
                        <img src="<%= item.product.mainImage || '/api/placeholder/150/200' %>" alt="<%= item.product.title %>" class="img-fluid rounded" />
                        <% if (item.product.activeOffer && item.product.discountPercentage > 0) { %>
                          <span class="offer-badge"><%= item.product.discountPercentage %>% OFF</span>
                        <% } %>
                      </div>
                    </div>
                    <div class="col-md-6 col-8 mb-3 mb-md-0">
                      <h3 class="fs-5 fw-semibold mb-1">
                        <a href="/products/<%= item.product._id %>" class="text-dark text-decoration-none"><%= item.product.model || item.product.title %></a>
                      </h3>
                      <p class="text-muted small mb-1">Brand: <%= item.product.brand %></p>
                      <% if (item.product.connectivity) { %>
                        <p class="small mb-0">Type: <%= item.product.connectivity %></p>
                      <% } %>
                      <% if (item.product.activeOffer) { %>
                        <p class="offer-title mt-1"><i class="ri-price-tag-3-line"></i> <%= item.product.activeOffer.title %></p>
                      <% } %>
                      <span class="stock-status <%= item.product.stock > 10 ? 'in-stock' : item.product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
                        <i class="ri-<%= item.product.stock > 10 ? 'checkbox-circle-line' : item.product.stock > 0 ? 'alert-line' : 'close-circle-line' %> me-1"></i>
                        <%= item.product.stock > 10 ? `In Stock (${item.product.stock} units available)` : item.product.stock > 0 ? `Low Stock (${item.product.stock} units left)` : 'Out of Stock' %>
                      </span>
                    </div>
                    <div class="col-md-4 col-12 mt-3 mt-md-0">
                      <div class="d-flex flex-column align-items-start align-items-md-end justify-content-md-end gap-2">
                        <% if (item.product.activeOffer && item.product.discountPercentage > 0) { %>
                          <div class="text-end">
                            <span class="text-decoration-line-through text-muted me-2">₹<%= item.product.regularPrice.toFixed(2) %></span>
                            <span class="fw-bold">₹<%= item.product.salePrice.toFixed(2) %></span>
                          </div>
                        <% } else { %>
                          <span class="fw-bold">₹<%= item.product.salePrice.toFixed(2) %></span>
                        <% } %>
                        <div class="item-actions d-flex gap-2">
                          <button class="btn phoenix-btn-primary btn-sm add-to-cart px-3" <%= item.product.stock === 0 ? 'disabled' : '' %>>
                            <i class="ri-arrow-right-line me-1"></i>Move to Cart
                          </button>
                          <button class="btn phoenix-btn-secondary btn-sm remove-item">Remove</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>

              <!-- Pagination -->
              <% if (totalPages > 1) { %>
                <nav aria-label="Wishlist pagination" class="mt-4">
                  <ul class="pagination justify-content-center">
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                      <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                      </a>
                    </li>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                      <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                      </li>
                    <% } %>
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                      <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                      </a>
                    </li>
                  </ul>
                </nav>
              <% } %>
            </div>


          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include("../partials/user/footer") %>

<style>
  /* ════════════════════════════════════════════════════════════════════════════════════════ */
  /* PHOENIX WISHLIST PAGE SPECIFIC STYLES */
  /* ═══════════════════════════════════════════════════════════════════════════════════════════ */
  :root {
    /* Phoenix Color Palette */
    --phoenix-primary: #1b3c53;
    --phoenix-secondary: #456882;
    --phoenix-beige: #d2c1b6;
    --phoenix-cream: #f9f3ef;
    --phoenix-white: #ffffff;
    --phoenix-dark: #2d3748;
    --phoenix-success: #00b894;
    --phoenix-warning: #fdcb6e;
    --phoenix-danger: #d63031;

    /* Gradients */
    --phoenix-gradient-main: linear-gradient(
      135deg,
      var(--phoenix-primary) 0%,
      var(--phoenix-secondary) 100%
    );
    --phoenix-gradient-soft: linear-gradient(
      135deg,
      var(--phoenix-cream) 0%,
      var(--phoenix-beige) 100%
    );
    --phoenix-gradient-card: linear-gradient(
      145deg,
      rgba(249, 243, 239, 0.95) 0%,
      rgba(210, 193, 182, 0.85) 100%
    );

    /* Shadows & Effects */
    --phoenix-shadow-soft: 0 8px 32px rgba(27, 60, 83, 0.12);
    --phoenix-shadow-medium: 0 12px 40px rgba(27, 60, 83, 0.18);
    --phoenix-shadow-strong: 0 16px 48px rgba(27, 60, 83, 0.25);
    --phoenix-blur: blur(16px);

    /* Typography */
    --phoenix-font-brand: "Audiowide", cursive;
    --phoenix-font-heading: "Montserrat", sans-serif;
    --phoenix-font-body: "Raleway", sans-serif;

    /* Spacing */
    --phoenix-radius-sm: 12px;
    --phoenix-radius-md: 16px;
    --phoenix-radius-lg: 20px;
    --phoenix-radius-xl: 24px;
  }

  /* ═══ GLOBAL STYLES ═══ */
  body {
    font-family: var(--phoenix-font-body);
    background: linear-gradient(
      135deg,
      var(--phoenix-cream) 0%,
      #f0ebe5 50%,
      var(--phoenix-beige) 100%
    );
    min-height: 100vh;
    color: var(--phoenix-dark);
  }

  .phoenix-container {
    background: var(--phoenix-gradient-card);
    min-height: 100vh;
    padding: 2rem 0;
  }

  /* ═══ BREADCRUMB STYLING ═══ */
  .breadcrumb-item + .breadcrumb-item::before {
    content: "›";
    font-weight: bold;
    color: var(--phoenix-secondary);
  }

  .breadcrumb a {
    color: var(--phoenix-primary);
    text-decoration: none;
    font-family: var(--phoenix-font-heading);
    font-weight: 500;
  }

  .breadcrumb a:hover {
    color: var(--phoenix-secondary);
    text-decoration: underline;
  }

  .breadcrumb-item.active {
    color: var(--phoenix-secondary);
    font-family: var(--phoenix-font-heading);
    font-weight: 600;
  }

  /* ═══ WISHLIST ITEM STYLING ═══ */
  .wishlist-item {
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(210, 193, 182, 0.3);
    border-radius: var(--phoenix-radius-lg);
    backdrop-filter: var(--phoenix-blur);
    box-shadow: var(--phoenix-shadow-soft);
  }

  .wishlist-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--phoenix-shadow-medium);
  }

  /* ═══ ANIMATION FOR ITEM REMOVAL ═══ */
  .wishlist-item.removing {
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
  }

  /* ═══ LOADING SPINNER ANIMATION ═══ */
  .ri-loader-4-line {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* ═══ BUTTON STYLING ═══ */
  .btn-dark {
    background: var(--phoenix-gradient-main);
    border: none;
    color: var(--phoenix-white);
    font-family: var(--phoenix-font-heading);
    font-weight: 600;
    border-radius: var(--phoenix-radius-sm);
    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  .btn-dark:hover {
    background: linear-gradient(
      135deg,
      var(--phoenix-secondary) 0%,
      var(--phoenix-beige) 100%
    );
    color: var(--phoenix-white);
    transform: translateY(-2px);
    box-shadow: var(--phoenix-shadow-medium);
  }

  .btn-outline-danger {
    color: var(--phoenix-danger);
    border-color: rgba(214, 48, 49, 0.3);
    background: rgba(255, 255, 255, 0.9);
    font-family: var(--phoenix-font-heading);
    font-weight: 500;
    border-radius: var(--phoenix-radius-sm);
  }

  .btn-outline-danger:hover {
    background: var(--phoenix-danger);
    color: var(--phoenix-white);
    border-color: var(--phoenix-danger);
  }

  .item-actions {
    width: 100%;
    justify-content: flex-end;
  }

  .add-to-cart, .remove-item {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    line-height: 1.5;
    border-radius: var(--phoenix-radius-sm);
    transition: all 0.3s ease;
    font-family: var(--phoenix-font-heading);
    font-weight: 500;
  }

  .add-to-cart {
    min-width: 112px;
    display: inline-block;
    text-align: center;
    background: var(--phoenix-gradient-main);
    border: none;
    color: var(--phoenix-white);
  }

  .add-to-cart:hover:not(:disabled) {
    background: linear-gradient(
      135deg,
      var(--phoenix-secondary) 0%,
      var(--phoenix-beige) 100%
    );
    color: var(--phoenix-white);
  }

  .add-to-cart:disabled {
    background: rgba(210, 193, 182, 0.5);
    cursor: not-allowed;
    opacity: 0.7;
    color: var(--phoenix-secondary);
  }

  /* ═══ LOADING STATE FOR BUTTONS ═══ */
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .btn:disabled:hover {
    background-color: inherit;
    border-color: inherit;
  }

  /* ═══ PRODUCT IMAGE STYLING ═══ */
  .product-image-container {
    height: 16rem;
    overflow: hidden;
    position: relative;
    border-radius: var(--phoenix-radius-md);
  }

  .product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: top;
    transition: transform 0.5s ease;
  }

  .product-card:hover .product-image {
    transform: scale(1.05);
  }

  .product-tag, .offer-badge {
    position: absolute;
    top: 0.75rem;
    left: 0.75rem;
    z-index: 10;
    background: var(--phoenix-gradient-main);
    color: var(--phoenix-white);
    font-size: 0.75rem;
    padding: 0.25rem 0.75rem;
    border-radius: var(--phoenix-radius-sm);
    font-family: var(--phoenix-font-heading);
    font-weight: 600;
  }

  .add-to-cart-btn {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    background: var(--phoenix-gradient-main);
    color: var(--phoenix-white);
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .add-to-cart-btn:hover:not(:disabled) {
    background: linear-gradient(
      135deg,
      var(--phoenix-secondary) 0%,
      var(--phoenix-beige) 100%
    );
    transform: scale(1.1);
  }

  .add-to-cart-btn:disabled {
    background: rgba(210, 193, 182, 0.5);
    cursor: not-allowed;
    color: var(--phoenix-secondary);
  }

  /* ═══ STOCK STATUS STYLING ═══ */
  .stock-status {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: var(--phoenix-radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
    font-family: var(--phoenix-font-heading);
  }

  .in-stock {
    background-color: rgba(0, 184, 148, 0.1);
    color: var(--phoenix-success);
  }

  .low-stock {
    background-color: rgba(253, 203, 110, 0.2);
    color: var(--phoenix-warning);
  }

  .out-of-stock {
    background-color: rgba(214, 48, 49, 0.1);
    color: var(--phoenix-danger);
  }

  .wishlist-stats .stock-status {
    padding: 0.15rem 0.5rem;
    font-size: 0.75rem;
  }

  /* ═══ PAGINATION STYLING ═══ */
  .pagination .page-link {
    color: var(--phoenix-primary);
    border: 1px solid rgba(210, 193, 182, 0.4);
    background: rgba(255, 255, 255, 0.9);
    font-family: var(--phoenix-font-heading);
    font-weight: 500;
    border-radius: var(--phoenix-radius-sm);
    margin: 0 0.25rem;
    padding: 0.5rem 1rem;
  }

  .pagination .page-item.active .page-link {
    background: var(--phoenix-gradient-main);
    border-color: var(--phoenix-primary);
    color: var(--phoenix-white);
  }

  .pagination .page-item.disabled .page-link {
    color: var(--phoenix-secondary);
    background: rgba(210, 193, 182, 0.2);
  }

  .pagination .page-link:hover {
    background: var(--phoenix-gradient-soft);
    border-color: var(--phoenix-secondary);
    color: var(--phoenix-primary);
  }

  /* ═══ EMPTY STATE STYLING ═══ */
  .empty-wishlist {
    text-align: center;
    padding: 3rem 1rem;
  }

  .empty-wishlist i {
    font-size: 4rem;
    color: var(--phoenix-beige);
    margin-bottom: 1.5rem;
  }

  .empty-wishlist h3 {
    color: var(--phoenix-primary);
    font-family: var(--phoenix-font-heading);
    font-weight: 600;
    margin-bottom: 1rem;
  }

  .empty-wishlist p {
    color: var(--phoenix-secondary);
    font-family: var(--phoenix-font-body);
    margin-bottom: 2rem;
  }

  /* ═══ PRODUCT DETAILS STYLING ═══ */
  .wishlist-item h3 {
    color: var(--phoenix-primary);
    font-family: var(--phoenix-font-heading);
    font-weight: 600;
  }

  .wishlist-item h3 a {
    color: var(--phoenix-primary);
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .wishlist-item h3 a:hover {
    color: var(--phoenix-secondary);
  }

  .wishlist-item .text-muted {
    color: var(--phoenix-secondary) !important;
  }

  .wishlist-item .small {
    color: var(--phoenix-secondary);
    font-family: var(--phoenix-font-body);
  }

  .offer-title {
    color: var(--phoenix-success);
    font-family: var(--phoenix-font-heading);
    font-weight: 500;
    font-size: 0.875rem;
  }

  .fw-bold {
    font-family: var(--phoenix-font-heading);
    color: var(--phoenix-primary);
  }

  .text-decoration-line-through {
    color: var(--phoenix-secondary) !important;
  }

  /* ═══ WISHLIST SUMMARY STYLING ═══ */
  #wishlistSummary {
    position: sticky;
    top: 2rem;
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(210, 193, 182, 0.3);
    border-radius: var(--phoenix-radius-lg);
    backdrop-filter: var(--phoenix-blur);
    box-shadow: var(--phoenix-shadow-soft);
    padding: 1.5rem;
  }

  /* ═══ RESPONSIVE DESIGN ═══ */
  @media (max-width: 767.98px) {
    .wishlist-stats .stock-status {
      display: inline-block;
      margin-bottom: 0.5rem;
      margin-right: 0.5rem;
    }

    #wishlistSummary {
      position: static;
      margin-top: 2rem;
    }

    .item-actions {
      width: 100%;
      justify-content: flex-start;
    }

    .phoenix-container {
      padding: 1rem 0;
    }
  }

  @media (max-width: 991px) {
    .phoenix-sidebar {
      margin-bottom: 2rem;
    }
  }

  @media (max-width: 575.98px) {
    .phoenix-container {
      padding: 1rem 0;
    }
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const addAllToCartBtn = document.querySelector('#addAllToCartBtn');
    const addAllToCartSummaryBtn = document.querySelector('#addAllToCartSummaryBtn');
    const clearWishlistBtn = document.querySelector('#clearWishlistBtn');
    const emptyWishlist = document.querySelector('.empty-wishlist');
    const wishlistItemsContainer = document.querySelector('.wishlist-items');
    const wishlistSummary = document.querySelector('#wishlistSummary');
    const cartCountElement = document.querySelector('.cart-count');
    const wishlistCountElement = document.querySelector('.wishlist-count');
    
    // Add all to cart
    [addAllToCartBtn, addAllToCartSummaryBtn].forEach(btn => {
      if (btn) {
        btn.addEventListener('click', async function () {
          // Add loading state
          const originalText = btn.textContent;
          btn.disabled = true;
          btn.textContent = 'Adding...';

          try {
            const response = await fetch('/api/wishlist/add-all-to-cart', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });
            const result = await response.json();

            if (result.success) {
              // Update cart and wishlist counts
              cartCountElement.textContent = result.cartCount;
              cartCountElement.dataset.count = result.cartCount;
              wishlistCountElement.textContent = result.wishlistCount;
              wishlistCountElement.dataset.count = result.wishlistCount;

              // Handle UI updates based on remaining wishlist items
              if (result.wishlistCount === 0) {
                // Show empty state if all items were moved
                if (emptyWishlist) emptyWishlist.classList.remove('d-none');
                if (wishlistItemsContainer) wishlistItemsContainer.classList.add('d-none');
                if (wishlistSummary) wishlistSummary.classList.add('d-none');
              } else {
                // Update the display to show only remaining items
                setTimeout(() => {
                  window.location.reload(); // Reload to show updated wishlist
                }, 1000);
              }

              // Create detailed message
              let message = result.message;
              if (result.warnings && result.warnings.length > 0) {
                message += '<br><small>Issues:</small><br>' + result.warnings.map(w => `• ${w}`).join('<br>');
              }

              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                html: message,
                showConfirmButton: false,
                timer: 4000
              });
            } else {
              // Reset button state on error
              btn.disabled = false;
              btn.textContent = originalText;

              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 2000
              });
            }
          } catch (error) {
            // Reset button state on error
            btn.disabled = false;
            btn.textContent = originalText;

            console.error('Error adding all to cart:', error);
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Error adding items to cart',
              showConfirmButton: false,
              timer: 1500
            });
          }
        });
      }
    });
  
    // Clear wishlist with confirmation
    if (clearWishlistBtn) {
      clearWishlistBtn.addEventListener('click', async function () {
        // Show confirmation dialog
        const result = await Swal.fire({
          title: 'Clear Wishlist?',
          text: 'Are you sure you want to remove all items from your wishlist? This action cannot be undone.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#dc3545',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Yes, clear it!',
          cancelButtonText: 'Cancel',
          reverseButtons: true
        });

        // If user confirmed, proceed with clearing
        if (result.isConfirmed) {
          try {
            const response = await fetch('/api/wishlist/clear', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });
            const apiResult = await response.json();

            if (apiResult.success) {
              emptyWishlist.classList.remove('d-none');
              wishlistItemsContainer.classList.add('d-none');
              wishlistSummary.classList.add('d-none');
              wishlistCountElement.textContent = apiResult.wishlistCount;
              wishlistCountElement.dataset.count = apiResult.wishlistCount;

              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Wishlist cleared successfully!',
                showConfirmButton: false,
                timer: 2000
              });
            } else {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: apiResult.message,
                showConfirmButton: false,
                timer: 1500
              });
            }
          } catch (error) {
            console.error('Error clearing wishlist:', error);
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Error clearing wishlist',
              showConfirmButton: false,
              timer: 1500
            });
          }
        }
      });
    }
  
    // Individual item actions
    document.querySelectorAll('.wishlist-item').forEach(item => {
      const productId = item.dataset.productId;
      const addToCartBtn = item.querySelector('.add-to-cart');
      const removeBtn = item.querySelector('.remove-item');
  
      // Move to cart from wishlist
      if (addToCartBtn) {
        addToCartBtn.addEventListener('click', async function () {
          // Add loading state
          const originalText = addToCartBtn.innerHTML;
          addToCartBtn.disabled = true;
          addToCartBtn.innerHTML = '<i class="ri-loader-4-line me-1"></i>Moving...';

          try {
            const response = await fetch('/api/wishlist/add-to-cart', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ productId, quantity: 1 })
            });
            const result = await response.json();

            if (result.success) {
              // Update cart count
              cartCountElement.textContent = result.cartCount;
              cartCountElement.dataset.count = result.cartCount;

              // Update wishlist count
              if (wishlistCountElement) {
                wishlistCountElement.textContent = result.wishlistCount;
                wishlistCountElement.dataset.count = result.wishlistCount;
              }

              // Remove item from wishlist display with animation
              if (result.removedFromWishlist) {
                item.style.opacity = '0';
                item.style.transform = 'translateX(100%)';

                setTimeout(() => {
                  item.remove();

                  const remainingItems = document.querySelectorAll('.wishlist-item').length;

                  // Toggle empty state if needed
                  if (remainingItems === 0) {
                    if (emptyWishlist) emptyWishlist.classList.remove('d-none');
                    if (wishlistItemsContainer) wishlistItemsContainer.classList.add('d-none');
                    if (wishlistSummary) wishlistSummary.classList.add('d-none');
                  } else {
                    // Update wishlist title and summary
                    const titleElement = document.querySelector('.wishlist-items h2');
                    if (titleElement) {
                      titleElement.textContent = `Wishlist (${remainingItems} items)`;
                    }
                    updateWishlistSummaryDirectly();
                  }
                }, 300);
              }

              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: result.message,
                showConfirmButton: false,
                timer: 2000
              });
            } else {
              // Reset button state on error
              addToCartBtn.disabled = false;
              addToCartBtn.innerHTML = originalText;

              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 2000
              });
            }
          } catch (error) {
            // Reset button state on error
            addToCartBtn.disabled = false;
            addToCartBtn.innerHTML = originalText;

            console.error('Error moving to cart:', error);
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Error moving to cart',
              showConfirmButton: false,
              timer: 1500
            });
          }
        });
      }
  
      // Remove from wishlist
      if (removeBtn) {
        removeBtn.addEventListener('click', async function () {
          try {
            // Get price before removing item from DOM
            const priceElement = item.querySelector('.fw-bold');
            const priceText = priceElement ? priceElement.textContent.trim() : '₹0';
            const priceValue = parseFloat(priceText.replace('₹', '')) || 0;
            
            const response = await fetch('/api/wishlist/toggle', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ productId })
            });
            const result = await response.json();
  
            if (result.success) {
              // Remove item with animation
              item.style.opacity = '0';
              
              setTimeout(() => {
                // Remove from DOM
                item.remove();
                
                // Update wishlist count in header
                if (wishlistCountElement) {
                  wishlistCountElement.textContent = result.wishlistCount;
                  wishlistCountElement.dataset.count = result.wishlistCount;
                }
  
                const remainingItems = document.querySelectorAll('.wishlist-item').length;
                
                // Toggle empty state if needed
                if (remainingItems === 0) {
                  if (emptyWishlist) emptyWishlist.classList.remove('d-none');
                  if (wishlistItemsContainer) wishlistItemsContainer.classList.add('d-none');
                  if (wishlistSummary) wishlistSummary.classList.add('d-none');
                } else {
                  // Calculate new total and update wishlist title
                  const titleElement = document.querySelector('.wishlist-items h2');
                  if (titleElement) {
                    titleElement.textContent = `Wishlist (${remainingItems} items)`;
                  }
                  
                  // Update wishlist summary
                  updateWishlistSummaryDirectly();
                }
  
                Swal.fire({
                  toast: true,
                  position: 'top-end',
                  icon: 'success',
                  title: result.message,
                  showConfirmButton: false,
                  timer: 1500
                });
              }, 300);
            } else {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 1500
              });
            }
          } catch (error) {
            console.error('Error removing from wishlist:', error);
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Error removing item',
              showConfirmButton: false,
              timer: 1500
            });
          }
        });
      }
    });
  
    // Add to cart for recently viewed products
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
      button.addEventListener('click', async function () {
        const productId = this.dataset.productId;
  
        try {
          const response = await fetch('/api/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, quantity: 1 })
          });
          const result = await response.json();
  
          if (result.success) {
            cartCountElement.textContent = result.cartCount;
            cartCountElement.dataset.count = result.cartCount;
  
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'success',
              title: result.message,
              showConfirmButton: false,
              timer: 1500
            });
          } else {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: result.message,
              showConfirmButton: false,
              timer: 1500
            });
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error adding to cart',
            showConfirmButton: false,
            timer: 1500
          });
        }
      });
    });
  
    // Direct approach to update the wishlist summary
    function updateWishlistSummaryDirectly() {
      try {
        if (!wishlistSummary) return;
        
        // Get all current wishlist items
        const items = document.querySelectorAll('.wishlist-item');
        const itemCount = items.length;
        
        // Calculate new total value
        let totalValue = 0;
        items.forEach(item => {
          const priceEl = item.querySelector('.fw-bold');
          if (priceEl) {
            const priceText = priceEl.textContent.trim();
            const price = parseFloat(priceText.replace('₹', '')) || 0;
            totalValue += price;
          }
        });
        
        // Update title count
        const titleElement = document.querySelector('.wishlist-items h2');
        if (titleElement) {
          titleElement.textContent = `Wishlist (${itemCount} items)`;
        }
        
        // Get the specific elements by their content rather than position
        const summaryDivs = wishlistSummary.querySelectorAll('.d-flex');
        let totalItemsEl, valueEl;
        
        // Find the right elements based on their text content
        summaryDivs.forEach(div => {
          const label = div.querySelector('span:first-child');
          if (label && label.textContent.includes('Total Items')) {
            totalItemsEl = div.querySelector('.fw-semibold');
          } else if (label && label.textContent.includes('Estimated Value')) {
            valueEl = div.querySelector('.fw-semibold');
          }
        });
        
        // Update the elements if found
        if (totalItemsEl) {
          totalItemsEl.textContent = itemCount;
        } else {
          console.error('Could not find total items element');
        }
        
        if (valueEl) {
          valueEl.textContent = `₹${totalValue.toFixed(2)}`;
        } else {
          console.error('Could not find estimated value element');
        }
        
        // Update add all buttons state
        if (addAllToCartBtn) addAllToCartBtn.disabled = itemCount === 0;
        if (addAllToCartSummaryBtn) addAllToCartSummaryBtn.disabled = itemCount === 0;
        
      } catch (error) {
        console.error('Error updating wishlist summary:', error);
      }
    }
  });
</script>
