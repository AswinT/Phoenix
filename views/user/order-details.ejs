<%- include("../partials/user/header") %>
<!-- Order Details Styles -->
<link rel="stylesheet" href="/styles/user/order-details.css" />

<!-- Order Details Page -->
<section class="order-details-page-section">
  <div class="container">
    <!-- Breadcrumb -->
    <nav class="order-breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/orders">Orders</a></li>
        <li class="breadcrumb-item active">Order Details</li>
      </ol>
    </nav>

    <!-- Order Header -->
    <div class="order-header">
      <div class="order-header-content">
        <div class="order-header-left">
          <div class="back-button">
            <a href="/orders" class="back-link">
              <i class="ri-arrow-left-line"></i>
              Back to Orders
            </a>
          </div>
          <div class="order-title-section">
            <h1 class="order-title">Order Details</h1>
            <div class="order-meta">
              <span class="order-number">Order #<%= order.orderNumber %></span>
              <span class="order-date">Placed on <%= order.formattedDate %></span>
            </div>
          </div>
        </div>
        <div class="order-header-right">
          <div class="order-status-badge">
            <% if (order.orderStatus === 'Delivered') { %>
              <span class="status-badge delivered">
                <i class="ri-check-line"></i>
                Delivered
              </span>
            <% } else if (order.orderStatus === 'Shipped') { %>
              <span class="status-badge shipped">
                <i class="ri-truck-line"></i>
                Shipped
              </span>
            <% } else if (order.orderStatus === 'Processing') { %>
              <span class="status-badge processing">
                <i class="ri-time-line"></i>
                Processing
              </span>
            <% } else if (order.orderStatus === 'Cancelled') { %>
              <span class="status-badge cancelled">
                <i class="ri-close-line"></i>
                Cancelled
              </span>
            <% } else if (order.orderStatus === 'Partially Cancelled') { %>
              <span class="status-badge partially-cancelled">
                <i class="ri-information-line"></i>
                Partially Cancelled
              </span>
            <% } else if (order.orderStatus === 'Placed') { %>
              <span class="status-badge placed">
                <i class="ri-shopping-bag-line"></i>
                Placed
              </span>
            <% } else if (order.orderStatus === 'Returned') { %>
              <span class="status-badge returned">
                <i class="ri-arrow-go-back-line"></i>
                Returned
              </span>
            <% } else if (order.orderStatus === 'Partially Returned') { %>
              <span class="status-badge partially-returned">
                <i class="ri-arrow-go-back-line"></i>
                Partially Returned
              </span>
            <% } else if (order.orderStatus === 'Return Requested') { %>
              <span class="status-badge return-requested">
                <i class="ri-question-line"></i>
                Return Requested
              </span>
            <% } else if (order.orderStatus === 'Partially Return Requested') { %>
              <span class="status-badge partially-return-requested">
                <i class="ri-question-line"></i>
                Partially Return Requested
              </span>
            <% } else if (order.orderStatus === 'Pending Payment') { %>
              <span class="status-badge pending-payment">
                <i class="ri-error-warning-line"></i>
                Payment Pending
              </span>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <div class="row g-4">
      <!-- Main Content -->
      <div class="col-lg-8">
        <!-- Order Timeline -->
        <div class="order-timeline-card floating-card">
          <div class="card-header">
            <h3 class="card-title">
              <i class="ri-time-line"></i>
              Order Status Timeline
            </h3>
          </div>
          <div class="card-body">
            <div class="timeline">
              <% timeline.forEach((item, index) => { %>
                <div class="timeline-item <%= item.completed ? 'completed' : item.active ? 'active' : item.cancelled ? 'cancelled' : item.returned ? 'returned' : item.return_requested ? 'return-requested' : 'pending' %>">
                  <div class="timeline-marker">
                    <% if (item.completed) { %>
                      <i class="ri-check-line"></i>
                    <% } else if (item.active) { %>
                      <i class="ri-play-line"></i>
                    <% } else if (item.cancelled) { %>
                      <i class="ri-close-line"></i>
                    <% } else if (item.returned) { %>
                      <i class="ri-arrow-go-back-line"></i>
                    <% } else if (item.return_requested) { %>
                      <i class="ri-question-line"></i>
                    <% } else { %>
                      <i class="ri-time-line"></i>
                    <% } %>
                  </div>
                  <div class="timeline-content">
                    <h6 class="timeline-title"><%= item.status %></h6>
                    <p class="timeline-time"><%= item.timestamp %></p>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        </div>

        <!-- Order Items -->
        <div class="order-items-card floating-card">
          <div class="card-header">
            <h3 class="card-title">
              <i class="ri-shopping-cart-line"></i>
              Items in Your Order (<%= order.items.length %>)
            </h3>
          </div>
          <div class="card-body">
            <div class="items-list">
              <% order.items.forEach(item => { %>
                <div class="order-item">
                  <div class="item-content">
                    <!-- Product Image -->
                    <div class="item-image">
                      <img
                        src="<%= item.image || '/api/placeholder/120/120' %>"
                        alt="<%= item.model || 'Product' %>"
                        onerror="this.src='/api/placeholder/120/120'"
                      />
                    </div>

                    <!-- Product Details -->
                    <div class="item-details">
                      <div class="item-header">
                        <h4 class="item-name">
                          <%= item.model || 'Unknown Product' %>
                        </h4>
                        <div class="item-status-indicator">
                          <% if (item.status === 'Active') { %>
                            <% if (order.orderStatus === 'Delivered') { %>
                              <span class="item-status-badge delivered">
                                <i class="ri-check-line"></i>
                                Delivered
                              </span>
                            <% } else if (order.orderStatus === 'Shipped') { %>
                              <span class="item-status-badge shipped">
                                <i class="ri-truck-line"></i>
                                Shipped
                              </span>
                            <% } else if (order.orderStatus === 'Processing') { %>
                              <span class="item-status-badge processing">
                                <i class="ri-time-line"></i>
                                Processing
                              </span>
                            <% } else { %>
                              <span class="item-status-badge placed">
                                <i class="ri-shopping-bag-line"></i>
                                Placed
                              </span>
                            <% } %>
                          <% } else if (item.status === 'Cancelled') { %>
                            <span class="item-status-badge cancelled">
                              <i class="ri-close-line"></i>
                              Cancelled
                            </span>
                          <% } else if (item.status === 'Returned') { %>
                            <span class="item-status-badge returned">
                              <i class="ri-arrow-go-back-line"></i>
                              Returned
                            </span>
                          <% } else if (item.status === 'Return Requested') { %>
                            <span class="item-status-badge return-requested">
                              <i class="ri-question-line"></i>
                              Return Requested
                            </span>
                          <% } %>
                        </div>
                      </div>

                      <div class="item-meta">
                        <div class="item-info">
                          <span class="item-brand">
                            <i class="ri-headphone-line"></i>
                            <%= item.brand || 'Unknown Brand' %>
                          </span>
                          <span class="item-quantity">Qty: <%= item.quantity || 1 %></span>
                        </div>
                        
                        <% if (item.offerTitle) { %>
                          <div class="item-offer">
                            <i class="ri-gift-line"></i>
                            <%= item.offerTitle %>
                          </div>
                        <% } %>
                      </div>

                      <!-- Price Display -->
                      <div class="item-pricing">
                        <% 
                          // Ensure all price values are numbers with fallbacks
                          const itemPrice = typeof item.price === 'number' ? item.price : 0;
                          const itemQuantity = typeof item.quantity === 'number' ? item.quantity : 1;
                          const itemDiscountedPrice = typeof item.discountedPrice === 'number' ? item.discountedPrice : itemPrice;
                          const itemOriginalPrice = typeof item.originalPrice === 'number' ? item.originalPrice : itemPrice;
                          const itemPriceAtAddition = typeof item.priceAtAddition === 'number' ? item.priceAtAddition : itemPrice;
                          const itemOfferDiscount = typeof item.offerDiscount === 'number' ? item.offerDiscount : 0;
                          const itemCouponDiscount = typeof item.couponDiscount === 'number' ? item.couponDiscount : 0;
                          const itemDiscountPercentage = typeof item.discountPercentage === 'number' ? item.discountPercentage : 0;
                        %>
                        
                        <% if (itemDiscountedPrice && itemDiscountedPrice < itemOriginalPrice) { %>
                          <div class="price-breakdown">
                            <span class="original-price">₹<%= item.formattedPrice || itemOriginalPrice.toFixed(2) %></span>
                            <span class="discounted-price">₹<%= (itemDiscountedPrice * itemQuantity).toFixed(2) %></span>
                          </div>
                          <% if (itemOfferDiscount > 0) { %>
                            <div class="discount-info">
                              <i class="ri-price-tag-3-line"></i>
                              Save <%= itemDiscountPercentage %>% with offer
                            </div>
                          <% } %>
                        <% } else { %>
                          <div class="price-breakdown">
                            <span class="current-price">₹<%= (itemPriceAtAddition * itemQuantity).toFixed(2) %></span>
                          </div>
                        <% } %>
                        
                        <% if (itemCouponDiscount > 0) { %>
                          <div class="coupon-discount">
                            <i class="ri-coupon-line"></i>
                            Coupon: -₹<%= itemCouponDiscount.toFixed(2) %>
                          </div>
                        <% } %>
                      </div>

                      <!-- Item Actions -->
                      <div class="item-actions">
                        <% if (item.status === 'Active') { %>
                          <% if (item.canBeCancelled) { %>
                            <button
                              class="action-btn cancel-btn"
                              onclick="openCustomCancelModal('<%= item.product._id || item.product %>')"
                            >
                              <i class="ri-close-line"></i>
                              Cancel Item
                            </button>
                          <% } %>

                          <% if (item.canBeReturned) { %>
                            <button
                              class="action-btn return-btn"
                              data-order-id="<%= order._id %>"
                              data-product-id="<%= item.product._id || item.product %>"
                              type="button"
                            >
                              <i class="ri-arrow-go-back-line"></i>
                              Return Item
                            </button>
                          <% } %>

                          <% if (order.orderStatus === 'Delivered') { %>
                            <button class="action-btn review-btn">
                              <i class="ri-star-line"></i>
                              Write Review
                            </button>
                            <button class="action-btn reorder-btn" onclick="reorder('<%= order._id %>')">
                              <i class="ri-shopping-cart-line"></i>
                              Buy Again
                            </button>
                          <% } %>
                        <% } %>
                      </div>

                      <!-- Refund Information -->
                      <% if (item.status === 'Cancelled' || item.status === 'Returned' || item.status === 'Return Requested') { %>
                        <div class="refund-info-section">
                          <%
                            let showRefundInfo = true;
                            let refundMessage = "Refund Processed";
                            let refundIcon = "ri-check-line";
                            let refundClass = "success";

                            if (order.paymentMethod === 'COD') {
                              const wasDelivered = order.orderStatus === 'Delivered' ||
                                                 order.deliveredAt ||
                                                 item.status === 'Delivered';
                              if (!wasDelivered) {
                                showRefundInfo = false;
                                refundMessage = "Order Cancelled";
                                refundIcon = "ri-information-line";
                                refundClass = "info";
                              }
                            }

                            // Calculate refund amount
                            let actualPaidAmount = 0;
                            if (order.items.length === 1) {
                              actualPaidAmount = order.total;
                            } else {
                              const itemFinalPrice = item.priceBreakdown?.finalPrice || (item.discountedPrice * item.quantity);
                              const orderSubtotal = order.total - (order.tax || 0);
                              const itemProportion = itemFinalPrice / orderSubtotal;
                              actualPaidAmount = order.total * itemProportion;
                            }
                          %>

                          <div class="refund-card <%= refundClass %>">
                            <div class="refund-header">
                              <i class="<%= refundIcon %>"></i>
                              <span class="refund-title">
                                <% if (item.status === 'Return Requested') { %>
                                  Expected Refund
                                <% } else { %>
                                  <%= refundMessage %>
                                <% } %>
                              </span>
                            </div>
                            <div class="refund-content">
                              <% if (showRefundInfo) { %>
                                <div class="refund-amount">₹<%= actualPaidAmount.toFixed(2) %></div>
                                <div class="refund-description">
                                  <% if (item.status === 'Return Requested') { %>
                                    Will be refunded to your wallet
                                  <% } else { %>
                                    Refunded to wallet
                                  <% } %>
                                </div>
                              <% } else { %>
                                <div class="refund-description">
                                  No payment was collected for this COD order
                                </div>
                              <% } %>
                            </div>
                          </div>

                          <% if (item.cancellationReason || item.returnReason) { %>
                            <div class="reason-info">
                              <strong>Reason:</strong> <%= item.cancellationReason || item.returnReason %>
                            </div>
                          <% } %>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </div>

                <!-- Item Modals -->
                <% if (item.canBeCancelled) { %>
                  <!-- Custom Cancel Item Modal -->
                  <div class="custom-modal" id="customCancelModal<%= item.product._id || item.product %>" style="display: none;">
                    <div class="custom-modal-overlay" onclick="closeCustomModal('customCancelModal<%= item.product._id || item.product %>')"></div>
                    <div class="custom-modal-content">
                      <div class="custom-modal-header">
                        <h5 class="custom-modal-title">
                          <i class="ri-close-circle-line"></i>
                          Cancel Item
                        </h5>
                        <button type="button" class="custom-modal-close" onclick="closeCustomModal('customCancelModal<%= item.product._id || item.product %>')">
                          <i class="ri-close-line"></i>
                        </button>
                      </div>
                      <div class="custom-modal-body">
                        <div class="cancel-item-info">
                          <div class="item-preview">
                            <img src="<%= item.image || '/api/placeholder/80/80' %>" alt="<%= item.model %>" onerror="this.src='/api/placeholder/80/80'">
                            <div>
                              <h6><%= item.model || 'Unknown Product' %></h6>
                              <p>Quantity: <%= item.quantity %></p>
                              <p>Price: <%= item.formattedFinalPrice || '₹0.00' %></p>
                            </div>
                          </div>

                          <div class="refund-preview">
                            <%
                              let actualPaidAmount = 0;
                              if (order.items.length === 1) {
                                actualPaidAmount = order.total;
                              } else {
                                const itemFinalPrice = item.priceBreakdown?.finalPrice || (item.discountedPrice * item.quantity);
                                const orderSubtotal = order.total - (order.tax || 0);
                                const itemProportion = itemFinalPrice / orderSubtotal;
                                actualPaidAmount = order.total * itemProportion;
                              }
                            %>
                            <% if (order.paymentMethod === 'COD' && order.orderStatus !== 'Delivered' && !order.deliveredAt) { %>
                              <div class="alert alert-info">
                                <i class="ri-information-line"></i>
                                <div>
                                  <strong>No refund required</strong>
                                  <p>This COD order will be cancelled before delivery. No payment has been collected.</p>
                                </div>
                              </div>
                            <% } else { %>
                              <div class="alert alert-success">
                                <i class="ri-money-dollar-circle-line"></i>
                                <div>
                                  <strong>Refund: ₹<%= actualPaidAmount.toFixed(2) %></strong>
                                  <p>Will be credited to your wallet</p>
                                </div>
                              </div>
                            <% } %>
                          </div>
                        </div>

                        <form class="cancel-form" id="cancelItemForm<%= item.product._id || item.product %>">
                          <div class="form-group">
                            <label for="cancelItemReason<%= item.product._id || item.product %>">Reason for Cancellation</label>
                            <select class="form-control" id="cancelItemReason<%= item.product._id || item.product %>" required>
                              <option value="">Select a reason</option>
                              <option value="Changed my mind">Changed my mind</option>
                              <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                              <option value="Ordered by mistake">Ordered by mistake</option>
                              <option value="Shipping time is too long">Shipping time is too long</option>
                              <option value="Other">Other</option>
                            </select>
                          </div>
                          <div class="form-group" id="otherReasonDiv<%= item.product._id || item.product %>" style="display: none;">
                            <label for="otherReason<%= item.product._id || item.product %>">Please specify</label>
                            <textarea class="form-control" id="otherReason<%= item.product._id || item.product %>" rows="3"></textarea>
                          </div>
                        </form>
                      </div>
                      <div class="custom-modal-footer">
                        <button type="button" class="btn-secondary" onclick="closeCustomModal('customCancelModal<%= item.product._id || item.product %>')">Cancel</button>
                        <button type="button" class="btn-danger custom-cancel-btn" 
                                data-order-id="<%= order._id %>" 
                                data-product-id="<%= item.product._id || item.product %>"
                                onclick="handleCustomCancelItem(this, '<%= order._id %>', '<%= item.product._id || item.product %>')">
                          <i class="ri-close-line"></i>
                          Cancel Item
                        </button>
                      </div>
                    </div>
                  </div>
                <% } %>

                <% if (item.canBeReturned) { %>
                  <!-- Return Item Modal -->
                  <div class="modal fade" id="returnItemModal<%= item.product._id || item.product %>" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered">
                      <div class="modal-content modern-modal">
                        <div class="modal-header">
                          <h5 class="modal-title">
                            <i class="ri-arrow-go-back-line"></i>
                            Return Item
                          </h5>
                          <button type="button" class="btn-close-modal" data-bs-dismiss="modal">
                            <i class="ri-close-line"></i>
                          </button>
                        </div>
                        <div class="modal-body">
                          <div class="return-item-info">
                            <div class="item-preview">
                              <img src="<%= item.image || '/api/placeholder/80/80' %>" alt="<%= item.model %>">
                              <div>
                                <h6><%= item.model || 'Unknown Product' %></h6>
                                <p>Quantity: <%= item.quantity %></p>
                                <p>Price: <%= item.formattedFinalPrice %></p>
                              </div>
                            </div>

                            <div class="return-policy">
                              <div class="alert alert-warning">
                                <i class="ri-information-line"></i>
                                <div>
                                  <strong>Return Policy</strong>
                                  <p>Item must be in original condition. Refund will be processed to your wallet after approval.</p>
                                </div>
                              </div>
                            </div>
                          </div>

                          <form class="return-form" enctype="multipart/form-data">
                            <div class="form-group">
                              <label for="returnItemReason<%= item.product._id || item.product %>">Reason for Return</label>
                              <select class="form-control" id="returnItemReason<%= item.product._id || item.product %>" required>
                                <option value="">Select a reason</option>
                                <option value="Item damaged">Item damaged</option>
                                <option value="Item defective">Item defective</option>
                                <option value="Wrong item received">Wrong item received</option>
                                <option value="Item does not match description">Item does not match description</option>
                                <option value="Other">Other</option>
                              </select>
                            </div>
                            <div class="form-group" id="otherReturnReasonDiv<%= item.product._id || item.product %>" style="display: none;">
                              <label for="otherReturnReason<%= item.product._id || item.product %>">Please specify</label>
                              <textarea class="form-control" id="otherReturnReason<%= item.product._id || item.product %>" rows="3"></textarea>
                            </div>
                            <div class="form-group">
                              <label for="returnImage<%= item.product._id || item.product %>">Upload Image (Optional)</label>
                              <div class="file-upload">
                                <input type="file" class="form-control" id="returnImage<%= item.product._id || item.product %>" name="returnImage" accept="image/*">
                                <div class="file-upload-text">
                                  <i class="ri-upload-line"></i>
                                  Choose file or drag here
                                </div>
                              </div>
                              <img id="returnImagePreview<%= item.product._id || item.product %>" src="#" alt="Preview" style="display:none; max-width:100px; margin-top:10px;" />
                            </div>
                          </form>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn-secondary" data-bs-dismiss="modal">Cancel</button>
                          <button type="button" class="btn-warning" onclick="returnItem('<%= order._id %>', '<%= item.product._id || item.product %>')">
                            <i class="ri-arrow-go-back-line"></i>
                            Return Item
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                <% } %>
              <% }) %>
            </div>
          </div>
        </div>

        <!-- Shipping & Billing Info -->
        <div class="shipping-billing-card floating-card">
          <div class="card-header">
            <h3 class="card-title">
              <i class="ri-map-pin-line"></i>
              Shipping & Billing Information
            </h3>
          </div>
          <div class="card-body">
            <div class="row g-4">
              <div class="col-md-6">
                <div class="info-section">
                  <h4 class="info-title">
                    <i class="ri-truck-line"></i>
                    Shipping Address
                  </h4>
                  <div class="address-info">
                    <div class="address-name"><%= order.shippingAddress.fullName || 'N/A' %></div>
                    <div class="address-line"><%= order.shippingAddress.street || '' %></div>
                    <% if (order.shippingAddress.landmark) { %>
                      <div class="address-line"><%= order.shippingAddress.landmark %></div>
                    <% } %>
                    <div class="address-line">
                      <%= order.shippingAddress.district || '' %>, <%= order.shippingAddress.state || '' %> <%= order.shippingAddress.pincode || '' %>
                    </div>
                    <div class="address-phone">
                      <i class="ri-phone-line"></i>
                      <%= order.shippingAddress.phone || 'N/A' %>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="info-section">
                  <h4 class="info-title">
                    <i class="ri-bank-card-line"></i>
                    Payment Method
                  </h4>
                  <div class="payment-info">
                    <div class="payment-method">
                      <i class="ri-<%= order.paymentMethod === 'COD' ? 'hand-coin-line' : 'bank-card-line' %>"></i>
                      <%= order.paymentMethod || 'Cash on Delivery' %>
                    </div>
                    <div class="payment-status">
                      <%
                        let paymentStatusDisplay = '';
                        let paymentStatusClass = '';
                        
                        if (order.paymentMethod === 'COD') {
                          if (order.orderStatus === 'Cancelled') {
                            paymentStatusDisplay = 'No Payment Required';
                            paymentStatusClass = 'status-info';
                          } else if (order.orderStatus === 'Delivered') {
                            paymentStatusDisplay = 'Paid (Cash)';
                            paymentStatusClass = 'status-success';
                          } else {
                            paymentStatusDisplay = 'Pay on Delivery';
                            paymentStatusClass = 'status-warning';
                          }
                        } else {
                          switch (order.paymentStatus) {
                            case 'Paid':
                              paymentStatusDisplay = 'Paid';
                              paymentStatusClass = 'status-success';
                              break;
                            case 'Pending':
                              paymentStatusDisplay = 'Payment Pending';
                              paymentStatusClass = 'status-warning';
                              break;
                            case 'Failed':
                              paymentStatusDisplay = 'Payment Failed';
                              paymentStatusClass = 'status-danger';
                              break;
                            case 'Refunded':
                              paymentStatusDisplay = 'Refunded';
                              paymentStatusClass = 'status-info';
                              break;
                            case 'Partially Refunded':
                              paymentStatusDisplay = 'Partially Refunded';
                              paymentStatusClass = 'status-info';
                              break;
                            case 'Refund Processing':
                              paymentStatusDisplay = 'Refund Processing';
                              paymentStatusClass = 'status-warning';
                              break;
                            case 'Pending Payment':
                              paymentStatusDisplay = 'Payment Required';
                              paymentStatusClass = 'status-danger';
                              break;
                            default:
                              paymentStatusDisplay = order.paymentStatus || 'Unknown';
                              paymentStatusClass = 'status-info';
                          }
                        }
                      %>
                      <span class="payment-status-badge <%= paymentStatusClass %>">
                        <%= paymentStatusDisplay %>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Order Summary Sidebar -->
      <div class="col-lg-4">
        <div class="order-summary-sidebar floating-card">
          <div class="card-header">
            <h3 class="card-title">
              <i class="ri-file-list-3-line"></i>
              Order Summary
            </h3>
          </div>
          <div class="card-body">
            <div class="summary-details">
              <div class="summary-row">
                <span class="summary-label">Items (<%= order.items.length %>):</span>
                <span class="summary-value"><%= order.formattedSubtotal %></span>
              </div>
              
              <% if (order.discount && order.discount > 0) { %>
                <div class="summary-row discount">
                  <span class="summary-label">
                    <i class="ri-price-tag-3-line"></i>
                    Offer Discount:
                  </span>
                  <span class="summary-value">-<%= order.formattedDiscount %></span>
                </div>
              <% } %>
              
              <% if (order.couponDiscount && order.couponDiscount > 0) { %>
                <div class="summary-row discount">
                  <span class="summary-label">
                    <i class="ri-coupon-line"></i>
                    Coupon<%= order.couponCode ? ` (${order.couponCode})` : '' %>:
                  </span>
                  <span class="summary-value">-<%= order.formattedCouponDiscount %></span>
                </div>
              <% } %>
              
              <div class="summary-row">
                <span class="summary-label">
                  <i class="ri-truck-line"></i>
                  Shipping:
                </span>
                <span class="summary-value free">FREE</span>
              </div>
              
              <div class="summary-row">
                <span class="summary-label">Tax:</span>
                <span class="summary-value"><%= order.formattedTax %></span>
              </div>
              
              <div class="summary-divider"></div>
              
              <div class="summary-total">
                <span class="total-label">Order Total</span>
                <span class="total-value"><%= order.formattedTotal %></span>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="order-actions">
              <%
                const orderNotTooFarProgressed = ['Placed', 'Processing', 'Partially Cancelled', 'Partially Returned', 'Partially Return Requested'].includes(order.orderStatus);
                const hasActiveItems = order.items.some(item => item.status === 'Active');
                const canCancelOrder = orderNotTooFarProgressed && hasActiveItems;
                const canReturnOrder = order.orderStatus === 'Delivered' && hasActiveItems;
                const canRetryPayment = order.orderStatus === 'Pending Payment' && order.paymentStatus === 'Pending Payment';

                // Calculate remaining order amount
                let remainingOrderAmount = 0;
                if (hasActiveItems) {
                  const activeItems = order.items.filter(item => item.status === 'Active');
                  if (activeItems.length === order.items.length) {
                    remainingOrderAmount = order.total;
                  } else {
                    let activeItemsSubtotal = 0;
                    activeItems.forEach(item => {
                      const itemFinalPrice = item.priceBreakdown?.finalPrice || (item.discountedPrice * item.quantity);
                      activeItemsSubtotal += itemFinalPrice;
                    });
                    let totalItemsSubtotal = 0;
                    order.items.forEach(item => {
                      const itemFinalPrice = item.priceBreakdown?.finalPrice || (item.discountedPrice * item.quantity);
                      totalItemsSubtotal += itemFinalPrice;
                    });
                    if (totalItemsSubtotal > 0) {
                      const proportion = activeItemsSubtotal / totalItemsSubtotal;
                      remainingOrderAmount = order.total * proportion;
                    }
                  }
                }
              %>

              <% if (canRetryPayment) { %>
                <%
                  const retryAttempts = order.paymentRetryAttempts || 0;
                  const maxRetryAttempts = 5;
                  const canStillRetry = retryAttempts < maxRetryAttempts;
                %>
                
                <div class="payment-retry-section">
                  <div class="retry-info">
                    <i class="ri-error-warning-line"></i>
                    <div>
                      <h5>Payment Required</h5>
                      <p>Complete your payment to confirm this order</p>
                    </div>
                  </div>
                  
                  <% if (canStillRetry) { %>
                    <button class="btn-retry-payment" onclick="retryPayment('<%= order._id %>')" id="retryPaymentBtn">
                      <i class="ri-refresh-line"></i>
                      Retry Payment
                    </button>
                    <div class="retry-attempts">
                      <%= maxRetryAttempts - retryAttempts %> attempts remaining
                    </div>
                  <% } else { %>
                    <button class="btn-retry-payment disabled" disabled>
                      <i class="ri-forbid-line"></i>
                      Retry Limit Reached
                    </button>
                    <div class="support-info">
                      Contact support for assistance
                    </div>
                  <% } %>
                </div>
              <% } %>

              <div class="action-buttons">
                <a href="/orders/<%= order._id %>/invoice" class="action-btn view-invoice">
                  <i class="ri-file-text-line"></i>
                  View Invoice
                </a>
                <a href="/orders/<%= order._id %>/invoice/download" class="action-btn download-invoice" onclick="downloadInvoice(event, '<%= order._id %>', '<%= order.orderNumber %>')">
                  <i class="ri-download-line"></i>
                  Download Invoice
                </a>
                
                <% if (canCancelOrder) { %>
                  <button class="action-btn cancel-order" data-bs-toggle="modal" data-bs-target="#cancelOrderModal">
                    <i class="ri-close-line"></i>
                    Cancel Order
                  </button>
                <% } else if (canReturnOrder) { %>
                  <button class="action-btn return-order" data-bs-toggle="modal" data-bs-target="#returnOrderModal">
                    <i class="ri-arrow-go-back-line"></i>
                    Return Order
                  </button>
                <% } else if (!canRetryPayment) { %>
                  <button class="action-btn help-btn">
                    <i class="ri-question-line"></i>
                    Need Help?
                  </button>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Order Action Modals -->
<% if (canCancelOrder) { %>
  <!-- Cancel Order Modal -->
  <div class="modal fade" id="cancelOrderModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content modern-modal">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="ri-close-circle-line"></i>
            Cancel Order
          </h5>
          <button type="button" class="btn-close-modal" data-bs-dismiss="modal">
            <i class="ri-close-line"></i>
          </button>
        </div>
        <div class="modal-body">
          <%
            const activeItems = order.items.filter(item => item.status === 'Active');
            const cancelledItems = order.items.filter(item => item.status === 'Cancelled');
          %>

          <div class="cancel-order-info">
            <div class="order-preview">
              <h6>Order #<%= order.orderNumber %></h6>
              <% if (cancelledItems.length > 0) { %>
                <div class="status-info">
                  <div class="status-row">
                    <span>Total Items:</span>
                    <span><%= order.items.length %></span>
                  </div>
                  <div class="status-row">
                    <span>Already Cancelled:</span>
                    <span><%= cancelledItems.length %></span>
                  </div>
                  <div class="status-row">
                    <span>Remaining to Cancel:</span>
                    <span><%= activeItems.length %></span>
                  </div>
                </div>
              <% } %>
              <div class="amount-info">
                <strong>Amount: ₹<%= remainingOrderAmount.toFixed(2) %></strong>
              </div>
            </div>

            <div class="refund-preview">
              <% if (order.paymentMethod === 'COD' && order.orderStatus !== 'Delivered' && !order.deliveredAt) { %>
                <div class="alert alert-info">
                  <i class="ri-information-line"></i>
                  <div>
                    <strong>No refund required</strong>
                    <p>This COD order will be cancelled before delivery.</p>
                  </div>
                </div>
              <% } else { %>
                <div class="alert alert-success">
                  <i class="ri-money-dollar-circle-line"></i>
                  <div>
                    <strong>Refund: ₹<%= remainingOrderAmount.toFixed(2) %></strong>
                    <p>Will be credited to your wallet</p>
                  </div>
                </div>
              <% } %>
            </div>
          </div>

          <form class="cancel-form">
            <div class="form-group">
              <label for="cancelOrderReason">Reason for Cancellation</label>
              <select class="form-control" id="cancelOrderReason" required>
                <option value="">Select a reason</option>
                <option value="Changed my mind">Changed my mind</option>
                <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                <option value="Ordered by mistake">Ordered by mistake</option>
                <option value="Shipping time is too long">Shipping time is too long</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="form-group" id="otherOrderReasonDiv" style="display: none;">
              <label for="otherOrderReason">Please specify</label>
              <textarea class="form-control" id="otherOrderReason" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn-danger" onclick="cancelOrder('<%= order._id %>')">
            <i class="ri-close-line"></i>
            Cancel Order
          </button>
        </div>
      </div>
    </div>
  </div>
<% } %>

<% if (canReturnOrder) { %>
  <!-- Return Order Modal -->
  <div class="modal fade" id="returnOrderModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content modern-modal">
        <div class="modal-header">
          <h5 class="modal-title">
            <i class="ri-arrow-go-back-line"></i>
            Return Order
          </h5>
          <button type="button" class="btn-close-modal" data-bs-dismiss="modal">
            <i class="ri-close-line"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="return-order-info">
            <div class="order-preview">
              <h6>Order #<%= order.orderNumber %></h6>
              <div class="amount-info">
                <strong>Total: <%= order.formattedTotal %></strong>
              </div>
            </div>

            <div class="return-policy">
              <div class="alert alert-warning">
                <i class="ri-information-line"></i>
                <div>
                  <strong>Return Policy</strong>
                  <p>All items must be in original condition. Refund will be processed after approval.</p>
                </div>
              </div>
            </div>
          </div>

          <form class="return-form">
            <div class="form-group">
              <label for="returnOrderReason">Reason for Return</label>
              <select class="form-control" id="returnOrderReason" required>
                <option value="">Select a reason</option>
                <option value="Items damaged">Items damaged</option>
                <option value="Items defective">Items defective</option>
                <option value="Wrong items received">Wrong items received</option>
                <option value="Items do not match description">Items do not match description</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="form-group" id="otherReturnOrderReasonDiv" style="display: none;">
              <label for="otherReturnOrderReason">Please specify</label>
              <textarea class="form-control" id="otherReturnOrderReason" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn-warning" onclick="returnOrder('<%= order._id %>')">
            <i class="ri-arrow-go-back-line"></i>
            Return Order
          </button>
        </div>
      </div>
    </div>
  </div>
<% } %>

<%- include("../partials/user/footer") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
// All the existing JavaScript functionality remains the same
// Just updating the notification system to use SweetAlert

function showNotification(message, type = 'info') {
  Swal.fire({
    toast: true,
    position: 'top-end',
    icon: type,
    title: message,
    showConfirmButton: false,
    timer: 3000,
    background: '#fff',
    color: '#1B3C53'
  });
}

// Enhanced button state management with animation awareness
let buttonStates = new Map();
let modalAnimationInProgress = false;

function setButtonLoading(button, loading = true) {
  // Add null check for button parameter
  if (!button || !button.classList) {
    console.error('setButtonLoading: Invalid button element', button);
    return;
  }

  if (loading) {
    button.disabled = true;
    button.classList.add('loading');
    buttonStates.set(button, button.textContent || 'Button');
    button.textContent = 'Processing...';
    modalAnimationInProgress = true;
  } else {
    button.disabled = false;
    button.classList.remove('loading');
    const originalText = buttonStates.get(button);
    if (originalText) {
      button.textContent = originalText;
      buttonStates.delete(button);
    } else {
      // Fallback text if original text is not found
      button.textContent = button.dataset.originalText || 'Return Item';
    }
    modalAnimationInProgress = false;
  }
}

// Debounce function to prevent rapid modal operations
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const context = this; // Preserve the 'this' context
    const later = () => {
      clearTimeout(timeout);
      // Additional safety check before function execution
      if (typeof func === 'function') {
        try {
          func.apply(context, args); // Apply with preserved context
        } catch (error) {
          console.error('Error in debounced function execution:', error);
        }
      } else {
        console.error('Debounced function is not a function:', func);
      }
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Check if any modal animation is in progress
function isModalAnimating() {
  return modalAnimationInProgress ||
         document.querySelector('.modal.switching') !== null ||
         document.querySelector('.modal[data-animation-state="opening"]') !== null ||
         document.querySelector('.modal[data-animation-state="closing"]') !== null;
}

// Enhanced modal state tracking to prevent conflicts
document.addEventListener('DOMContentLoaded', function() {
  console.log('Initializing unified modal management system');

  // Initialize return button event handlers with animation-aware conflict prevention
  document.querySelectorAll('.action-btn.return-btn').forEach(button => {
    // Create debounced click handler for each button
    const debouncedClickHandler = debounce(async function(e) {
      e.preventDefault();
      e.stopPropagation();

      // Prevent clicks during animations or if button is disabled
      if (!this || this.disabled || (this.classList && this.classList.contains('loading')) || isModalAnimating()) {
        console.log('Button click ignored - animation in progress or button disabled');
        return false;
      }

      // Get data attributes with safety checks
      const orderId = this.dataset ? this.dataset.orderId : null;
      const productId = this.dataset ? this.dataset.productId : null;

      if (!orderId || !productId) {
        console.error('Missing order ID or product ID', { orderId, productId, element: this });
        showNotification('Error: Missing required data. Please refresh the page.', 'error');
        return false;
      }

      console.log('Processing return button click for product:', productId);

      // Set loading state with safety check
      if (this && this.classList) {
        setButtonLoading(this, true);
      }

      try {
        // Open the return modal with proper async handling
        await openReturnItemModal(orderId, productId);
        console.log('Modal opened successfully, resetting button state');
        if (this && this.classList) {
          setButtonLoading(this, false);
        }
      } catch (error) {
        console.error('Error opening return modal:', error);
        if (this && this.classList) {
          setButtonLoading(this, false);
        }
        showNotification('Error opening return dialog. Please refresh the page.', 'error');
      }

      return false;
    }, 300); // 300ms debounce to prevent rapid clicks

    button.addEventListener('click', debouncedClickHandler);
  });

  // Listen for Bootstrap modal events
  document.addEventListener('show.bs.modal', function(event) {
    console.log('Bootstrap modal showing:', event.target.id);
    // Close any existing modal before showing new one
    if (currentModal && currentModal !== event.target) {
      closeCurrentModal();
    }
    currentModal = event.target;
    currentModalInstance = bootstrap.Modal.getInstance(event.target);
  });

  document.addEventListener('shown.bs.modal', function(event) {
    console.log('Bootstrap modal shown:', event.target.id);
  });

  document.addEventListener('hide.bs.modal', function(event) {
    console.log('Bootstrap modal hiding:', event.target.id);
  });

  document.addEventListener('hidden.bs.modal', function(event) {
    console.log('Bootstrap modal hidden:', event.target.id);
    if (currentModal === event.target) {
      currentModal = null;
      currentModalInstance = null;
    }

    // Ensure body overflow is reset
    document.body.style.overflow = 'auto';

    // Clean up any remaining backdrops
    setTimeout(() => {
      const backdrops = document.querySelectorAll('.modal-backdrop');
      backdrops.forEach(backdrop => {
        if (!document.querySelector('.modal.show')) {
          backdrop.remove();
        }
      });
    }, 100);
  });

  // Handle escape key for all modals
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape' && currentModal) {
      closeCurrentModal();
    }
  });

  // Handle clicks on modal overlays
  document.addEventListener('click', function(event) {
    if (event.target.classList.contains('custom-modal-overlay')) {
      const modal = event.target.closest('.custom-modal');
      if (modal) {
        closeCustomModal(modal.id);
      }
    }
  });




});

// Custom Modal Functions - Updated for unified system
function openCustomCancelModal(productId) {

  // Close any existing modal first
  closeCurrentModal();

  setTimeout(() => {
    const modal = document.getElementById(`customCancelModal${productId}`);
    if (modal) {
      try {
        currentModal = modal;
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        currentModalInstance = { hide: () => closeCustomModal(`customCancelModal${productId}`) };
        console.log('Custom cancel modal opened successfully');
      } catch (error) {
        console.error('Error opening custom cancel modal:', error);
        showNotification('Error opening cancel dialog. Please refresh the page.', 'error');
      }
    } else {
      console.error('Custom cancel modal element not found:', `customCancelModal${productId}`);
      showNotification('Cancel dialog not found. Please refresh the page.', 'error');
    }
  }, 100);
}

function closeCustomModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';

    // Clear current modal tracking if this is the current modal
    if (currentModal === modal) {
      currentModal = null;
      currentModalInstance = null;
    }
  }
}

// Handle custom cancel item
function handleCustomCancelItem(button, orderId, productId) {
  // Disable button immediately
  button.disabled = true;
  button.style.pointerEvents = 'none';
  button.innerHTML = '<i class="ri-loader-4-line"></i> Processing...';
  
  // Get form data
  const selectElement = document.getElementById(`cancelItemReason${productId}`);
  const otherReasonElement = document.getElementById(`otherReason${productId}`);
  
  let reason = selectElement.value;
  if (reason === '') {
    showNotification('Please select a reason for cancellation', 'warning');
    button.disabled = false;
    button.style.pointerEvents = 'auto';
    button.innerHTML = '<i class="ri-close-line"></i> Cancel Item';
    return;
  }

  if (reason === 'Other') {
    const otherReason = otherReasonElement.value.trim();
    if (!otherReason) {
      showNotification('Please specify the reason for cancellation', 'warning');
      button.disabled = false;
      button.style.pointerEvents = 'auto';
      button.innerHTML = '<i class="ri-close-line"></i> Cancel Item';
      return;
    }
    reason = otherReason;
  }

  // Process cancellation
  cancelItem(orderId, productId).finally(() => {
    // Re-enable button
    button.disabled = false;
    button.style.pointerEvents = 'auto';
    button.innerHTML = '<i class="ri-close-line"></i> Cancel Item';
    
    // Close modal
    closeCustomModal(`customCancelModal${productId}`);
  });
}

// Handle dropdown changes for "Other" options
document.addEventListener('DOMContentLoaded', function() {
  // Order cancellation
  const cancelOrderReason = document.getElementById('cancelOrderReason');
  const otherOrderReasonDiv = document.getElementById('otherOrderReasonDiv');
  if (cancelOrderReason) {
    cancelOrderReason.addEventListener('change', function() {
      otherOrderReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
    });
  }

  // Order return
  const returnOrderReason = document.getElementById('returnOrderReason');
  const otherReturnOrderReasonDiv = document.getElementById('otherReturnOrderReasonDiv');
  if (returnOrderReason) {
    returnOrderReason.addEventListener('change', function() {
      otherReturnOrderReasonDiv.style.display = this.value === 'Other' ? 'block' : 'none';
    });
  }

  // Item cancellations and returns
  <% order.items.forEach((item, index) => { %>
    // Cancel item
    const cancelItemReason<%= index %> = document.getElementById('cancelItemReason<%= item.product._id || item.product %>');
    const otherReasonDiv<%= index %> = document.getElementById('otherReasonDiv<%= item.product._id || item.product %>');
    if (cancelItemReason<%= index %>) {
      cancelItemReason<%= index %>.addEventListener('change', function() {
        otherReasonDiv<%= index %>.style.display = this.value === 'Other' ? 'block' : 'none';
      });
    }

    // Return item
    const returnItemReason<%= index %> = document.getElementById('returnItemReason<%= item.product._id || item.product %>');
    const otherReturnReasonDiv<%= index %> = document.getElementById('otherReturnReasonDiv<%= item.product._id || item.product %>');
    if (returnItemReason<%= index %>) {
      returnItemReason<%= index %>.addEventListener('change', function() {
        otherReturnReasonDiv<%= index %>.style.display = this.value === 'Other' ? 'block' : 'none';
      });
    }

    // File upload preview
    const returnImage<%= index %> = document.getElementById('returnImage<%= item.product._id || item.product %>');
    if (returnImage<%= index %>) {
      returnImage<%= index %>.addEventListener('change', function(e) {
        const file = e.target.files[0];
        const preview = document.getElementById('returnImagePreview<%= item.product._id || item.product %>');
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            preview.src = e.target.result;
            preview.style.display = 'block';
          };
          reader.readAsDataURL(file);
        }
      });
    }
  <% }); %>
});

// Cancel entire order
async function cancelOrder(orderId) {
  const selectElement = document.getElementById('cancelOrderReason');
  const otherReasonElement = document.getElementById('otherOrderReason');

  let reason = selectElement.value;
  if (reason === '') {
    showNotification('Please select a reason for cancellation', 'warning');
    return;
  }

  if (reason === 'Other') {
    const otherReason = otherReasonElement.value.trim();
    if (!otherReason) {
      showNotification('Please specify the reason for cancellation', 'warning');
      return;
    }
    reason = otherReason;
  }

  try {
    showNotification('Processing your cancellation request...', 'info');
    
    const response = await fetch(`/api/orders/${orderId}/cancel`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ reason })
    });
    
    const data = await response.json();
    
    if (data.success) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
      if (modal) modal.hide();
      
      showNotification(data.message, 'success');
      setTimeout(() => window.location.reload(), 1500);
    } else {
      showNotification(data.message, 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('An error occurred while processing your request.', 'error');
  }
}

// Unified Modal Management System
let currentModal = null;
let currentModalInstance = null;

// Enhanced modal closing with animation synchronization
function closeCurrentModal() {
  return new Promise((resolve) => {
    if (currentModal && currentModalInstance) {
      try {
        console.log('Closing current modal:', currentModal.id);

        // Set animation state for debugging
        currentModal.setAttribute('data-animation-state', 'closing');

        // Add switching class to prevent animation conflicts
        currentModal.classList.add('switching');

        // For Bootstrap modals
        if (currentModalInstance.hide) {
          // Listen for the modal to be fully hidden
          const handleHidden = () => {
            currentModal.removeEventListener('hidden.bs.modal', handleHidden);
            currentModal.classList.remove('switching');
            currentModal.removeAttribute('data-animation-state');
            currentModal = null;
            currentModalInstance = null;
            resolve();
          };

          currentModal.addEventListener('hidden.bs.modal', handleHidden);
          currentModalInstance.hide();
        }
        // For custom modals
        else if (currentModal.style) {
          // Animate out
          currentModal.style.opacity = '0';

          setTimeout(() => {
            currentModal.style.display = 'none';
            currentModal.classList.remove('switching');
            currentModal.removeAttribute('data-animation-state');
            document.body.style.overflow = 'auto';

            // Remove any modal backdrops
            const backdrops = document.querySelectorAll('.modal-backdrop, .custom-modal-overlay');
            backdrops.forEach(backdrop => backdrop.remove());

            currentModal = null;
            currentModalInstance = null;
            resolve();
          }, 200); // Match CSS animation duration
        }
      } catch (error) {
        console.warn('Error closing modal:', error);
        // Fallback cleanup with animation reset
        if (currentModal) {
          currentModal.style.display = 'none';
          currentModal.style.opacity = '';
          currentModal.classList.remove('show', 'switching');
          currentModal.removeAttribute('data-animation-state');
        }
        document.body.style.overflow = 'auto';
        document.body.classList.remove('modal-open');

        const backdrops = document.querySelectorAll('.modal-backdrop, .custom-modal-overlay');
        backdrops.forEach(backdrop => backdrop.remove());

        currentModal = null;
        currentModalInstance = null;
        resolve();
      }
    } else {
      resolve();
    }
  });
}

// Enhanced modal opening with animation synchronization
async function openReturnItemModal(orderId, productId) {
  console.log('Opening return modal for product:', productId);

  // Close any existing modal first and wait for completion
  await closeCurrentModal();

  // Additional small delay to ensure DOM is ready
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const modalElement = document.getElementById(`returnItemModal${productId}`);
      if (modalElement) {
        try {
          currentModal = modalElement;

          // Set initial animation state
          modalElement.setAttribute('data-animation-state', 'opening');

          // Check if it's a Bootstrap modal
          if (modalElement.classList.contains('modal')) {
            // Ensure any existing instance is destroyed
            const existingInstance = bootstrap.Modal.getInstance(modalElement);
            if (existingInstance) {
              existingInstance.dispose();
            }

            // Remove fade class temporarily to prevent conflicts
            const hadFadeClass = modalElement.classList.contains('fade');
            if (hadFadeClass) {
              modalElement.classList.remove('fade');
            }

            // Create new instance without backdrop animation conflicts
            currentModalInstance = new bootstrap.Modal(modalElement, {
              backdrop: 'static',
              keyboard: false,
              focus: true
            });

            // Listen for modal shown event
            const handleShown = () => {
              modalElement.removeEventListener('shown.bs.modal', handleShown);
              modalElement.setAttribute('data-animation-state', 'open');
              console.log('Return modal opened successfully');
              resolve();
            };

            modalElement.addEventListener('shown.bs.modal', handleShown);

            // Show the modal
            currentModalInstance.show();

            // Restore fade class after showing (if it had one)
            if (hadFadeClass) {
              setTimeout(() => {
                modalElement.classList.add('fade');
              }, 50);
            }

          } else {
            // Handle as custom modal with smooth animation
            modalElement.style.display = 'flex';
            modalElement.style.opacity = '0';

            // Force reflow
            modalElement.offsetHeight;

            // Animate in
            modalElement.style.transition = 'opacity 0.2s ease-in-out';
            modalElement.style.opacity = '1';

            document.body.style.overflow = 'hidden';
            currentModalInstance = { hide: () => closeCustomModal(`returnItemModal${productId}`) };

            setTimeout(() => {
              modalElement.setAttribute('data-animation-state', 'open');
              console.log('Custom return modal opened successfully');
              resolve();
            }, 200);
          }

        } catch (error) {
          console.error('Error opening return modal:', error);
          modalElement.removeAttribute('data-animation-state');
          showNotification('Error opening return dialog. Please refresh the page.', 'error');
          reject(error);
        }
      } else {
        console.error('Return modal element not found:', `returnItemModal${productId}`);
        showNotification('Return dialog not found. Please refresh the page.', 'error');
        reject(new Error('Modal element not found'));
      }
    }, 150); // Slightly longer delay to ensure smooth transition
  });
}

// Handle cancel item button click with debouncing
let cancelItemInProgress = false;

function handleCancelItemClick(button, orderId, productId) {
  // Prevent multiple rapid clicks
  if (cancelItemInProgress) {
    return;
  }
  
  // Disable the button immediately to prevent shaking
  button.disabled = true;
  button.style.pointerEvents = 'none';
  button.style.opacity = '0.7';
  
  // Add loading state
  const originalText = button.innerHTML;
  button.innerHTML = '<i class="ri-loader-4-line"></i> Processing...';
  
  cancelItemInProgress = true;
  
  // Call the actual cancel function
  cancelItem(orderId, productId).finally(() => {
    // Re-enable the button after completion
    button.disabled = false;
    button.style.pointerEvents = 'auto';
    button.style.opacity = '1';
    button.innerHTML = originalText;
    cancelItemInProgress = false;
  });
}

// Cancel specific item
async function cancelItem(orderId, productId) {
  try {
    const selectElement = document.getElementById(`cancelItemReason${productId}`);
    const otherReasonElement = document.getElementById(`otherReason${productId}`);
    
    if (!selectElement) {
      showNotification('Modal elements not found. Please refresh the page.', 'error');
      return;
    }

    let reason = selectElement.value;
    if (reason === '') {
      showNotification('Please select a reason for cancellation', 'warning');
      return;
    }

    if (reason === 'Other') {
      if (!otherReasonElement) {
        showNotification('Other reason field not found. Please refresh the page.', 'error');
        return;
      }
      const otherReason = otherReasonElement.value.trim();
      if (!otherReason) {
        showNotification('Please specify the reason for cancellation', 'warning');
        return;
      }
      reason = otherReason;
    }

    showNotification('Processing your cancellation request...', 'info');
    
    const response = await fetch(`/orders/${orderId}/items/${productId}/cancel`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ reason })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
      const modalElement = document.getElementById(`cancelItemModal${productId}`);
      if (modalElement) {
        const modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
          modal.hide();
        } else {
          // If modal instance doesn't exist, try to hide it manually
          modalElement.classList.remove('show');
          document.body.classList.remove('modal-open');
          const backdrop = document.querySelector('.modal-backdrop');
          if (backdrop) backdrop.remove();
        }
      }
      
      showNotification(data.message, 'success');
      setTimeout(() => window.location.reload(), 1500);
    } else {
      showNotification(data.message || 'Cancellation failed', 'error');
    }
  } catch (error) {
    console.error('Error cancelling item:', error);
    showNotification('An error occurred while processing your request. Please try again.', 'error');
  }
}

// Return entire order
async function returnOrder(orderId) {
  const selectElement = document.getElementById('returnOrderReason');
  const otherReasonElement = document.getElementById('otherReturnOrderReason');

  let reason = selectElement.value;
  if (reason === '') {
    showNotification('Please select a reason for return', 'warning');
    return;
  }

  if (reason === 'Other') {
    const otherReason = otherReasonElement.value.trim();
    if (!otherReason) {
      showNotification('Please specify the reason for return', 'warning');
      return;
    }
    reason = otherReason;
  }

  try {
    showNotification('Processing your return request...', 'info');
    
    const response = await fetch(`/api/orders/${orderId}/return`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ reason })
    });
    
    const data = await response.json();
    
    if (data.success) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('returnOrderModal'));
      if (modal) modal.hide();
      
      showNotification(data.message, 'success');
      setTimeout(() => window.location.reload(), 1500);
    } else {
      showNotification(data.message, 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('An error occurred while processing your request.', 'error');
  }
}

// Return specific item
async function returnItem(orderId, productId) {
  const selectElement = document.getElementById(`returnItemReason${productId}`);
  const otherReasonElement = document.getElementById(`otherReturnReason${productId}`);
  const returnImageElement = document.getElementById(`returnImage${productId}`);

  let reason = selectElement.value;
  if (reason === '') {
    showNotification('Please select a reason for return', 'warning');
    return;
  }

  if (reason === 'Other') {
    const otherReason = otherReasonElement.value.trim();
    if (!otherReason) {
      showNotification('Please specify the reason for return', 'warning');
      return;
    }
    reason = otherReason;
  }

  try {
    showNotification('Processing your return request...', 'info');
    
    const formData = new FormData();
    formData.append('reason', reason);
    if (returnImageElement.files.length > 0) {
      formData.append('returnImage', returnImageElement.files[0]);
    }

    const response = await fetch(`/orders/${orderId}/items/${productId}/return`, {
      method: 'POST',
      body: formData
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Use unified modal closing system
      closeCurrentModal();

      showNotification(data.message, 'success');
      setTimeout(() => window.location.reload(), 1500);
    } else {
      showNotification(data.message, 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('An error occurred while processing your request.', 'error');
  }
}

// Download invoice
function downloadInvoice(event, orderId, orderNumber) {
  event.preventDefault();
  showNotification('Preparing your invoice download...', 'info');
  
  const link = document.createElement('a');
  link.href = `/orders/${orderId}/invoice/download`;
  link.download = `invoice-${orderNumber}.pdf`;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  setTimeout(() => {
    showNotification('Invoice download started!', 'success');
  }, 500);
}

// Reorder function
async function reorder(orderId) {
  try {
    showNotification('Adding items to your cart...', 'info');
    
    const response = await fetch(`/orders/${orderId}/reorder`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const data = await response.json();
    
    if (data.success) {
      showNotification(data.message || 'Items have been added to your cart', 'success');
      setTimeout(() => {
        window.location.href = data.redirectUrl || '/cart';
      }, 1500);
    } else {
      showNotification(data.message || 'Failed to add items to cart', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('An error occurred while processing your request', 'error');
  }
}

// Payment retry functionality
async function retryPayment(orderId) {
  const retryBtn = document.getElementById('retryPaymentBtn');
  if (!retryBtn) return;

  if (typeof Razorpay === 'undefined') {
    showNotification('Payment system is loading. Please wait and try again.', 'warning');
    return;
  }

  retryBtn.disabled = true;
  retryBtn.innerHTML = '<i class="ri-loader-4-line"></i> Processing...';

  try {
    showNotification('Initiating payment retry...', 'info');
    
    const response = await fetch(`/api/orders/${orderId}/retry-payment`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const result = await response.json();
    
    if (result.success && response.status === 200) {
      openRetryPaymentModal(result);
    } else {
      showNotification(result.message || 'Failed to initiate payment retry', 'error');
      retryBtn.disabled = false;
      retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('Network error. Please check your connection and try again.', 'error');
    retryBtn.disabled = false;
    retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
  }
}

function openRetryPaymentModal(orderData) {
  if (typeof Razorpay === 'undefined') {
    showNotification('Payment system not available. Please refresh the page.', 'error');
    return;
  }

  const options = {
    key: orderData.key,
    amount: orderData.amount,
    currency: orderData.currency,
    name: orderData.name,
    description: orderData.description,
    order_id: orderData.order.id,
    prefill: orderData.prefill,
    theme: { color: '#1B3C53' },
    modal: {
      ondismiss: function() {
        const retryBtn = document.getElementById('retryPaymentBtn');
        if (retryBtn) {
          retryBtn.disabled = false;
          retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
        }
      }
    },
    handler: function(response) {
      verifyRetryPayment(response);
    }
  };

  try {
    const rzp = new Razorpay(options);
    rzp.open();
  } catch (error) {
    console.error('Error opening Razorpay modal:', error);
    showNotification('Failed to open payment modal. Please try again.', 'error');
    const retryBtn = document.getElementById('retryPaymentBtn');
    if (retryBtn) {
      retryBtn.disabled = false;
      retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
    }
  }
}

async function verifyRetryPayment(response) {
  try {
    showNotification('Verifying payment...', 'info');
    
    const result = await fetch('/api/orders/verify-retry-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(response)
    });
    
    const data = await result.json();
    
    if (data.success) {
      showNotification('Payment successful! Redirecting...', 'success');
      setTimeout(() => {
        window.location.href = `/order-success/${data.orderId}`;
      }, 1500);
    } else {
      showNotification(data.message || 'Payment verification failed', 'error');
      const retryBtn = document.getElementById('retryPaymentBtn');
      if (retryBtn) {
        retryBtn.disabled = false;
        retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
      }
    }
  } catch (error) {
    console.error('Error:', error);
    showNotification('An error occurred while verifying payment.', 'error');
    const retryBtn = document.getElementById('retryPaymentBtn');
    if (retryBtn) {
      retryBtn.disabled = false;
      retryBtn.innerHTML = '<i class="ri-refresh-line"></i> Retry Payment';
    }
  }
}
</script>
