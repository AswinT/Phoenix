<%- include("../partials/user/header") %>

<!-- Cart Styles -->
<link rel="stylesheet" href="/styles/user/cart.css" />

<!-- Cart Page -->
<section class="cart-page-section">
  <div class="container">
    <!-- Breadcrumb -->
    <nav class="cart-breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/shopPage">Shop</a></li>
        <li class="breadcrumb-item active">Cart</li>
      </ol>
    </nav>

    <!-- Cart Header -->
    <div class="cart-header">
      <div class="cart-header-content">
        <div class="cart-icon">
          <i class="ri-shopping-cart-line"></i>
        </div>
        <h1 class="cart-title">Your Cart</h1>
        <p class="cart-subtitle">Review and modify your selected products</p>
      </div>
    </div>

    <!-- Empty Cart State (Full Width) -->
    <% if (cartItems.length === 0) { %>
    <div class="row">
      <div class="col-12">
        <div class="empty-cart-container">
          <div class="empty-cart-card">
            <div class="empty-cart-icon">
              <i class="ri-shopping-cart-line"></i>
            </div>
            <h3 class="empty-cart-title">Your cart is empty</h3>
            <p class="empty-cart-text">Looks like you haven't found your perfect headphones yet</p>
            <a href="/shopPage" class="btn-continue-shopping">
              <i class="ri-headphone-line"></i>
              Continue Shopping
            </a>
          </div>
        </div>
      </div>
    </div>
    <% } else { %>

    <!-- Cart with Items -->
    <div class="row g-4">
      <!-- Cart Items Column -->
      <div class="col-lg-8">
        <!-- Cart Items List -->
        <div class="cart-items-container">
          <div class="cart-items-header">
            <h2 class="items-count">Items (<%= cartItems.reduce((sum, item) => sum + item.quantity, 0) %>)</h2>
            <button class="btn-clear-cart" id="clearCartBtn">
              <i class="ri-delete-bin-line"></i>
              Clear Cart
            </button>
          </div>

          <div class="cart-items-list">
            <% cartItems.forEach(item => { %>
              <div class="cart-item floating-card" data-product-id="<%= item.product._id %>">
                <div class="cart-item-content">
                  <!-- Product Image -->
                  <div class="product-image-section">
                    <div class="product-image-wrapper">
                      <img src="<%= item.product.mainImage || '/api/placeholder/150/200' %>" alt="<%= item.product.model %>" class="product-image" />
                      <% if (item.product.activeOffer && item.product.discountPercentage > 0) { %>
                        <span class="discount-badge">
                          <%= Math.round(item.product.discountPercentage) %>% OFF
                        </span>
                      <% } %>
                    </div>
                  </div>

                  <!-- Product Details -->
                  <div class="product-details-section">
                    <div class="product-info">
                      <h3 class="product-title"><%= item.product.model %></h3>
                      <div class="product-meta">
                        <span class="product-brand">
                          <i class="ri-headphone-line"></i>
                          <%= item.product.brand %>
                        </span>
                        <% if (item.product.connectivity) { %>
                          <span class="product-connectivity">
                            <i class="ri-wireless-charging-line"></i>
                            <%= item.product.connectivity %>
                          </span>
                        <% } %>
                      </div>
                      
                      <% if (item.product.activeOffer) { %>
                        <div class="offer-info">
                          <i class="ri-gift-line"></i>
                          <%= item.product.activeOffer.title %>
                        </div>
                      <% } %>

                      <!-- Stock Status -->
                      <div class="stock-status stock-<%= item.product.stock > 10 ? 'in-stock' : item.product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
                        <i class="<%= item.product.stock > 10 ? 'ri-checkbox-circle-line' : item.product.stock > 0 ? 'ri-error-warning-line' : 'ri-close-circle-line' %>"></i>
                        <%= item.product.stock > 10 ? `In Stock (${item.product.stock} available)` : item.product.stock > 0 ? `Low Stock (${item.product.stock} left)` : 'Out of Stock' %>
                      </div>
                    </div>
                  </div>

                  <!-- Quantity & Price Section -->
                  <div class="quantity-price-section">
                    <!-- Quantity Controls -->
                    <div class="quantity-section">
                      <label class="quantity-label">Quantity:</label>
                      <div class="quantity-controls">
                        <button class="quantity-btn quantity-minus">
                          <i class="ri-subtract-line"></i>
                        </button>
                        <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1" max="<%= Math.min(5, item.product.stock) %>" readonly>
                        <button class="quantity-btn quantity-plus">
                          <i class="ri-add-line"></i>
                        </button>
                      </div>
                    </div>

                    <!-- Price & Actions -->
                    <div class="price-actions-section">
                      <div class="price-display">
                        <% if (item.product.discountPercentage > 0) { %>
                          <span class="original-price">₹<%= item.product.regularPrice.toFixed(2) %></span>
                          <span class="discounted-price">₹<%= (item.quantity * item.product.finalPrice).toFixed(2) %></span>
                        <% } else { %>
                          <span class="current-price">₹<%= (item.quantity * item.product.finalPrice).toFixed(2) %></span>
                        <% } %>
                      </div>
                      <div class="item-actions">
                        <button class="btn-remove-item remove-item">
                          <i class="ri-delete-bin-line"></i>
                          Remove
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>

          <!-- Continue Shopping Link -->
          <div class="continue-shopping-section">
            <a href="/shopPage" class="continue-shopping-link">
              <i class="ri-arrow-left-line"></i>
              Continue Shopping
            </a>
          </div>
        </div>
      </div>

      <!-- Order Summary Column -->
      <div class="col-lg-4">
        <div class="order-summary-container" id="orderSummary">
          <div class="order-summary-card floating-card">
            <div class="summary-header">
              <h2 class="summary-title">Order Summary</h2>
              <div class="summary-icon">
                <i class="ri-file-list-3-line"></i>
              </div>
            </div>
            
            <div class="summary-content">
              <!-- Subtotal -->
              <div class="summary-row">
                <span class="summary-label">Subtotal (<%= cartItems.reduce((sum, item) => sum + item.quantity, 0) %> items)</span>
                <span class="summary-value">₹<%= (parseFloat(totalAmount) + parseFloat(totalDiscount)).toFixed(2) %></span>
              </div>
              
              <!-- Offer Breakdown -->
              <% if (offerBreakdown && offerBreakdown.length > 0) { %>
                <% offerBreakdown.forEach(offer => { %>
                  <div class="summary-row discount-row">
                    <span class="summary-label">
                      <i class="ri-price-tag-3-line"></i>
                      <%= offer.title %>
                      <% if (offer.isSpecialOffer) { %>
                        <span class="special-offer-badge">Auto</span>
                      <% } %>
                    </span>
                    <span class="summary-value discount-value">-₹<%= offer.discount.toFixed(2) %></span>
                  </div>
                <% }) %>
              <% } else if (totalDiscount > 0) { %>
                <div class="summary-row discount-row">
                  <span class="summary-label">
                    <i class="ri-price-tag-3-line"></i>
                    Discount
                  </span>
                  <span class="summary-value discount-value">-₹<%= totalDiscount %></span>
                </div>
              <% } %>
              
              <!-- Shipping -->
              <div class="summary-row">
                <span class="summary-label">
                  <i class="ri-truck-line"></i>
                  Shipping
                </span>
                <span class="summary-value free-shipping">FREE</span>
              </div>
              
              <div class="summary-divider"></div>
              
              <!-- Total -->
              <div class="summary-total">
                <span class="total-label">Total</span>
                <span class="total-value">₹<%= totalAmount %></span>
              </div>
              
              <!-- Checkout Button -->
              <a href="/checkout" class="btn-checkout">
                <i class="ri-secure-payment-line"></i>
                <span>Proceed to Checkout</span>
              </a>
              
              <!-- Security Info -->
              <div class="security-info">
                <div class="security-item">
                  <i class="ri-shield-check-line"></i>
                  <span>Secure checkout</span>
                </div>
                <div class="security-item">
                  <i class="ri-arrow-go-back-line"></i>
                  <span>Easy returns</span>
                </div>
              </div>
              
              <!-- Payment Methods -->
              <div class="payment-methods">
                <div class="payment-methods-title">We accept</div>
                <div class="payment-icons">
                  <div class="payment-icon"><i class="ri-visa-line"></i></div>
                  <div class="payment-icon"><i class="ri-mastercard-line"></i></div>
                  <div class="payment-icon"><i class="ri-paypal-line"></i></div>
                  <div class="payment-icon"><i class="ri-apple-pay-line"></i></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <% } %>
  </div>
</section>

<!-- You May Also Like Section -->
<% if (relatedProducts && relatedProducts.length > 0) { %>
<section class="related-products-section">
  <div class="container">
    <div class="section-header">
      <h2 class="section-title">You May Also Like</h2>
      <div class="title-underline"></div>
    </div>
    <div class="related-products-grid">
      <% relatedProducts.slice(0, 4).forEach(product => { %>
        <div class="related-product-card floating-card">
          <div class="related-product-image">
            <% if (product.activeOffer && product.discountPercentage > 0) { %>
              <span class="related-discount-badge">
                <%= Math.round(product.discountPercentage) %>% OFF
              </span>
            <% } %>
            <a href="/products/<%= product._id %>">
              <img src="<%= product.mainImage || '/api/placeholder/300/300' %>" alt="<%= product.model %>">
            </a>
            <div class="related-product-overlay">
              <button class="btn-quick-add add-to-cart" data-product-id="<%= product._id %>">
                <i class="ri-shopping-cart-line"></i>
              </button>
            </div>
          </div>
          <div class="related-product-info">
            <div class="related-brand"><%= product.brand %></div>
            <h4 class="related-title">
              <a href="/products/<%= product._id %>"><%= product.model %></a>
            </h4>
            <div class="related-rating">
              <div class="related-stars">
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-fill"></i>
                <i class="ri-star-half-line"></i>
              </div>
              <span class="related-rating-text">(4.2)</span>
            </div>
            <div class="related-price">
              <% if (product.discountPercentage > 0) { %>
                <span class="related-original-price">₹<%= product.regularPrice.toFixed(2) %></span>
                <span class="related-current-price">₹<%= product.finalPrice.toFixed(2) %></span>
              <% } else { %>
                <span class="related-current-price">₹<%= product.regularPrice.toFixed(2) %></span>
              <% } %>
            </div>
            <div class="related-stock stock-<%= product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock' %>">
              <i class="<%= product.stock > 10 ? 'ri-checkbox-circle-line' : product.stock > 0 ? 'ri-error-warning-line' : 'ri-close-circle-line' %>"></i>
              <%= product.stock > 10 ? 'In Stock' : product.stock > 0 ? 'Low Stock' : 'Out of Stock' %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</section>
<% } %>



<%- include("../partials/user/footer") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
  // DOM Elements
  const clearCartBtn = document.querySelector('#clearCartBtn');
  const emptyCart = document.querySelector('.empty-cart-container');
  const cartItemsContainer = document.querySelector('.cart-items-container');
  const orderSummary = document.querySelector('#orderSummary');
  const cartCountElement = document.querySelector('.cart-count');
  
  // Store initial values for all quantity inputs
  document.querySelectorAll('.quantity-input').forEach(input => {
    input.dataset.previousValue = input.value;
  });

  // Clear cart
  if (clearCartBtn) {
    clearCartBtn.addEventListener('click', clearCart);
  }

  // Set up event listeners for all cart items
  setupCartItemHandlers();

  // Add to cart for related products
  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', function() {
      addToCart(this.dataset.productId);
    });
  });

  // Fixed order summary on scroll
  window.addEventListener('scroll', handleOrderSummaryPosition);

  // Main Functions
  async function clearCart() {
    const result = await Swal.fire({
      title: 'Clear Cart?',
      text: 'Are you sure you want to remove all items from your cart? This action cannot be undone.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#1B3C53',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, clear it!',
      cancelButtonText: 'Cancel',
      reverseButtons: true
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch('/api/cart/clear', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin'
        });

        if (!response.ok) {
          throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
        }

        const apiResult = await response.json();

        if (apiResult.success) {
          window.location.reload();
        } else {
          showNotification('error', apiResult.message || 'Failed to clear cart');
        }
      } catch (error) {
        console.error('Clear cart error:', error);
        showNotification('error', 'Error clearing cart');
      }
    }
  }

  function setupCartItemHandlers() {
    const cartItems = document.querySelectorAll('.cart-item');
    
    cartItems.forEach(item => {
      const productId = item.dataset.productId;
      const minusBtn = item.querySelector('.quantity-minus');
      const plusBtn = item.querySelector('.quantity-plus');
      const quantityInput = item.querySelector('.quantity-input');
      const removeBtn = item.querySelector('.remove-item');

      if (!quantityInput) return;

      quantityInput.dataset.previousValue = quantityInput.value;
      let updateTimeout;

      minusBtn && minusBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        if (value > 1) {
          quantityInput.value = value - 1;
          clearTimeout(updateTimeout);
          updateTimeout = setTimeout(() => {
            updateCartItem(productId, parseInt(quantityInput.value), item);
          }, 300);
        }
      });

      plusBtn && plusBtn.addEventListener('click', function() {
        let value = parseInt(quantityInput.value);
        const maxValue = parseInt(quantityInput.getAttribute('max') || '999');
        
        if (value >= maxValue) {
          const isQuantityLimit = maxValue === 5;
          const message = isQuantityLimit
            ? `Maximum 5 items allowed per product`
            : `Only ${maxValue} items in stock`;
          showNotification('error', message);
          return;
        }

        quantityInput.value = value + 1;
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
          updateCartItem(productId, parseInt(quantityInput.value), item);
        }, 300);
      });

      quantityInput && quantityInput.addEventListener('change', function() {
        let value = parseInt(this.value);
        const maxValue = parseInt(this.getAttribute('max') || '999');
        
        if (isNaN(value) || value < 1) {
          value = 1;
        } else if (value > maxValue) {
          value = maxValue;
          this.value = value;
          showNotification('error', `Only ${maxValue} items in stock`);
          return;
        }
        
        this.value = value;
        clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
          updateCartItem(productId, value, item);
        }, 300);
      });

      removeBtn && removeBtn.addEventListener('click', function() {
        removeCartItem(productId, item);
      });
    });
  }

  async function updateCartItem(productId, quantity, item) {
    try {
      item.classList.add('updating');
      
      const quantityInput = item.querySelector('.quantity-input');
      const previousValue = quantityInput.dataset.previousValue;
      
      const response = await fetch('/api/cart/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({
          productId: productId,
          quantity: quantity
        })
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        quantityInput.dataset.previousValue = quantity;
        
        const priceElement = item.querySelector('.discounted-price') || item.querySelector('.current-price');
        if (priceElement) {
          priceElement.textContent = `₹${result.itemTotal.toFixed(2)}`;
        }
        
        if (typeof result.totalAmount === 'number') {
          updateOrderSummaryDOM(result.totalAmount, result.cartCount);
        }
        
        if (result.cartCount !== undefined) {
          updateCartCount(result.cartCount);
        } else {
          recalculateCartCount();
        }

        showNotification('success', result.message || 'Cart updated successfully');
        
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        quantityInput.value = previousValue;
        showNotification('error', result.message || 'Failed to update cart');
      }
    } catch (error) {
      console.error('Cart update error:', error);
      const quantityInput = item.querySelector('.quantity-input');
      quantityInput.value = quantityInput.dataset.previousValue;
      showNotification('error', 'Error communicating with server');
    } finally {
      item.classList.remove('updating');
    }
  }

  async function removeCartItem(productId, item) {
    try {
      item.style.opacity = '0.5';
      
      const response = await fetch('/api/cart/remove', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ productId })
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        item.style.opacity = '0';
        setTimeout(() => {
          window.location.reload();
        }, 300);
      } else {
        item.style.opacity = '1';
        showNotification('error', result.message || 'Failed to remove item');
      }
    } catch (error) {
      console.error('Remove item error:', error);
      item.style.opacity = '1';
      showNotification('error', 'Error removing item');
    }
  }

  async function addToCart(productId) {
    try {
      const response = await fetch('/api/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ productId, quantity: 1 })
      });
      
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();

      if (result.success) {
        updateCartCount(result.cartCount);
        showNotification('success', result.message || 'Item added to cart');
      } else {
        showNotification('error', result.message || 'Failed to add item to cart');
      }
    } catch (error) {
      console.error('Add to cart error:', error);
      showNotification('error', 'Error adding to cart');
    }
  }

  // Helper Functions
  function updateCartCount(count) {
    if (cartCountElement) {
      cartCountElement.textContent = count;
      cartCountElement.dataset.count = count;
    }
  }

  function recalculateCartCount() {
    if (cartCountElement) {
      const count = Array.from(document.querySelectorAll('.cart-item'))
        .reduce((sum, item) => {
          const input = item.querySelector('.quantity-input');
          return sum + (input ? parseInt(input.value) : 0);
        }, 0);
      
      cartCountElement.textContent = count;
      cartCountElement.dataset.count = count;
    }
  }

  function updateOrderSummaryDOM(totalAmount, cartCount) {
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  }

  function handleOrderSummaryPosition() {
    if (!orderSummary) return;
    
    const parentContainer = orderSummary.closest('.col-lg-4');
    if (!parentContainer) return;
    
    const parentRect = parentContainer.getBoundingClientRect();
    const summaryHeight = orderSummary.offsetHeight;
    const windowHeight = window.innerHeight;
    
    if (window.innerWidth >= 992) {
      if (parentRect.top < 80 && parentRect.bottom > (summaryHeight + 80)) {
        orderSummary.classList.add('sticky-summary');
        orderSummary.style.width = parentRect.width + 'px';
        orderSummary.style.maxHeight = (windowHeight - 100) + 'px';
      } else {
        orderSummary.classList.remove('sticky-summary');
        orderSummary.style.width = '';
        orderSummary.style.maxHeight = '';
      }
    } else {
      orderSummary.classList.remove('sticky-summary');
      orderSummary.style.width = '';
      orderSummary.style.maxHeight = '';
    }
  }

  function showNotification(type, message) {
    Swal.fire({
      toast: true,
      position: 'top-end',
      icon: type,
      title: message,
      showConfirmButton: false,
      timer: 3000
    });
  }






});
</script>