<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login - Phoenix</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="/styles/shared/modern-auth-base.css">
    <link rel="stylesheet" href="/styles/user/loginPage.css" />
    <style>
      /* Modern Loading Spinner */
      .full-page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 249, 250, 0.95) 100%);
        display: none;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        z-index: 9999;
        backdrop-filter: blur(10px);
      }

      .circle-loader {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #000000;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
      }

      .loader-message {
        font-weight: 500;
        color: #333;
        font-family: var(--auth-font-family);
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  </head>
  <body class="auth-body">
    <!-- Full Page Loader -->
    <div class="full-page-loader" id="fullPageLoader">
      <div class="circle-loader"></div>
      <div class="loader-message">Logging in...</div>
    </div>

    <div class="auth-split-container">
      <!-- Left image side -->
      <div class="auth-image-side" style="background-image: url('/assets/login.jpeg');">
        <div class="auth-image-overlay">
          <div class="text-white auth-slide-in">
            <h2 class="h3 fw-bold mb-1">Welcome Back</h2>
            <p class="mb-0">Continue your audio journey with premium headphones</p>
          </div>
        </div>
      </div>

      <!-- Right form side -->
      <div class="auth-form-side">
        <div class="auth-form-container auth-fade-in">
          <div class="auth-logo-container">
            <img
              src="/assets/phoenix-logo.png"
              alt="Phoenix Logo"
              width="40" height="40"
            />
            <span class="auth-logo-text">Phoenix</span>
          </div>

          <h1 class="auth-title">Log in to your account</h1>
          <p class="auth-subtitle">Pick up where you left off</p>
          <form id="userLogin" method="post">
            <div class="auth-form-group">
              <label for="email" class="auth-form-label">Email Address</label>
              <input
                type="email"
                name="email"
                class="auth-form-control"
                id="email"
                placeholder="Enter your email"
              />
              <div id="emailError" class="auth-error"></div>
            </div>

            <div class="auth-form-group">
              <label for="password" class="auth-form-label">Password</label>
              <div class="auth-input-group">
                <input
                  type="password"
                  name="password"
                  class="auth-form-control"
                  id="password"
                  placeholder="Enter your password"
                />
                <button class="auth-toggle-password" type="button" tabindex="-1">
                  <i class="ri-eye-off-line"></i>
                </button>
              </div>
              <div id="passwordError" class="auth-error"></div>
            </div>

            <div style="text-align: right; margin-bottom: 1.5rem;">
              <a href="/forgotPassword" class="auth-link" style="font-size: 0.875rem;">Forgot password?</a>
            </div>

            <button
              type="submit"
              class="auth-btn auth-btn-primary auth-btn-full"
              id="submitButton"
            >
              Log In
            </button>

            <div class="auth-divider">
              <span>OR</span>
            </div>

            <a href="/auth/google" class="auth-btn auth-btn-secondary auth-btn-full" style="text-decoration: none;">
              <i class="ri-google-fill" style="margin-right: 0.5rem; color: #4285f4;"></i>
              Continue with Google
            </a>
          </form>
          <div style="text-align: center; margin-top: 1.5rem;">
            <p style="color: #6c757d; font-size: 0.875rem; margin: 0;">
              Don't have an account?
              <a href="/signup" class="auth-link" style="margin-left: 0.5rem;">Sign up</a>
            </p>
          </div>
        </div>
      </div>
    </div>
    <script>
      // Handle query parameters for various error states
      const urlParams = new URLSearchParams(window.location.search);
      const error = urlParams.get("error");
      
      if (error === "blocked") {
        Swal.fire({
          icon: "error",
          title: "Account Blocked",
          text: "Your account has been blocked by the administrator. Please contact support for assistance.",
          confirmButtonText: "OK",
          confirmButtonColor: "#d33"
        });
      } else if (error === "account_not_found") {
        Swal.fire({
          icon: "warning",
          title: "Account Not Found",
          text: "Your account could not be found. Please sign up or contact support.",
          confirmButtonText: "OK",
          confirmButtonColor: "#f39c12"
        });
      } else if (error === "auth_error") {
        Swal.fire({
          icon: "error",
          title: "Authentication Error",
          text: "There was an error with your session. Please log in again.",
          confirmButtonText: "OK",
          confirmButtonColor: "#d33"
        });
      }

      // Validation styling functions
      function setInvalid(element) {
        element.classList.add("is-invalid");
        element.classList.remove("is-valid");
      }
      function setValid(element) {
        element.classList.add("is-valid");
        element.classList.remove("is-invalid");
      }
      function resetValidation(element) {
        element.classList.remove("is-valid");
        element.classList.remove("is-invalid");
      }

      // Password toggle functionality
      document.querySelectorAll('.auth-toggle-password').forEach(button => {
        button.addEventListener('click', function() {
          const input = this.previousElementSibling;
          const icon = this.querySelector('i');

          if (input.type === 'password') {
            input.type = 'text';
            icon.classList.replace('ri-eye-off-line', 'ri-eye-line');
          } else {
            input.type = 'password';
            icon.classList.replace('ri-eye-line', 'ri-eye-off-line');
          }
        });
      });

      // Real-time validation
      document.getElementById("email").addEventListener("input", function () {
        const email = this.value.trim().toLowerCase();
        const emailError = document.getElementById("emailError");
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (email === "") {
          emailError.textContent = "";
          resetValidation(this);
        } else if (!emailRegex.test(email)) {
          emailError.textContent = "Enter a valid email address";
          setInvalid(this);
        } else {
          emailError.textContent = "";
          setValid(this);
        }
      });

      document.getElementById("password").addEventListener("input", function () {
        const password = this.value;
        const passwordError = document.getElementById("passwordError");
        if (password === "") {
          passwordError.textContent = "";
          resetValidation(this);
        } else if (password.length < 8) {
          passwordError.textContent = "Password must be at least 8 characters";
          setInvalid(this);
        } else {
          passwordError.textContent = "";
          setValid(this);
        }
      });

      // Show full page loader function
      function showLoader() {
        const loader = document.getElementById('fullPageLoader');
        loader.style.display = 'flex';
      }

      // Form submission
      document.getElementById("userLogin").addEventListener("submit", async (event) => {
        event.preventDefault();
        const email = document.getElementById("email").value.trim().toLowerCase();
        const password = document.getElementById("password").value;
        const submitButton = document.getElementById("submitButton");
        document.getElementById("emailError").textContent = "";
        document.getElementById("passwordError").textContent = "";
        let isValid = true;

        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!email || !emailRegex.test(email)) {
          document.getElementById("emailError").textContent = "Valid email is required";
          setInvalid(document.getElementById("email"));
          isValid = false;
        }
        if (!password || password.length < 8) {
          document.getElementById("passwordError").textContent =
            "Password must be at least 8 characters";
          setInvalid(document.getElementById("password"));
          isValid = false;
        }

        if (isValid) {
          try {
            submitButton.disabled = true;
            submitButton.innerHTML =
              '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Logging In...';
            const response = await fetch("/login", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ email, password }),
            });
            const result = await response.json();
            
            if (result.success) {
              // Show full page loader instead of SweetAlert
              showLoader();
              // Redirect after a short delay
              setTimeout(() => {
                window.location.href = "/";
              }, 1000);
            } else {
              submitButton.disabled = false;
              submitButton.textContent = "Log In";
              
              if (response.status === 403 && result.message.includes("verify")) {
                Swal.fire({
                  icon: "warning",
                  title: "Verification Required",
                  text: "Please verify your email first",
                  confirmButtonText: "Go to Verification",
                }).then(() => {
                  window.location.href = "/verify-otp";
                });
              } else if (response.status === 403 && result.message.includes("blocked")) {
                Swal.fire({
                  icon: "error",
                  title: "Account Blocked",
                  text: result.message || "Your account is blocked. Please contact support.",
                  confirmButtonText: "OK",
                });
              } else {
                Swal.fire({
                  icon: "error",
                  title: "Sign In Failed",
                  text: result.message || "Something went wrong!",
                  confirmButtonText: "Try Again",
                });
              }
            }
          } catch (error) {
            console.error("Signin error:", error);
            submitButton.disabled = false;
            submitButton.textContent = "Log In";
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Unable to connect to the server. Please try again later.",
              confirmButtonText: "OK",
            });
          }
        }
      });
    </script>
  </body>
</html>