<%- include("../partials/user/header") %>

<style>
      /* ════════════════════════════════════════════════════════════════════════════════════════ */
      /* PHOENIX PROFILE PAGE SPECIFIC STYLES */
      /* ═══════════════════════════════════════════════════════════════════════════════════════════ */
      :root {
        /* Phoenix Color Palette */
        --phoenix-primary: #1b3c53;
        --phoenix-secondary: #456882;
        --phoenix-beige: #d2c1b6;
        --phoenix-cream: #f9f3ef;
        --phoenix-white: #ffffff;
        --phoenix-dark: #2d3748;
        --phoenix-success: #00b894;
        --phoenix-warning: #fdcb6e;
        --phoenix-danger: #d63031;

        /* Gradients */
        --phoenix-gradient-main: linear-gradient(
          135deg,
          var(--phoenix-primary) 0%,
          var(--phoenix-secondary) 100%
        );
        --phoenix-gradient-soft: linear-gradient(
          135deg,
          var(--phoenix-cream) 0%,
          var(--phoenix-beige) 100%
        );
        --phoenix-gradient-card: linear-gradient(
          145deg,
          rgba(249, 243, 239, 0.95) 0%,
          rgba(210, 193, 182, 0.85) 100%
        );

        /* Shadows & Effects */
        --phoenix-shadow-soft: 0 8px 32px rgba(27, 60, 83, 0.12);
        --phoenix-shadow-medium: 0 12px 40px rgba(27, 60, 83, 0.18);
        --phoenix-shadow-strong: 0 16px 48px rgba(27, 60, 83, 0.25);
        --phoenix-blur: blur(16px);

        /* Typography */
        --phoenix-font-brand: "Audiowide", cursive;
        --phoenix-font-heading: "Montserrat", sans-serif;
        --phoenix-font-body: "Raleway", sans-serif;

        /* Spacing */
        --phoenix-radius-sm: 12px;
        --phoenix-radius-md: 16px;
        --phoenix-radius-lg: 20px;
        --phoenix-radius-xl: 24px;
      }

      /* ═══ GLOBAL STYLES ═══ */
      body {
        font-family: var(--phoenix-font-body);
        background: linear-gradient(
          135deg,
          var(--phoenix-cream) 0%,
          #f0ebe5 50%,
          var(--phoenix-beige) 100%
        );
        min-height: 100vh;
        color: var(--phoenix-dark);
      }

      .phoenix-container {
        background: var(--phoenix-gradient-card);
        min-height: 100vh;
        padding: 2rem 0;
      }

      /* ═══ SIDEBAR CONTAINER ═══ */
      .phoenix-sidebar {
        background: var(--phoenix-gradient-card);
        border-radius: var(--phoenix-radius-xl);
        box-shadow: var(--phoenix-shadow-medium);
        backdrop-filter: var(--phoenix-blur);
        border: 1px solid rgba(210, 193, 182, 0.3);
        overflow: hidden;
        position: relative;
        transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
      }

      .phoenix-sidebar::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(
          45deg,
          transparent 30%,
          rgba(249, 243, 239, 0.1) 50%,
          transparent 70%
        );
        animation: phoenixShimmer 3s ease-in-out infinite;
        pointer-events: none;
        z-index: 1;
      }

      @keyframes phoenixShimmer {
        0%,
        100% {
          transform: translateX(-100%);
          opacity: 0;
        }
        50% {
          transform: translateX(100%);
          opacity: 1;
        }
      }

      .phoenix-sidebar:hover {
        transform: translateY(-4px);
        box-shadow: var(--phoenix-shadow-strong);
      }

      /* ═══ PROFILE SECTION ═══ */
      .phoenix-profile {
        position: relative;
        z-index: 2;
        padding: 2rem;
        text-align: center;
        background: var(--phoenix-gradient-main);
        color: var(--phoenix-white);
      }

      .phoenix-profile::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 60%;
        height: 1px;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.3),
          transparent
        );
      }

      .phoenix-avatar {
        position: relative;
        display: inline-block;
        margin-bottom: 1.5rem;
      }

      .phoenix-avatar-img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid rgba(255, 255, 255, 0.9);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
      }

      .phoenix-avatar:hover .phoenix-avatar-img {
        transform: scale(1.08);
        border-color: var(--phoenix-cream);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.3);
      }

      .phoenix-avatar-badge {
        position: absolute;
        bottom: 5px;
        right: 5px;
        width: 24px;
        height: 24px;
        background: var(--phoenix-success);
        border: 3px solid var(--phoenix-white);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        animation: phoenixPulse 2s infinite;
      }

      @keyframes phoenixPulse {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
      }

      .phoenix-profile-name {
        font-family: var(--phoenix-font-heading);
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .phoenix-profile-email {
        font-family: var(--phoenix-font-body);
        font-size: 0.9rem;
        opacity: 0.9;
        margin-bottom: 0;
      }

      /* ═══ NAVIGATION SECTION ═══ */
      .phoenix-nav {
        position: relative;
        z-index: 2;
        padding: 1rem 0;
      }

      .phoenix-nav-header {
        padding: 1rem 1.5rem 0.5rem;
        font-family: var(--phoenix-font-heading);
        font-size: 0.8rem;
        font-weight: 700;
        color: var(--phoenix-secondary);
        text-transform: uppercase;
        letter-spacing: 1px;
        border-bottom: 1px solid rgba(210, 193, 182, 0.2);
        margin-bottom: 0.5rem;
      }

      .phoenix-nav-item {
        margin: 0.25rem 1rem;
        border-radius: var(--phoenix-radius-md);
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      }

      .phoenix-nav-link {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 1.25rem;
        color: var(--phoenix-dark);
        text-decoration: none;
        font-family: var(--phoenix-font-body);
        font-weight: 500;
        font-size: 0.95rem;
        background: transparent;
        border: none;
        width: 100%;
        text-align: left;
        position: relative;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      }

      .phoenix-nav-link::before {
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 0;
        background: var(--phoenix-gradient-main);
        transition: width 0.3s ease;
        border-radius: 0 var(--phoenix-radius-sm) var(--phoenix-radius-sm) 0;
      }

      .phoenix-nav-link:hover {
        background: rgba(255, 255, 255, 0.8);
        color: var(--phoenix-primary);
        transform: translateX(8px);
        box-shadow: 0 4px 16px rgba(27, 60, 83, 0.1);
        text-decoration: none;
      }

      .phoenix-nav-link:hover::before {
        width: 4px;
      }

      .phoenix-nav-link.active {
        background: var(--phoenix-gradient-main);
        color: var(--phoenix-white);
        font-weight: 600;
        transform: translateX(4px);
        box-shadow: 0 6px 20px rgba(27, 60, 83, 0.25);
      }

      .phoenix-nav-link.active::before {
        width: 4px;
        background: var(--phoenix-cream);
      }

      .phoenix-nav-icon {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
        transition: all 0.3s ease;
      }

      .phoenix-nav-link:hover .phoenix-nav-icon {
        transform: scale(1.1);
      }

      .phoenix-nav-link.active .phoenix-nav-icon {
        color: var(--phoenix-cream);
      }

      .phoenix-nav-text {
        flex: 1;
      }

      .phoenix-nav-badge {
        background: var(--phoenix-danger);
        color: var(--phoenix-white);
        font-size: 0.7rem;
        font-weight: 700;
        padding: 0.2rem 0.5rem;
        border-radius: 10px;
        min-width: 18px;
        text-align: center;
        animation: phoenixBounce 2s infinite;
      }

      @keyframes phoenixBounce {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
      }

      /* ═══ SPECIAL ACTIONS ═══ */
      .phoenix-actions {
        padding: 1rem;
        border-top: 1px solid rgba(210, 193, 182, 0.2);
        background: rgba(249, 243, 239, 0.5);
      }

      .phoenix-action-btn {
        width: 100%;
        padding: 0.875rem 1.25rem;
        background: var(--phoenix-gradient-soft);
        border: 1px solid rgba(210, 193, 182, 0.3);
        border-radius: var(--phoenix-radius-md);
        color: var(--phoenix-primary);
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        position: relative;
        overflow: hidden;
      }

      .phoenix-action-btn::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: radial-gradient(
          circle,
          rgba(27, 60, 83, 0.1) 0%,
          transparent 70%
        );
        transition: all 0.4s ease;
        border-radius: 50%;
        transform: translate(-50%, -50%);
      }

      .phoenix-action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(27, 60, 83, 0.2);
        color: var(--phoenix-primary);
      }

      .phoenix-action-btn:hover::before {
        width: 200px;
        height: 200px;
      }

      .phoenix-action-btn:active {
        transform: translateY(0);
      }

      /* ═══ MAIN CONTENT AREA ═══ */
      .phoenix-main-content {
        background: var(--phoenix-gradient-card);
        border-radius: var(--phoenix-radius-xl);
        box-shadow: var(--phoenix-shadow-medium);
        backdrop-filter: var(--phoenix-blur);
        border: 1px solid rgba(210, 193, 182, 0.3);
        padding: 2rem;
        min-height: 500px;
      }

      .phoenix-main-title {
        font-family: var(--phoenix-font-brand);
        color: var(--phoenix-primary);
        font-size: 2rem;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(27, 60, 83, 0.1);
      }

      .phoenix-main-subtitle {
        color: var(--phoenix-secondary);
        font-family: var(--phoenix-font-body);
        font-size: 1.1rem;
        margin-bottom: 2rem;
      }

      /* ═══ PROFILE FORM STYLES ═══ */
      .phoenix-profile-form {
        background: rgba(255, 255, 255, 0.8);
        border-radius: var(--phoenix-radius-lg);
        padding: 2rem;
        border: 1px solid rgba(210, 193, 182, 0.3);
        box-shadow: var(--phoenix-shadow-soft);
      }

      .phoenix-form-section {
        margin-bottom: 2rem;
      }

      .phoenix-form-section-title {
        font-family: var(--phoenix-font-heading);
        color: var(--phoenix-primary);
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(210, 193, 182, 0.3);
      }

      .phoenix-form-group {
        margin-bottom: 1.5rem;
      }

      .phoenix-form-label {
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        color: var(--phoenix-primary);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        display: block;
      }

      .phoenix-form-control {
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid rgba(210, 193, 182, 0.4);
        border-radius: var(--phoenix-radius-sm);
        color: var(--phoenix-dark);
        font-family: var(--phoenix-font-body);
        transition: all 0.3s ease;
        padding: 0.75rem 1rem;
        width: 100%;
      }

      .phoenix-form-control:focus {
        background: var(--phoenix-white);
        border-color: var(--phoenix-secondary);
        box-shadow: 0 0 0 0.2rem rgba(69, 104, 130, 0.2);
        outline: none;
      }

      .phoenix-form-control.is-valid {
        border-color: var(--phoenix-success);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2300b894' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
      }

      .phoenix-form-control.is-invalid {
        border-color: var(--phoenix-danger);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23d63031'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23d63031' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
      }

      .phoenix-btn-primary {
        background: var(--phoenix-gradient-main);
        border: none;
        color: var(--phoenix-white);
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        padding: 0.875rem 1.5rem;
        border-radius: var(--phoenix-radius-sm);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      }

      .phoenix-btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(27, 60, 83, 0.3);
        background: linear-gradient(
          135deg,
          var(--phoenix-secondary) 0%,
          var(--phoenix-beige) 100%
        );
        color: var(--phoenix-white);
      }

      .phoenix-btn-secondary {
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid rgba(210, 193, 182, 0.4);
        color: var(--phoenix-primary);
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        padding: 0.875rem 1.5rem;
        border-radius: var(--phoenix-radius-sm);
        transition: all 0.3s ease;
      }

      .phoenix-btn-secondary:hover {
        background: var(--phoenix-white);
        border-color: var(--phoenix-secondary);
        color: var(--phoenix-primary);
      }

      /* ═══ MODAL STYLING ═══ */
      .phoenix-modal .modal-content {
        background: var(--phoenix-gradient-card);
        border: 1px solid rgba(210, 193, 182, 0.3);
        border-radius: var(--phoenix-radius-xl);
        box-shadow: var(--phoenix-shadow-strong);
        backdrop-filter: var(--phoenix-blur);
      }

      .phoenix-modal .modal-header {
        background: var(--phoenix-gradient-main);
        color: var(--phoenix-white);
        border-radius: var(--phoenix-radius-xl) var(--phoenix-radius-xl) 0 0;
        border-bottom: none;
      }

      .phoenix-modal .modal-title {
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
      }

      .phoenix-modal .btn-close {
        filter: invert(1) grayscale(100%) brightness(200%);
      }

      .phoenix-modal .modal-body {
        padding: 2rem;
      }

      .phoenix-modal .modal-footer {
        background: rgba(249, 243, 239, 0.5);
        border-radius: 0 0 var(--phoenix-radius-xl) var(--phoenix-radius-xl);
        border-top: 1px solid rgba(210, 193, 182, 0.2);
      }

      /* ═══ PASSWORD STRENGTH ═══ */
      .phoenix-password-strength .progress {
        height: 6px;
        background: rgba(210, 193, 182, 0.3);
        border-radius: 3px;
      }

      .phoenix-password-feedback {
        font-family: var(--phoenix-font-heading);
        font-size: 0.8rem;
        margin-top: 0.25rem;
        font-weight: 500;
      }

      /* ═══ PASSWORD REQUIREMENTS ═══ */
      .phoenix-password-requirements {
        background: rgba(249, 243, 239, 0.3);
        border: 1px solid rgba(210, 193, 182, 0.3);
        border-radius: var(--phoenix-radius-sm);
        padding: 0.75rem;
        margin-top: 0.5rem;
      }

      .phoenix-password-requirements .requirement-item {
        font-size: 0.75rem;
        line-height: 1.4;
        margin-bottom: 0.25rem;
        transition: all 0.2s ease;
      }

      .phoenix-password-requirements .requirement-item:last-child {
        margin-bottom: 0;
      }

      .phoenix-password-requirements .requirement-item.met {
        color: var(--phoenix-success) !important;
      }

      .phoenix-password-requirements .requirement-item.met i {
        color: var(--phoenix-success) !important;
      }

      .phoenix-password-requirements .requirement-item.met i:before {
        content: "\f2bd"; /* ri-check-circle-line */
      }

      /* ═══ PROFILE IMAGE UPLOAD ═══ */
      .phoenix-image-upload {
        position: relative;
        display: inline-block;
        margin-bottom: 1.5rem;
      }

      .phoenix-image-preview {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid rgba(210, 193, 182, 0.4);
        box-shadow: var(--phoenix-shadow-soft);
        transition: all 0.3s ease;
      }

      .phoenix-image-initials-preview {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: var(--phoenix-cream);
        color: var(--phoenix-primary);
        border: 4px solid rgba(210, 193, 182, 0.4);
        box-shadow: var(--phoenix-shadow-soft);
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: var(--phoenix-font-heading);
        font-size: 2.5rem;
        font-weight: 700;
        transition: all 0.3s ease;
      }

      .phoenix-image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(27, 60, 83, 0.8);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .phoenix-image-overlay:hover {
        opacity: 1;
      }

      .phoenix-image-overlay i {
        color: var(--phoenix-white);
        font-size: 1.5rem;
      }

      .phoenix-file-input {
        position: absolute;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
      }

      /* ═══ RESPONSIVE DESIGN ═══ */
      @media (max-width: 991.98px) {
        .phoenix-sidebar {
          margin-bottom: 2rem;
          border-radius: var(--phoenix-radius-lg);
        }

        .phoenix-profile {
          padding: 1.5rem;
        }

        .phoenix-avatar-img {
          width: 80px;
          height: 80px;
        }

        .phoenix-nav-item {
          margin: 0.2rem 0.75rem;
        }

        .phoenix-nav-link {
          padding: 0.875rem 1rem;
          gap: 0.875rem;
        }

        .phoenix-main-content {
          padding: 1.5rem;
        }

        .phoenix-profile-form {
          padding: 1.5rem;
        }
      }

      @media (max-width: 575.98px) {
        .phoenix-container {
          padding: 1rem 0;
        }

        .phoenix-profile {
          padding: 1.25rem;
        }

        .phoenix-avatar-img {
          width: 70px;
          height: 70px;
        }

        .phoenix-profile-name {
          font-size: 1.2rem;
        }

        .phoenix-nav-link {
          padding: 0.75rem 1rem;
          font-size: 0.9rem;
        }

        .phoenix-main-content {
          padding: 1.5rem;
        }

        .phoenix-main-title {
          font-size: 1.6rem;
        }

        .phoenix-profile-form {
          padding: 1.25rem;
        }

        .phoenix-image-preview {
          width: 100px;
          height: 100px;
        }

        .phoenix-image-initials-preview {
          width: 100px;
          height: 100px;
          font-size: 2rem;
        }
      }

      /* ═══ LOADING SPINNER ═══ */
      .spinner-border-sm {
        width: 1rem;
        height: 1rem;
      }

      /* ═══ TOAST STYLING ═══ */
      .swal2-popup {
        border-radius: var(--phoenix-radius-md);
        font-family: var(--phoenix-font-body);
      }

      .swal2-title {
        font-family: var(--phoenix-font-heading);
        color: var(--phoenix-primary);
      }

      .swal2-confirm {
        background: var(--phoenix-gradient-main) !important;
        border-radius: var(--phoenix-radius-sm);
      }

      /* ═══ ERROR MESSAGES ═══ */
      .phoenix-error-message {
        color: var(--phoenix-danger);
        font-size: 0.8rem;
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        margin-top: 0.25rem;
      }

      .phoenix-success-message {
        color: var(--phoenix-success);
        font-size: 0.8rem;
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        margin-top: 0.25rem;
      }

      /* ═══ CHANGE EMAIL BUTTON STYLING ═══ */
      .phoenix-change-email-btn {
        background: var(--phoenix-gradient-main);
        border: none;
        color: var(--phoenix-white);
        padding: 0.5rem 1rem;
        border-radius: var(--phoenix-radius-sm);
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        font-size: 0.875rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(27, 60, 83, 0.1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        min-width: 120px;
        justify-content: center;
      }

      .phoenix-change-email-btn:hover {
        background: linear-gradient(135deg, var(--phoenix-secondary) 0%, var(--phoenix-primary) 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(27, 60, 83, 0.2);
        color: var(--phoenix-white);
      }

      .phoenix-change-email-btn:active {
        transform: translateY(0);
        box-shadow: 0 2px 4px rgba(27, 60, 83, 0.15);
      }

      .phoenix-change-email-btn:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(27, 60, 83, 0.2);
      }

      .phoenix-change-email-btn i {
        font-size: 1rem;
      }

      /* ═══ EMAIL CHANGE MODAL STYLING ═══ */
      .phoenix-email-modal .modal-dialog {
        max-width: 600px;
      }

      .phoenix-modal-content {
        border: none;
        border-radius: var(--phoenix-radius-lg);
        box-shadow: 0 20px 40px rgba(27, 60, 83, 0.15);
        overflow: hidden;
        animation: modalSlideIn 0.3s ease-out;
      }

      @keyframes modalSlideIn {
        from {
          opacity: 0;
          transform: translateY(-30px) scale(0.95);
        }
        to {
          opacity: 1;
          transform: translateY(0) scale(1);
        }
      }

      .phoenix-modal-header {
        background: var(--phoenix-gradient-main);
        color: var(--phoenix-white);
        border-bottom: none;
        padding: 1.5rem 2rem;
      }

      .phoenix-modal-title {
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        font-size: 1.25rem;
        margin: 0;
        display: flex;
        align-items: center;
      }

      .phoenix-modal-close {
        background: none;
        border: none;
        color: var(--phoenix-white);
        opacity: 0.8;
        font-size: 1.2rem;
        transition: all 0.2s ease;
      }

      .phoenix-modal-close:hover {
        opacity: 1;
        transform: scale(1.1);
      }

      .phoenix-modal-body {
        padding: 2rem;
        background: var(--phoenix-white);
      }

      /* Progress Bar Styling */
      .phoenix-progress-container {
        margin-bottom: 2rem;
      }

      .phoenix-progress-bar {
        width: 100%;
        height: 8px;
        background: var(--phoenix-light-gray);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 1rem;
      }

      .phoenix-progress-fill {
        height: 100%;
        background: var(--phoenix-gradient-main);
        border-radius: 4px;
        transition: width 0.4s ease;
        width: 0%;
      }

      .phoenix-progress-labels {
        display: flex;
        justify-content: space-between;
        margin-top: 0.5rem;
      }

      .phoenix-progress-label {
        font-size: 0.8rem;
        color: var(--phoenix-text-muted);
        font-family: var(--phoenix-font-body);
        font-weight: 500;
      }

      .phoenix-progress-label.active {
        color: var(--phoenix-primary);
        font-weight: 600;
      }

      /* Modal Form Styling */
      .phoenix-step {
        padding: 1.5rem 0;
      }

      .phoenix-step-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
      }

      .phoenix-step-icon {
        width: 40px;
        height: 40px;
        background: var(--phoenix-gradient-main);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        color: var(--phoenix-white);
        font-size: 1.2rem;
      }

      .phoenix-step-title {
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        color: var(--phoenix-text-dark);
        margin: 0;
        font-size: 1.1rem;
      }

      .phoenix-form-group {
        margin-bottom: 1.5rem;
      }

      .phoenix-form-label {
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        color: var(--phoenix-text-dark);
        margin-bottom: 0.5rem;
        display: block;
      }

      .phoenix-form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid var(--phoenix-light-gray);
        border-radius: var(--phoenix-radius-sm);
        font-family: var(--phoenix-font-body);
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: var(--phoenix-white);
      }

      .phoenix-form-control:focus {
        outline: none;
        border-color: var(--phoenix-primary);
        box-shadow: 0 0 0 3px rgba(27, 60, 83, 0.1);
      }

      .phoenix-form-control::placeholder {
        color: var(--phoenix-text-muted);
      }

      .phoenix-alert {
        padding: 1rem;
        border-radius: var(--phoenix-radius-sm);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .phoenix-alert-info {
        background: rgba(27, 60, 83, 0.1);
        color: var(--phoenix-primary);
        border: 1px solid rgba(27, 60, 83, 0.2);
      }

      .phoenix-button-group {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
      }

      .phoenix-btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: var(--phoenix-radius-sm);
        font-family: var(--phoenix-font-heading);
        font-weight: 500;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        min-width: 120px;
        justify-content: center;
      }

      .phoenix-btn-primary {
        background: var(--phoenix-gradient-main);
        color: var(--phoenix-white);
        box-shadow: 0 2px 4px rgba(27, 60, 83, 0.1);
      }

      .phoenix-btn-primary:hover {
        background: linear-gradient(135deg, var(--phoenix-secondary) 0%, var(--phoenix-primary) 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(27, 60, 83, 0.2);
      }

      .phoenix-btn-secondary {
        background: var(--phoenix-white);
        color: var(--phoenix-primary);
        border: 2px solid var(--phoenix-primary);
      }

      .phoenix-btn-secondary:hover {
        background: var(--phoenix-primary);
        color: var(--phoenix-white);
      }

      /* Success Step Styling */
      .phoenix-success-container {
        text-align: center;
        padding: 2rem 1rem;
      }

      .phoenix-success-icon {
        width: 80px;
        height: 80px;
        background: var(--phoenix-gradient-main);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.5rem;
        color: var(--phoenix-white);
        font-size: 2.5rem;
        animation: successPulse 0.6s ease-out;
      }

      @keyframes successPulse {
        0% {
          transform: scale(0.8);
          opacity: 0;
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }

      .phoenix-success-title {
        font-family: var(--phoenix-font-heading);
        font-weight: 600;
        color: var(--phoenix-primary);
        margin-bottom: 1rem;
        font-size: 1.5rem;
      }

      .phoenix-success-message {
        color: var(--phoenix-text-muted);
        margin-bottom: 1.5rem;
        font-size: 1rem;
      }

      .phoenix-success-details {
        background: var(--phoenix-light-gray);
        padding: 1rem;
        border-radius: var(--phoenix-radius-sm);
        margin-top: 1rem;
      }

      .phoenix-success-details p {
        margin: 0;
        color: var(--phoenix-text-dark);
      }
    </style>
  </head>

  <body>
    <div class="phoenix-container">
      <div class="container-fluid">
        <div class="row">
          <%- include("../partials/user/accountSidebar") %>

          <!-- MAIN CONTENT AREA - PROFILE FORM -->
          <div class="col-lg-10 col-md-8">
            <div class="phoenix-main-content">
              <h1 class="phoenix-main-title">My Profile</h1>
              <p class="phoenix-main-subtitle">
                Manage your personal information and account settings.
              </p>

              <div class="phoenix-profile-form">
                <!-- Profile Image Section -->
                <div class="phoenix-form-section">
                  <h3 class="phoenix-form-section-title">
                    <i class="ri-image-line me-2"></i>Profile Picture
                  </h3>
                  <div class="text-center">
                    <div class="phoenix-image-upload">
                      <% if (user.profileImage) { %>
                        <img
                          id="profileImagePreview"
                          src="<%= user.profileImage %>"
                          alt="Profile Preview"
                          class="phoenix-image-preview"
                          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                        />
                        <div class="phoenix-image-initials-preview" style="display: none;">
                          <%= user.fullName ? user.fullName.trim().split(' ').filter(n => n.length > 0).map(n => n.charAt(0)).slice(0, 2).join('').toUpperCase() : 'U' %>
                        </div>
                      <% } else { %>
                        <div class="phoenix-image-initials-preview" id="profileImagePreview">
                          <%= user.fullName ? user.fullName.trim().split(' ').filter(n => n.length > 0).map(n => n.charAt(0)).slice(0, 2).join('').toUpperCase() : 'U' %>
                        </div>
                      <% } %>
                      <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
                        <i class="ri-camera-line"></i>
                      </div>
                      <input
                        type="file"
                        id="profileImageInput"
                        class="phoenix-file-input"
                        accept="image/*"
                        style="display: none;"
                      />
                    </div>
                    <div class="mt-3">
                      <button
                        type="button"
                        class="btn phoenix-btn-secondary me-2"
                        onclick="document.getElementById('profileImageInput').click()"
                      >
                        <i class="ri-upload-2-line me-2"></i>Upload New Photo
                      </button>
                      <button
                        type="button"
                        class="btn phoenix-btn-secondary"
                        id="removeImageBtn"
                        style="display: none;"
                      >
                        <i class="ri-delete-bin-line me-2"></i>Remove Photo
                      </button>
                    </div>
                    <small class="text-muted d-block mt-2">
                      Recommended: Square image, at least 200x200 pixels
                    </small>
                  </div>
                </div>

                <!-- Personal Information Section -->
                <div class="phoenix-form-section">
                  <h3 class="phoenix-form-section-title">
                    <i class="ri-user-line me-2"></i>Personal Information
                  </h3>
                  <form id="profileForm">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="phoenix-form-group">
                          <label for="fullName" class="phoenix-form-label">Full Name</label>
                          <input
                            type="text"
                            class="form-control phoenix-form-control"
                            id="fullName"
                            name="fullName"
                            value="<%= user.fullName %>"
                          />
                          <div id="fullNameError" class="phoenix-error-message"></div>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="phoenix-form-group">
                          <label for="email" class="phoenix-form-label">Email Address</label>
                          <div class="input-group">
                            <input
                              type="email"
                              class="form-control phoenix-form-control"
                              id="email"
                              name="email"
                              value="<%= user.email %>"
                              readonly
                            />
                            <button type="button" class="phoenix-change-email-btn" id="changeEmailBtn">
                              <i class="ri-edit-line"></i> Change Email
                            </button>
                          </div>
                          <small class="text-muted">
                            Click "Change Email" to update your email address with current email verification.
                          </small>
                        </div>
                      </div>
                    </div>

                    <div class="row">
                      <div class="col-md-6">
                        <div class="phoenix-form-group">
                          <label for="phone" class="phoenix-form-label">Phone Number</label>
                          <input
                            type="tel"
                            class="form-control phoenix-form-control"
                            id="phone"
                            name="phone"
                            value="<%= user.phone || '' %>"
                            placeholder="Enter your phone number"
                          />
                          <div id="phoneError" class="phoenix-error-message"></div>
                        </div>
                      </div>

                    </div>



                    <div class="text-end">
                      <button
                        type="submit"
                        class="btn phoenix-btn-primary"
                        id="updateProfileBtn"
                      >
                        <i class="ri-save-line me-2"></i>Update Profile
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>



    <!-- Simplified Email Change Modal -->
    <div class="modal fade" id="emailChangeModal" tabindex="-1" aria-labelledby="emailChangeModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg phoenix-email-modal">
        <div class="modal-content phoenix-modal-content">
          <div class="modal-header phoenix-modal-header">
            <h5 class="modal-title phoenix-modal-title" id="emailChangeModalLabel">
              <i class="ri-mail-line me-2"></i>Change Email Address
            </h5>
            <button type="button" class="btn-close phoenix-modal-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body phoenix-modal-body">
            <!-- Progress Indicator -->
            <div class="phoenix-progress-container mb-4">
              <div class="phoenix-progress-bar">
                <div class="phoenix-progress-fill" id="emailChangeProgress"></div>
              </div>
              <div class="phoenix-progress-labels">
                <span class="phoenix-progress-label">New Email</span>
                <span class="phoenix-progress-label">Verify Current</span>
                <span class="phoenix-progress-label">Complete</span>
              </div>
            </div>

            <!-- Step 1: New Email Input -->
            <div id="step1" class="email-change-step phoenix-step">
              <div class="phoenix-step-header">
                <div class="phoenix-step-icon">
                  <i class="ri-mail-add-line"></i>
                </div>
                <h6 class="phoenix-step-title">Enter New Email Address</h6>
              </div>
              <div class="phoenix-form-group">
                <label for="newEmailInput" class="phoenix-form-label">New Email Address</label>
                <input type="email" class="phoenix-form-control" id="newEmailInput" placeholder="Enter your new email address">
                <div id="newEmailError" class="phoenix-error-message"></div>
              </div>
              <button type="button" class="phoenix-btn phoenix-btn-primary" id="proceedToOtpBtn">
                <i class="ri-arrow-right-line"></i> Proceed to Verification
              </button>
            </div>

            <!-- Step 2: Current Email OTP -->
            <div id="step2" class="email-change-step phoenix-step" style="display: none;">
              <div class="phoenix-step-header">
                <div class="phoenix-step-icon">
                  <i class="ri-shield-check-line"></i>
                </div>
                <h6 class="phoenix-step-title">Verify Current Email</h6>
              </div>
              <div class="phoenix-alert phoenix-alert-info">
                <i class="ri-information-line"></i>
                We've sent a verification code to your current email: <strong><%= user.email %></strong>
              </div>
              <div class="phoenix-form-group">
                <label for="currentEmailOtp" class="phoenix-form-label">Enter OTP from Current Email</label>
                <input type="text" class="phoenix-form-control" id="currentEmailOtp" placeholder="Enter 6-digit OTP" maxlength="6">
                <div id="currentEmailOtpError" class="phoenix-error-message"></div>
              </div>
              <div class="phoenix-button-group">
                <button type="button" class="phoenix-btn phoenix-btn-secondary" id="resendCurrentOtpBtn">
                  <i class="ri-refresh-line"></i> Resend OTP
                </button>
                <button type="button" class="phoenix-btn phoenix-btn-primary" id="verifyCurrentOtpBtn">
                  <i class="ri-check-line"></i> Complete Email Change
                </button>
              </div>
            </div>

            <!-- Step 3: Success -->
            <div id="step3" class="email-change-step phoenix-step" style="display: none;">
              <div class="phoenix-success-container">
                <div class="phoenix-success-icon">
                  <i class="ri-check-circle-line"></i>
                </div>
                <h5 class="phoenix-success-title">Email Changed Successfully!</h5>
                <p class="phoenix-success-message">Your email address has been updated successfully.</p>
                <div class="phoenix-success-details">
                  <p><strong>New Email:</strong> <span id="newEmailDisplay"></span></p>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q" crossorigin="anonymous"></script>

    <script>
      // ═══════════════════════════════════════════════════════════════════════════════════════════
      // PHOENIX PROFILE PAGE SCRIPT
      // ══════��════════════════════════════════════════════════════════════════════════════════════

      document.addEventListener("DOMContentLoaded", function () {
        // ═══ UTILITY FUNCTIONS ═══
        function setInvalid(input, errorElement, message) {
          input.classList.add("is-invalid");
          input.classList.remove("is-valid");
          if (errorElement) errorElement.textContent = message;
        }

        function setValid(input, errorElement) {
          input.classList.remove("is-invalid");
          input.classList.add("is-valid");
          if (errorElement) errorElement.textContent = "";
        }

        function clearValidation(input, errorElement) {
          input.classList.remove("is-invalid", "is-valid");
          if (errorElement) errorElement.textContent = "";
        }

        // ═══ PROFILE IMAGE UPLOAD ═══
        const profileImageInput = document.getElementById("profileImageInput");
        const profileImagePreview = document.getElementById("profileImagePreview");
        const removeImageBtn = document.getElementById("removeImageBtn");

        // Define the image change handler function
        function handleImageChange(event) {
          const file = event.target.files[0];
          if (file) {
            // Validate file type
            if (!file.type.startsWith("image/")) {
              Swal.fire({
                icon: "error",
                title: "Invalid File",
                text: "Please select a valid image file.",
              });
              return;
            }

            // Validate file size (5MB limit)
            if (file.size > 5 * 1024 * 1024) {
              Swal.fire({
                icon: "error",
                title: "File Too Large",
                text: "Please select an image smaller than 5MB.",
              });
              return;
            }

            const reader = new FileReader();
            reader.onload = function (e) {
              // Replace initials with image
              const imageUpload = document.querySelector('.phoenix-image-upload');
              imageUpload.innerHTML = `
                <img
                  id="profileImagePreview"
                  src="${e.target.result}"
                  alt="Profile Preview"
                  class="phoenix-image-preview"
                />
                <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
                  <i class="ri-camera-line"></i>
                </div>
                <input
                  type="file"
                  id="profileImageInput"
                  class="phoenix-file-input"
                  accept="image/*"
                  style="display: none;"
                />
              `;
              removeImageBtn.style.display = "inline-block";
              
              // Re-attach event listener to new input
              document.getElementById("profileImageInput").addEventListener("change", handleImageChange);
            };
            reader.readAsDataURL(file);

            // Upload image immediately
            uploadProfileImage(file);
          }
        }

        profileImageInput.addEventListener("change", handleImageChange);

        removeImageBtn.addEventListener("click", function () {
          // Replace image with initials
          const imageUpload = document.querySelector('.phoenix-image-upload');
          const userInitials = '<%= user.fullName ? user.fullName.trim().split(" ").filter(n => n.length > 0).map(n => n.charAt(0)).slice(0, 2).join("").toUpperCase() : "U" %>';
          imageUpload.innerHTML = `
            <div class="phoenix-image-initials-preview" id="profileImagePreview">
              ${userInitials}
            </div>
            <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
              <i class="ri-camera-line"></i>
            </div>
            <input
              type="file"
              id="profileImageInput"
              class="phoenix-file-input"
              accept="image/*"
              style="display: none;"
            />
          `;
          removeImageBtn.style.display = "none";
          
          // Re-attach event listener to new input
          document.getElementById("profileImageInput").addEventListener("change", handleImageChange);
          
          // Remove image from server
          removeProfileImage();
        });

        async function uploadProfileImage(file) {
          const formData = new FormData();
          formData.append("profileImage", file);

          // Show loading indicator
          Swal.fire({
            title: 'Uploading...',
            text: 'Please wait while we upload your profile image',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          try {
            const response = await fetch("/users/profile/image", {
              method: "POST",
              body: formData,
            });

            let result;
            try {
              result = await response.json();
            } catch (parseError) {
              console.error("Failed to parse JSON response:", parseError);
              throw new Error("Server returned an invalid response. Please try again.");
            }

            if (response.ok && result.success) {
              // Close loading and show success
              Swal.close();

              Swal.fire({
                icon: "success",
                title: "Success!",
                text: result.message || "Profile image updated successfully",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
              });

              // Update the image preview with the new URL if provided
              if (result.profileImage) {
                const imageUpload = document.querySelector('.phoenix-image-upload');
                imageUpload.innerHTML = `
                  <img
                    id="profileImagePreview"
                    src="${result.profileImage}"
                    alt="Profile Preview"
                    class="phoenix-image-preview"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                  />
                  <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
                    <i class="ri-camera-line"></i>
                  </div>
                  <input
                    type="file"
                    id="profileImageInput"
                    class="phoenix-file-input"
                    accept="image/*"
                    style="display: none;"
                  />
                `;
                removeImageBtn.style.display = "inline-block";

                // Re-attach event listener to new input
                document.getElementById("profileImageInput").addEventListener("change", handleImageChange);
              }
            } else {
              // Close loading and show error
              Swal.close();
              throw new Error(result.message || `Server error: ${response.status} ${response.statusText}`);
            }
          } catch (error) {
            console.error("Image upload error:", error);

            // Close loading if still open
            Swal.close();

            // Provide more specific error messages
            let errorMessage = "Failed to upload image";
            if (error.message.includes("Server error")) {
              errorMessage = "Server error occurred. Please try again.";
            } else if (error.message.includes("invalid response")) {
              errorMessage = "Server configuration error. Please contact support.";
            } else if (error.message) {
              errorMessage = error.message;
            }

            Swal.fire({
              icon: "error",
              title: "Upload Failed",
              text: errorMessage,
            });

            // Reset image preview on error
            const currentImageSrc = "<%= user.profileImage || '' %>";
            if (currentImageSrc) {
              const imageUpload = document.querySelector('.phoenix-image-upload');
              imageUpload.innerHTML = `
                <img
                  id="profileImagePreview"
                  src="${currentImageSrc}"
                  alt="Profile Preview"
                  class="phoenix-image-preview"
                  onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                />
                <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
                  <i class="ri-camera-line"></i>
                </div>
                <input
                  type="file"
                  id="profileImageInput"
                  class="phoenix-file-input"
                  accept="image/*"
                  style="display: none;"
                />
              `;
              // Re-attach event listener
              document.getElementById("profileImageInput").addEventListener("change", handleImageChange);
            } else {
              // Reset to initials if no current image
              const imageUpload = document.querySelector('.phoenix-image-upload');
              const userInitials = '<%= user.fullName ? user.fullName.trim().split(" ").filter(n => n.length > 0).map(n => n.charAt(0)).slice(0, 2).join("").toUpperCase() : "U" %>';
              imageUpload.innerHTML = `
                <div class="phoenix-image-initials-preview" id="profileImagePreview">
                  ${userInitials}
                </div>
                <div class="phoenix-image-overlay" onclick="document.getElementById('profileImageInput').click()">
                  <i class="ri-camera-line"></i>
                </div>
                <input
                  type="file"
                  id="profileImageInput"
                  class="phoenix-file-input"
                  accept="image/*"
                  style="display: none;"
                />
              `;
              // Re-attach event listener
              document.getElementById("profileImageInput").addEventListener("change", handleImageChange);
            }
            profileImageInput.value = "";
          }
        }

        async function removeProfileImage() {
          try {
            const response = await fetch("/users/profile/image", {
              method: "DELETE",
            });

            // Check if response is ok first
            if (!response.ok) {
              throw new Error(`Server error: ${response.status} ${response.statusText}`);
            }

            // Check content type to ensure we're getting JSON
            const contentType = response.headers.get("content-type");
            if (!contentType || !contentType.includes("application/json")) {
              const text = await response.text();
              console.error("Non-JSON response received:", text);
              throw new Error("Server returned an invalid response. Please try again.");
            }

            const result = await response.json();

            if (result.success) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Profile image removed successfully",
                toast: true,
                position: "top-end",
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
              });
            } else {
              throw new Error(result.message || "Failed to remove image");
            }
          } catch (error) {
            console.error("Image removal error:", error);

            // Provide more specific error messages
            let errorMessage = "Failed to remove image";
            if (error.message.includes("Server error")) {
              errorMessage = "Server error occurred. Please try again.";
            } else if (error.message.includes("invalid response")) {
              errorMessage = "Server configuration error. Please contact support.";
            } else if (error.message) {
              errorMessage = error.message;
            }

            Swal.fire({
              icon: "error",
              title: "Removal Failed",
              text: errorMessage,
            });
          }
        }

        // ═══ PROFILE FORM VALIDATION ═══
        const profileForm = document.getElementById("profileForm");
        const fullNameInput = document.getElementById("fullName");
        const phoneInput = document.getElementById("phone");


        // Enhanced validation functions
        function validateFullName(name) {
          if (!name || typeof name !== 'string' || !name.trim()) {
            return { isValid: false, message: "Full name is required" };
          }

          const trimmedName = name.trim();

          // Maximum length validation
          if (trimmedName.length > 50) {
            return { isValid: false, message: "Full name cannot exceed 50 characters" };
          }

          // Enhanced character validation - include periods for titles
          if (!/^[A-Za-z\s'.-]+$/.test(trimmedName)) {
            return { isValid: false, message: "Name can only contain letters, spaces, hyphens, apostrophes, and periods" };
          }

          // Check for consecutive spaces
          if (/\s{2,}/.test(trimmedName)) {
            return { isValid: false, message: "Full name cannot have consecutive spaces" };
          }

          // Check for leading/trailing special characters
          if (/^[\s'.-]+|[\s'.-]+$/.test(trimmedName)) {
            return { isValid: false, message: "Full name cannot start or end with special characters" };
          }

          const nameWords = trimmedName.split(/\s+/).filter(word => word.length > 0);
          if (nameWords.length < 2) {
            return { isValid: false, message: "Please provide both first and last name" };
          }

          // Enhanced word validation with specific rules for first and last name
          // First name must be at least 2 characters, last name can be 1 character (for initials)
          const firstName = nameWords[0];
          const lastName = nameWords[nameWords.length - 1];

          if (firstName.length < 2) {
            return { isValid: false, message: "First name must be at least 2 characters long" };
          }

          if (lastName.length < 1) {
            return { isValid: false, message: "Last name must be at least 1 character long" };
          }

          // Check all words for maximum length
          const hasValidLength = nameWords.every(word => word.length <= 20);
          if (!hasValidLength) {
            return { isValid: false, message: "Each name part cannot exceed 20 characters" };
          }

          // Middle names/initials (if any) can be 1-20 characters
          for (let i = 1; i < nameWords.length - 1; i++) {
            if (nameWords[i].length < 1 || nameWords[i].length > 20) {
              return { isValid: false, message: "Middle names must be between 1-20 characters" };
            }
          }

          // Check for repeated characters in a single word
          for (const word of nameWords) {
            if (/(.)\1{2,}/.test(word)) {
              return { isValid: false, message: "Names cannot contain more than 2 consecutive identical characters" };
            }
          }

          return { isValid: true, message: "Valid name" };
        }

        function validatePhone(phone) {
          if (!phone || !phone.trim()) {
            return { isValid: false, message: "Phone number is required" }; // Mandatory field
          }

          const cleanPhone = phone.replace(/[\s\-\(\)]/g, "");

          // Check for minimum length
          if (cleanPhone.length < 10) {
            return { isValid: false, message: "Phone number must be at least 10 digits" };
          }

          // Check for maximum length
          if (cleanPhone.length > 15) {
            return { isValid: false, message: "Phone number cannot exceed 15 digits" };
          }

          // Check for valid format (optional country code + digits)
          if (!/^[\+]?[1-9][\d]{9,14}$/.test(cleanPhone)) {
            return { isValid: false, message: "Please enter a valid phone number" };
          }

          // Check for repeated digits (like 1111111111)
          if (/^(.)\1{9,}$/.test(cleanPhone.replace(/^\+/, ""))) {
            return { isValid: false, message: "Phone number cannot have all identical digits" };
          }

          return { isValid: true, message: "" };
        }

        function validateEmail(email) {
          if (!email || !email.trim()) {
            return { isValid: false, message: "Email address is required" };
          }

          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(email)) {
            return { isValid: false, message: "Please enter a valid email address" };
          }

          if (email.length > 254) {
            return { isValid: false, message: "Email address is too long" };
          }

          return { isValid: true, message: "" };
        }

        // Email is now handled through modal with dual OTP verification

        // Real-time validation with enhanced feedback
        fullNameInput.addEventListener("input", function () {
          const fullNameError = document.getElementById("fullNameError");
          const name = this.value;

          if (!name || !name.trim()) {
            clearValidation(this, fullNameError);
          } else {
            const validation = validateFullName(name);
            if (!validation.isValid) {
              setInvalid(this, fullNameError, validation.message);
            } else {
              setValid(this, fullNameError);
            }
          }
        });

        // Also validate on blur to catch edge cases and require field
        fullNameInput.addEventListener("blur", function () {
          const fullNameError = document.getElementById("fullNameError");
          const name = this.value;

          if (!name || !name.trim()) {
            setInvalid(this, fullNameError, "Full name is required");
          } else {
            const validation = validateFullName(name);
            if (!validation.isValid) {
              setInvalid(this, fullNameError, validation.message);
            } else {
              setValid(this, fullNameError);
            }
          }
        });

        phoneInput.addEventListener("input", function () {
          const phoneError = document.getElementById("phoneError");
          const phone = this.value;

          const validation = validatePhone(phone);
          if (!validation.isValid) {
            setInvalid(this, phoneError, validation.message);
          } else {
            setValid(this, phoneError);
          }
        });

        phoneInput.addEventListener("blur", function () {
          const phoneError = document.getElementById("phoneError");
          const phone = this.value;

          const validation = validatePhone(phone);
          if (!validation.isValid) {
            setInvalid(this, phoneError, validation.message);
          }
        });

        // Dual OTP Email Change System
        const emailInput = document.getElementById("email");
        const changeEmailBtn = document.getElementById("changeEmailBtn");
        const emailChangeModal = new bootstrap.Modal(document.getElementById('emailChangeModal'));

        // Modal elements
        const newEmailInput = document.getElementById('newEmailInput');
        const currentEmailOtp = document.getElementById('currentEmailOtp');
        const newEmailDisplay = document.getElementById('newEmailDisplay');
        const emailChangeProgress = document.getElementById('emailChangeProgress');

        // Step elements
        const step1 = document.getElementById('step1');
        const step2 = document.getElementById('step2');
        const step3 = document.getElementById('step3');

        // Button elements
        const proceedToOtpBtn = document.getElementById('proceedToOtpBtn');
        const verifyCurrentOtpBtn = document.getElementById('verifyCurrentOtpBtn');
        const resendCurrentOtpBtn = document.getElementById('resendCurrentOtpBtn');

        // Simplified state management
        let currentStep = 1;
        let newEmailAddress = '';

        // Open email change modal
        changeEmailBtn.addEventListener('click', function() {
          resetEmailChangeModal();
          emailChangeModal.show();
        });

        function resetEmailChangeModal() {
          currentStep = 1;
          newEmailAddress = '';

          // Reset form
          newEmailInput.value = '';
          currentEmailOtp.value = '';

          // Reset steps
          step1.style.display = 'block';
          step2.style.display = 'none';
          step3.style.display = 'none';

          // Reset progress
          updateProgress(0);
          updateProgressLabels(1);

          // Clear errors
          clearValidation(newEmailInput, document.getElementById('newEmailError'));
          clearValidation(currentEmailOtp, document.getElementById('currentEmailOtpError'));
        }

        function updateProgress(percentage) {
          emailChangeProgress.style.width = percentage + '%';
        }

        function updateProgressLabels(activeStep) {
          const labels = document.querySelectorAll('.phoenix-progress-label');
          labels.forEach((label, index) => {
            if (index + 1 <= activeStep) {
              label.classList.add('active');
            } else {
              label.classList.remove('active');
            }
          });
        }

        function showStep(stepNumber) {
          // Hide all steps
          step1.style.display = 'none';
          step2.style.display = 'none';
          step3.style.display = 'none';

          // Show current step
          document.getElementById('step' + stepNumber).style.display = 'block';
          currentStep = stepNumber;

          // Update progress (simplified: 0%, 50%, 100%)
          const progressPercentage = stepNumber === 1 ? 0 : stepNumber === 2 ? 50 : 100;
          updateProgress(progressPercentage);
          updateProgressLabels(stepNumber);
        }

        // Step 1: Proceed to OTP verification
        proceedToOtpBtn.addEventListener('click', async function() {
          const newEmail = newEmailInput.value.trim();
          const emailValidation = validateEmail(newEmail);

          if (!emailValidation.isValid) {
            setInvalid(newEmailInput, document.getElementById('newEmailError'), emailValidation.message);
            return;
          }

          if (newEmail === '<%= user.email %>') {
            setInvalid(newEmailInput, document.getElementById('newEmailError'), 'New email must be different from current email');
            return;
          }

          try {
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Processing...';

            // Send OTP to current email
            const response = await fetch('/profile/send-current-email-otp', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ newEmail: newEmail })
            });

            const result = await response.json();

            if (result.success) {
              newEmailAddress = newEmail;
              showStep(2);
              updateProgress(25);
              showNotification('OTP sent to your current email address', 'success');
            } else {
              setInvalid(newEmailInput, document.getElementById('newEmailError'), result.message);
              showNotification(result.message, 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Failed to send OTP. Please try again.', 'error');
          } finally {
            this.disabled = false;
            this.innerHTML = '<i class="ri-arrow-right-line"></i> Proceed to Verification';
          }
        });

        // Step 2: Verify current email OTP and complete email change
        verifyCurrentOtpBtn.addEventListener('click', async function() {
          const otp = currentEmailOtp.value.trim();

          if (!otp || otp.length !== 6) {
            setInvalid(currentEmailOtp, document.getElementById('currentEmailOtpError'), 'Please enter a valid 6-digit OTP');
            return;
          }

          try {
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Completing Email Change...';

            const response = await fetch('/profile/verify-current-email-otp', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ otp: otp })
            });

            const result = await response.json();

            if (result.success) {
              // Email change completed successfully
              newEmailDisplay.textContent = result.newEmail || newEmailAddress;
              showStep(3);
              updateProgress(100);
              showNotification('Email changed successfully!', 'success');

              // Update the email field in the main form
              emailInput.value = result.newEmail || newEmailAddress;

              // Close modal after 3 seconds
              setTimeout(() => {
                emailChangeModal.hide();
                // Refresh page to update all email references
                window.location.reload();
              }, 3000);
            } else {
              setInvalid(currentEmailOtp, document.getElementById('currentEmailOtpError'), result.message);
              showNotification(result.message, 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Failed to verify OTP. Please try again.', 'error');
          } finally {
            this.disabled = false;
            this.innerHTML = '<i class="ri-check-line"></i> Complete Email Change';
          }
        });

        // Simplified email change - no Step 3 needed

        // Resend OTP functionality
        resendCurrentOtpBtn.addEventListener('click', async function() {
          try {
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Sending...';

            const response = await fetch('/profile/send-current-email-otp', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ newEmail: newEmailAddress })
            });

            const result = await response.json();

            if (result.success) {
              showNotification('OTP resent to your current email', 'success');
            } else {
              showNotification(result.message, 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Failed to resend OTP', 'error');
          } finally {
            this.disabled = false;
            this.innerHTML = '<i class="ri-refresh-line"></i> Resend OTP';
          }
        });

        resendNewOtpBtn.addEventListener('click', async function() {
          try {
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Sending...';

            await sendOtpToNewEmail();
            showNotification('OTP resent to your new email', 'success');
          } catch (error) {
            console.error('Error:', error);
            showNotification('Failed to resend OTP', 'error');
          } finally {
            this.disabled = false;
            this.innerHTML = '<i class="ri-refresh-line"></i> Resend OTP';
          }
        });

        // OTP input validation and formatting
        [currentEmailOtp, newEmailOtp].forEach(otpInput => {
          otpInput.addEventListener('input', function() {
            // Only allow numbers
            this.value = this.value.replace(/[^0-9]/g, '');

            // Limit to 6 digits
            if (this.value.length > 6) {
              this.value = this.value.slice(0, 6);
            }

            // Clear validation errors when user types
            const errorElement = document.getElementById(this.id + 'Error');
            if (this.value.length === 6) {
              clearValidation(this, errorElement);
            }
          });

          otpInput.addEventListener('keypress', function(e) {
            // Only allow numbers
            if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab', 'Enter'].includes(e.key)) {
              e.preventDefault();
            }
          });
        });

        // Email input validation
        newEmailInput.addEventListener('input', function() {
          const emailError = document.getElementById('newEmailError');
          const email = this.value.trim();

          if (email) {
            const validation = validateEmail(email);
            if (!validation.isValid) {
              setInvalid(this, emailError, validation.message);
            } else if (email === '<%= user.email %>') {
              setInvalid(this, emailError, 'New email must be different from current email');
            } else {
              setValid(this, emailError);
            }
          } else {
            clearValidation(this, emailError);
          }
        });

        // Profile form submission
        profileForm.addEventListener("submit", async function (event) {
          event.preventDefault();

          const formData = new FormData(this);
          const data = Object.fromEntries(formData.entries());

          // Validate all fields
          let isValid = true;

          // Enhanced full name validation
          const nameValidation = validateFullName(data.fullName);
          if (!nameValidation.isValid) {
            setInvalid(fullNameInput, document.getElementById("fullNameError"), nameValidation.message);
            isValid = false;
          }

          // Phone validation (now mandatory)
          const phoneValidation = validatePhone(data.phone);
          if (!phoneValidation.isValid) {
            setInvalid(phoneInput, document.getElementById("phoneError"), phoneValidation.message);
            isValid = false;
          }

          // Email is readonly and changed through modal, so no validation needed here

          if (!isValid) return;

          const submitButton = document.getElementById("updateProfileBtn");
          const originalText = submitButton.innerHTML;
          submitButton.disabled = true;
          submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';

          try {
            const response = await fetch("/users/profile", {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(data),
            });

            const result = await response.json();

            submitButton.disabled = false;
            submitButton.innerHTML = originalText;

            if (result.success) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Profile updated successfully",
                confirmButtonColor: "#1b3c53",
              });

              // Update sidebar profile name if changed
              if (data.fullName !== "<%= user.fullName %>") {
                document.querySelector(".phoenix-profile-name").textContent = data.fullName;
              }
            } else {
              throw new Error(result.message || "Failed to update profile");
            }
          } catch (error) {
            console.error("Profile update error:", error);
            submitButton.disabled = false;
            submitButton.innerHTML = originalText;

            Swal.fire({
              icon: "error",
              title: "Update Failed",
              text: error.message || "Failed to update profile",
            });
          }
        });

        // ═══ PASSWORD MODAL FUNCTIONALITY ═══

        // Password toggle functionality
        document
          .querySelectorAll(".phoenix-toggle-password")
          .forEach((button) => {
            button.addEventListener("click", function () {
              const input = this.parentElement.querySelector("input");
              const icon = this.querySelector("i");

              if (input.type === "password") {
                input.type = "text";
                icon.classList.replace("ri-eye-off-line", "ri-eye-line");
              } else {
                input.type = "password";
                icon.classList.replace("ri-eye-line", "ri-eye-off-line");
              }
            });
          });

        // Password functionality is handled in the account sidebar
        if (newPasswordInput) {
          newPasswordInput.addEventListener("input", function () {
            const password = this.value;
            const newPasswordError = document.getElementById("phoenixNewPasswordError");

            if (password.length > 0) {
              passwordStrength.classList.remove("d-none");
              if (passwordRequirements) {
                passwordRequirements.classList.remove("d-none");
              }

              // Enhanced strength calculation
              let strength = 0;
              let feedback = "";
              const validation = validatePassword(password);

              // Calculate strength based on requirements met
              const metRequirements = Object.values(validation.requirements).filter(req => req.met).length;
              strength = (metRequirements / Object.keys(validation.requirements).length) * 100;

              passwordStrengthBar.style.width = strength + "%";

              if (strength < 50) {
                passwordStrengthBar.className = "progress-bar bg-danger";
                feedback = "Weak password";
              } else if (strength < 75) {
                passwordStrengthBar.className = "progress-bar bg-warning";
                feedback = "Medium password";
              } else {
                passwordStrengthBar.className = "progress-bar bg-success";
                feedback = "Strong password";
              }

              passwordFeedback.textContent = feedback;

              // Update requirements display
              if (passwordRequirements) {
                Object.entries(validation.requirements).forEach(([key, requirement]) => {
                  const requirementElement = passwordRequirements.querySelector(`[data-requirement="${key}"]`);
                  if (requirementElement) {
                    const icon = requirementElement.querySelector('i');
                    if (requirement.met) {
                      requirementElement.classList.add('met');
                      icon.className = 'ri-check-circle-line text-success me-1';
                    } else {
                      requirementElement.classList.remove('met');
                      icon.className = 'ri-close-circle-line text-danger me-1';
                    }
                  }
                });
              }

              // Show inline validation only for serious errors
              if (!validation.isValid && password.length >= 3) {
                // Only show error after user has typed a few characters
                setInvalid(this, newPasswordError, validation.message);
              } else if (validation.isValid) {
                setValid(this, newPasswordError);
              } else {
                clearValidation(this, newPasswordError);
              }
            } else {
              passwordStrength.classList.add("d-none");
              if (passwordRequirements) {
                passwordRequirements.classList.add("d-none");
              }
              clearValidation(this, newPasswordError);
            }
          });

          newPasswordInput.addEventListener("blur", function () {
            const password = this.value;
            const newPasswordError = document.getElementById("phoenixNewPasswordError");

            if (password) {
              const validation = validatePassword(password);
              if (!validation.isValid) {
                setInvalid(this, newPasswordError, validation.message);
              }
            }
          });
        }

        // Confirm password validation
        if (confirmPasswordInput) {
          confirmPasswordInput.addEventListener("input", function () {
            const confirmPasswordError = document.getElementById("phoenixConfirmPasswordError");
            const confirmPassword = this.value;
            const newPassword = newPasswordInput ? newPasswordInput.value : '';

            if (!confirmPassword.trim()) {
              clearValidation(this, confirmPasswordError);
            } else if (confirmPassword !== newPassword) {
              setInvalid(this, confirmPasswordError, "Passwords do not match");
            } else {
              setValid(this, confirmPasswordError);
            }
          });

          confirmPasswordInput.addEventListener("blur", function () {
            const confirmPasswordError = document.getElementById("phoenixConfirmPasswordError");
            const confirmPassword = this.value;
            const newPassword = newPasswordInput ? newPasswordInput.value : '';

            if (!confirmPassword.trim()) {
              setInvalid(this, confirmPasswordError, "Please confirm your new password");
            } else if (confirmPassword !== newPassword) {
              setInvalid(this, confirmPasswordError, "Passwords do not match");
            }
          });
        }

        // Enhanced password validation function
        function validatePassword(password) {
          const requirements = {
            minLength: { met: false, description: 'At least 8 characters long' },
            hasLowercase: { met: false, description: 'Contains lowercase letter (a-z)' },
            hasUppercase: { met: false, description: 'Contains uppercase letter (A-Z)' },
            hasNumber: { met: false, description: 'Contains at least one number (0-9)' },
            hasSpecialChar: { met: false, description: 'Contains special character (!@#$%^&*(),.?":{}|<>)' },
            noCommonPatterns: { met: true, description: 'Does not contain common patterns' }
          };

          if (!password) {
            return {
              isValid: false,
              message: 'Password is required',
              requirements: requirements
            };
          }

          // Check minimum length
          requirements.minLength.met = password.length >= 8;

          // Check for lowercase
          requirements.hasLowercase.met = /[a-z]/.test(password);

          // Check for uppercase
          requirements.hasUppercase.met = /[A-Z]/.test(password);

          // Check for numbers
          requirements.hasNumber.met = /[0-9]/.test(password);

          // Check for special characters
          requirements.hasSpecialChar.met = /[!@#$%^&*(),.?":{}|<>]/.test(password);

          // Check for common patterns
          const commonPatterns = [
            /123456/,
            /password/i,
            /qwerty/i,
            /(.)\1{2,}/, // Three or more consecutive identical characters
            /012345/,
            /abcdef/i
          ];

          requirements.noCommonPatterns.met = !commonPatterns.some(pattern => pattern.test(password));

          const allRequirementsMet = Object.values(requirements).every(req => req.met);

          if (!allRequirementsMet) {
            const unmetRequirements = Object.entries(requirements)
              .filter(([key, req]) => !req.met)
              .map(([key, req]) => req.description);

            return {
              isValid: false,
              message: `Password requirements not met: ${unmetRequirements.join(', ')}`,
              requirements: requirements
            };
          }

          return {
            isValid: true,
            message: 'Password meets all requirements',
            requirements: requirements
          };
        }

        // Password form submission
        const passwordForm = document.getElementById("phoenixPasswordForm");
        if (passwordForm) {
          passwordForm.addEventListener("submit", async function (event) {
            event.preventDefault();

            const currentPassword = document
              .getElementById("phoenixCurrentPassword")
              .value.trim();
            const newPassword = document
              .getElementById("phoenixNewPassword")
              .value.trim();
            const confirmPassword = document
              .getElementById("phoenixConfirmPassword")
              .value.trim();

            const currentPasswordError = document.getElementById(
              "phoenixCurrentPasswordError"
            );
            const newPasswordError = document.getElementById(
              "phoenixNewPasswordError"
            );
            const confirmPasswordError = document.getElementById(
              "phoenixConfirmPasswordError"
            );

            let isValid = true;

            // Enhanced validation with specific error messages

            // Validate current password
            if (!currentPassword) {
              setInvalid(
                document.getElementById("phoenixCurrentPassword"),
                currentPasswordError,
                "Current password is required"
              );
              isValid = false;
            }

            // Validate new password with enhanced validation
            if (!newPassword) {
              setInvalid(
                document.getElementById("phoenixNewPassword"),
                newPasswordError,
                "New password is required"
              );
              isValid = false;
            } else {
              const passwordValidation = validatePassword(newPassword);
              if (!passwordValidation.isValid) {
                setInvalid(
                  document.getElementById("phoenixNewPassword"),
                  newPasswordError,
                  passwordValidation.message
                );
                isValid = false;
              }
            }

            // Validate confirm password
            if (!confirmPassword) {
              setInvalid(
                document.getElementById("phoenixConfirmPassword"),
                confirmPasswordError,
                "Please confirm your new password"
              );
              isValid = false;
            } else if (confirmPassword !== newPassword) {
              setInvalid(
                document.getElementById("phoenixConfirmPassword"),
                confirmPasswordError,
                "Passwords do not match"
              );
              isValid = false;
            }

            // Additional check: ensure new password is different from current
            if (currentPassword && newPassword && currentPassword === newPassword) {
              setInvalid(
                document.getElementById("phoenixNewPassword"),
                newPasswordError,
                "New password must be different from current password"
              );
              isValid = false;
            }

            if (!isValid) return;

            const submitButton = document.getElementById("phoenixPasswordBtn");
            const originalText = submitButton.innerHTML;
            submitButton.disabled = true;
            submitButton.innerHTML =
              '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';

            try {
              const response = await fetch("/password/change", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  currentPassword,
                  newPassword,
                  confirmPassword,
                }),
              });

              const result = await response.json();

              submitButton.disabled = false;
              submitButton.innerHTML = originalText;

              if (result.success) {
                // Close modal and reset form
                const modal = bootstrap.Modal.getInstance(
                  document.getElementById("phoenixPasswordModal")
                );
                modal.hide();
                passwordForm.reset();
                passwordStrength.classList.add("d-none");

                // Clear all validations
                [
                  document.getElementById("phoenixCurrentPassword"),
                  document.getElementById("phoenixNewPassword"),
                  document.getElementById("phoenixConfirmPassword"),
                ].forEach((input) => {
                  clearValidation(input, null);
                });

                // Show success toast
                Swal.fire({
                  icon: "success",
                  title: "Success!",
                  text: "Password updated successfully",
                  toast: true,
                  position: "top-end",
                  showConfirmButton: false,
                  timer: 3000,
                  timerProgressBar: true,
                });
              } else {
                // Handle specific errors
                if (result.field === "currentPassword") {
                  setInvalid(
                    document.getElementById("phoenixCurrentPassword"),
                    currentPasswordError,
                    result.message || "Current password is incorrect"
                  );
                } else {
                  Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: result.message || "Failed to update password",
                  });
                }
              }
            } catch (error) {
              console.error("Password change error:", error);
              submitButton.disabled = false;
              submitButton.innerHTML = originalText;

              Swal.fire({
                icon: "error",
                title: "Error",
                text: "Server error. Please try again.",
              });
            }
          });
        }
      });
    </script>

<%- include("../partials/user/footer") %>