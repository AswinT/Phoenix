<%- include("../partials/user/header") %>

<!-- Checkout Styles -->
<link rel="stylesheet" href="/styles/user/checkout.css" />

<!-- Checkout Page -->
<section class="checkout-page-section">
  <div class="container">
    <!-- Breadcrumb -->
    <nav class="checkout-breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
        <li class="breadcrumb-item active">Checkout</li>
      </ol>
    </nav>

    <!-- Checkout Header -->
    <div class="checkout-header">
      <div class="checkout-header-content">
        <div class="checkout-icon">
          <i class="ri-secure-payment-line"></i>
        </div>
        <h1 class="checkout-title">Secure Checkout</h1>
        <p class="checkout-subtitle">Complete your order with confidence</p>
      </div>
    </div>

    <!-- Checkout Progress -->
    <div class="checkout-progress-container">
      <div class="checkout-progress floating-card">
        <div class="progress-steps">
          <div class="progress-step active" data-step="1">
            <div class="step-icon">
              <i class="ri-shopping-cart-line"></i>
            </div>
            <div class="step-info">
              <span class="step-number">1</span>
              <span class="step-label">Review Cart</span>
            </div>
          </div>
          <div class="progress-line"></div>
          <div class="progress-step" data-step="2">
            <div class="step-icon">
              <i class="ri-map-pin-line"></i>
            </div>
            <div class="step-info">
              <span class="step-number">2</span>
              <span class="step-label">Address</span>
            </div>
          </div>
          <div class="progress-line"></div>
          <div class="progress-step" data-step="3">
            <div class="step-icon">
              <i class="ri-bank-card-line"></i>
            </div>
            <div class="step-info">
              <span class="step-number">3</span>
              <span class="step-label">Payment</span>
            </div>
          </div>
          <div class="progress-line"></div>
          <div class="progress-step" data-step="4">
            <div class="step-icon">
              <i class="ri-check-line"></i>
            </div>
            <div class="step-info">
              <span class="step-number">4</span>
              <span class="step-label">Confirm</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row g-4">
      <!-- Main Checkout Content -->
      <div class="col-lg-8">
        <!-- Step 1: Cart Review -->
        <div class="checkout-step-content floating-card active" id="step-1-content">
          <div class="step-header">
            <h3 class="step-title">
              <i class="ri-shopping-cart-line"></i>
              Review Your Cart
            </h3>
            <p class="step-subtitle">Verify your items before proceeding</p>
          </div>
          
          <div class="step-body">
            <!-- Simple Stock Conflicts Warning -->
            <% if (hasStockConflicts) { %>
            <div class="stock-alert">
              <div class="alert-content">
                <i class="ri-error-warning-line"></i>
                <span>Some items exceed available stock</span>
                <button class="fix-all-btn" id="fixAllStockIssues" type="button">Fix All</button>
              </div>
            </div>
            <!-- Debug info -->
            <div style="background: #f0f0f0; padding: 10px; margin: 10px 0; font-size: 12px; border-radius: 4px;">
              <strong>Debug Info:</strong><br>
              Stock Conflicts: <%= stockConflicts.length %><br>
              <% stockConflicts.forEach((conflict, index) => { %>
                <%= index + 1 %>. <%= conflict.model %>: <%= conflict.requestedQuantity %> → <%= conflict.availableStock %><br>
              <% }) %>
              <button onclick="testFixAllAPI()" style="margin-top: 5px; padding: 5px 10px; background: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer;">Test API Directly</button>
            </div>
            <% } %>

            <div class="cart-items-review">
              <% if (cartItems && cartItems.length > 0) { %>
                <% cartItems.forEach(item => { %>
                <%
                  // Check if this item has a stock conflict
                  const hasConflict = stockConflicts.find(conflict =>
                    conflict.productId.toString() === item.product._id.toString()
                  );
                %>
                <div class="cart-review-item <%= hasConflict ? 'has-stock-conflict' : '' %>"
                     data-product-id="<%= item.product ? item.product._id : '' %>">
                  <div class="item-image">
                    <img
                      src="<%= item.product && item.product.mainImage ? item.product.mainImage : '/api/placeholder/80/80' %>"
                      alt="<%= item.product && item.product.model ? item.product.model : 'Product Image' %>"
                      onerror="this.src='/api/placeholder/80/80'"
                    />
                  </div>
                  <div class="item-details">
                    <h4 class="item-name">
                      <%= item.product && item.product.model ? item.product.model : 'Unknown Product' %>
                    </h4>
                    <div class="item-meta">
                      <span class="item-brand">
                        <i class="ri-headphone-line"></i>
                        <%= item.product && item.product.brand ? item.product.brand : 'Unknown Brand' %>
                      </span>
                      <% if (hasConflict) { %>
                      <div class="stock-conflict-info">
                        <span class="quantity-conflict">Qty: <%= item.quantity %> → Max: <%= item.product.stock %></span>
                        <div class="quantity-controls">
                          <button class="qty-btn minus" data-product-id="<%= item.product._id %>">−</button>
                          <input type="number"
                                 class="qty-input"
                                 value="<%= item.quantity %>"
                                 min="0"
                                 max="<%= Math.min(5, item.product.stock) %>"
                                 data-product-id="<%= item.product._id %>"
                                 data-available-stock="<%= item.product.stock %>">
                          <button class="qty-btn plus" data-product-id="<%= item.product._id %>">+</button>
                        </div>
                      </div>
                      <% } else { %>
                      <span class="item-quantity">Qty: <%= item.quantity || 1 %></span>
                      <% } %>
                    </div>
                    <% if (item.offerDiscount && item.offerDiscount > 0) { %>
                      <div class="offer-info">
                        <i class="ri-price-tag-3-line"></i>
                        Offer Applied: <%= item.discountPercentage %>% OFF
                      </div>
                    <% } %>
                  </div>
                  <div class="item-pricing">
                    <% if (item.offerDiscount && item.offerDiscount > 0) { %>
                      <div class="price-original">₹<%= item.originalPrice.toFixed(2) %></div>
                      <div class="price-current">₹<%= (item.discountedPrice * item.quantity).toFixed(2) %></div>
                    <% } else { %>
                      <div class="price-current">₹<%= (item.priceAtAddition * item.quantity).toFixed(2) %></div>
                    <% } %>
                  </div>
                  <div class="item-actions">
                    <button class="btn-remove-item" data-product-id="<%= item.product ? item.product._id : '' %>">
                      <i class="ri-delete-bin-line"></i>
                    </button>
                  </div>
                </div>
                <% }) %>
              <% } else { %>
                <div class="empty-cart-message">
                  <div class="empty-icon">
                    <i class="ri-shopping-cart-line"></i>
                  </div>
                  <h4>Your cart is empty</h4>
                  <p>Add some items to proceed with checkout</p>
                  <a href="/shopPage" class="btn-continue-shopping">
                    <i class="ri-arrow-left-line"></i>
                    Continue Shopping
                  </a>
                </div>
              <% } %>
            </div>

            <!-- Coupon Section -->
            <% if (cartItems && cartItems.length > 0) { %>
            <div class="coupon-section">
              <div class="coupon-header">
                <h4>
                  <i class="ri-coupon-line"></i>
                  Apply Coupon
                </h4>
              </div>
              
              <div id="couponInputSection" class="<%= appliedCoupon ? 'd-none' : '' %>">
                <div class="coupon-input-group">
                  <input
                    type="text"
                    class="coupon-input"
                    placeholder="Enter coupon code"
                    id="couponCode"
                  />
                  <button class="btn-apply-coupon" id="applyCoupon">
                    Apply
                  </button>
                </div>
                <button class="btn-view-coupons" data-bs-toggle="modal" data-bs-target="#availableCouponsModal">
                  <i class="ri-eye-line"></i>
                  View Available Coupons
                </button>
              </div>

              <div id="appliedCouponSection" class="applied-coupon <%= !appliedCoupon ? 'd-none' : '' %>">
                <div class="coupon-success">
                  <div class="coupon-info">
                    <i class="ri-coupon-fill"></i>
                    <div>
                      <span class="coupon-code" id="appliedCouponCode">
                        <%= appliedCoupon ? appliedCoupon.code : '' %>
                      </span>
                      <span class="coupon-desc">
                        <%= appliedCoupon ? (appliedCoupon.discountType === 'percentage' ? `${appliedCoupon.discountValue}% off` : `₹${appliedCoupon.discountValue} off`) : '' %>
                      </span>
                    </div>
                  </div>
                  <button class="btn-remove-coupon" id="removeCoupon">
                    <i class="ri-close-line"></i>
                  </button>
                </div>
              </div>
            </div>
            <% } %>
          </div>

          <div class="step-footer">
            <a href="/cart" class="btn-secondary">
              <i class="ri-arrow-left-line"></i>
              Back to Cart
            </a>
            <% if (cartItems && cartItems.length > 0) { %>
            <button class="btn-primary next-step <%= hasStockConflicts ? 'disabled' : '' %>"
                    data-next="2"
                    <%= hasStockConflicts ? 'disabled' : '' %>>
              <% if (hasStockConflicts) { %>
                <i class="ri-error-warning-line"></i>
                Resolve Stock Issues First
              <% } else { %>
                Continue to Address
                <i class="ri-arrow-right-line"></i>
              <% } %>
            </button>
            <% } %>
          </div>
        </div>

        <!-- Step 2: Address Selection -->
        <div class="checkout-step-content floating-card" id="step-2-content">
          <div class="step-header">
            <h3 class="step-title">
              <i class="ri-map-pin-line"></i>
              Delivery Address
            </h3>
            <p class="step-subtitle">Choose where to deliver your order</p>
          </div>
          
          <div class="step-body">
            <div class="addresses-grid" id="addressSelectionContainer">
              <% if (addresses && addresses.length > 0) { %>
                <% addresses.forEach((address, index) => { %>
                <div class="address-option" data-address-id="<%= address._id %>">
                  <div class="address-card <%= index === 0 ? 'selected' : '' %>">
                    <div class="address-radio">
                      <input
                        type="radio"
                        name="selectedAddress"
                        id="address<%= address._id %>"
                        value="<%= address._id %>"
                        <%= index === 0 ? 'checked' : '' %>
                      />
                      <label for="address<%= address._id %>"></label>
                    </div>
                    <% if (address.isDefault) { %>
                      <span class="default-badge">Default</span>
                    <% } %>
                    <div class="address-content">
                      <h5 class="address-name"><%= address.fullName %></h5>
                      <div class="address-details">
                        <p><%= address.street %></p>
                        <p><%= address.district %>, <%= address.state %> - <%= address.pincode %></p>
                        <% if (address.landmark) { %>
                          <p>Landmark: <%= address.landmark %></p>
                        <% } %>
                        <div class="address-phone">
                          <i class="ri-phone-line"></i>
                          <%= address.phone %>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <% }) %>
              <% } %>
              
              <!-- Add New Address -->
              <div class="address-option add-new">
                <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                  <div class="add-address-icon">
                    <i class="ri-add-line"></i>
                  </div>
                  <div class="add-address-text">
                    <h5>Add New Address</h5>
                    <p>Add a new delivery address</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="step-footer">
            <button class="btn-secondary prev-step" data-prev="1">
              <i class="ri-arrow-left-line"></i>
              Back to Cart
            </button>
            <button class="btn-primary next-step" data-next="3" id="continueToPaymentBtn">
              Continue to Payment
              <i class="ri-arrow-right-line"></i>
            </button>
          </div>
        </div>

        <!-- Step 3: Payment Method -->
        <div class="checkout-step-content floating-card" id="step-3-content">
          <div class="step-header">
            <h3 class="step-title">
              <i class="ri-bank-card-line"></i>
              Payment Method
            </h3>
            <p class="step-subtitle">Choose your preferred payment option</p>
          </div>
          
          <div class="step-body">
            <div class="payment-methods">
              <!-- Online Payment -->
              <div class="payment-option">
                <div class="payment-card" data-payment="razorpay">
                  <div class="payment-radio">
                    <input type="radio" name="paymentMethod" id="razorpay" value="razorpay" checked />
                    <label for="razorpay"></label>
                  </div>
                  <div class="payment-icon">
                    <i class="ri-bank-card-line"></i>
                  </div>
                  <div class="payment-info">
                    <h5>Pay Online</h5>
                    <p>Secure payment via Razorpay</p>
                    <div class="payment-badges">
                      <span class="payment-badge">Cards</span>
                      <span class="payment-badge">UPI</span>
                      <span class="payment-badge">Netbanking</span>
                    </div>
                  </div>
                </div>
                <div class="payment-details">
                  <div class="security-info">
                    <i class="ri-shield-check-line"></i>
                    <span>256-bit SSL secured</span>
                  </div>
                </div>
              </div>

              <!-- Cash on Delivery -->
              <div class="payment-option <%= !isCodEligible ? 'disabled' : '' %>">
                <div class="payment-card" data-payment="cod">
                  <div class="payment-radio">
                    <input type="radio" name="paymentMethod" id="cod" value="cod" <%= !isCodEligible ? 'disabled' : '' %> />
                    <label for="cod"></label>
                  </div>
                  <div class="payment-icon">
                    <i class="ri-hand-coin-line"></i>
                  </div>
                  <div class="payment-info">
                    <h5>Cash on Delivery</h5>
                    <% if (isCodEligible) { %>
                      <p>Pay when your order arrives</p>
                    <% } else { %>
                      <p class="text-danger">Not available for orders above ₹1,000</p>
                    <% } %>
                  </div>
                </div>
                <% if (!isCodEligible) { %>
                  <div class="payment-details">
                    <div class="warning-info">
                      <i class="ri-information-line"></i>
                      <span>Your order total is ₹<%= totalAmount ? totalAmount.toFixed(2) : '0.00' %></span>
                    </div>
                  </div>
                <% } %>
              </div>

              <!-- Wallet -->
              <div class="payment-option <%= !isWalletEligible ? 'disabled' : '' %>">
                <div class="payment-card" data-payment="wallet">
                  <div class="payment-radio">
                    <input type="radio" name="paymentMethod" id="wallet" value="wallet" <%= !isWalletEligible ? 'disabled' : '' %> />
                    <label for="wallet"></label>
                  </div>
                  <div class="payment-icon">
                    <i class="ri-wallet-line"></i>
                  </div>
                  <div class="payment-info">
                    <h5>Wallet Balance</h5>
                    <% if (isWalletEligible) { %>
                      <p>Available: ₹<%= walletBalance ? walletBalance.toFixed(2) : '0.00' %></p>
                    <% } else { %>
                      <p class="text-danger">Insufficient balance</p>
                    <% } %>
                  </div>
                </div>
                <div class="payment-details">
                  <% if (isWalletEligible) { %>
                    <div class="success-info">
                      <i class="ri-check-line"></i>
                      <span>Remaining: ₹<%= (walletBalance - totalAmount).toFixed(2) %></span>
                    </div>
                  <% } else { %>
                    <div class="warning-info">
                      <i class="ri-information-line"></i>
                      <span>Need ₹<%= totalAmount ? (totalAmount - walletBalance).toFixed(2) : '0.00' %> more</span>
                    </div>
                  <% } %>
                </div>
              </div>
            </div>
          </div>

          <div class="step-footer">
            <button class="btn-secondary prev-step" data-prev="2">
              <i class="ri-arrow-left-line"></i>
              Back to Address
            </button>
            <button class="btn-primary next-step" data-next="4">
              Review Order
              <i class="ri-arrow-right-line"></i>
            </button>
          </div>
        </div>

        <!-- Step 4: Order Confirmation -->
        <div class="checkout-step-content floating-card" id="step-4-content">
          <div class="step-header">
            <h3 class="step-title">
              <i class="ri-check-line"></i>
              Review & Confirm
            </h3>
            <p class="step-subtitle">Final review before placing your order</p>
          </div>
          
          <div class="step-body">
            <!-- Order Summary Sections -->
            <div class="order-review-sections">
              <!-- Address Summary -->
              <div class="review-section">
                <div class="review-header">
                  <h4>
                    <i class="ri-map-pin-line"></i>
                    Delivery Address
                  </h4>
                  <button class="btn-change" data-step="2">Change</button>
                </div>
                <div class="review-content" id="selectedAddressSummary">
                  <!-- Populated by JavaScript -->
                </div>
              </div>

              <!-- Payment Summary -->
              <div class="review-section">
                <div class="review-header">
                  <h4>
                    <i class="ri-bank-card-line"></i>
                    Payment Method
                  </h4>
                  <button class="btn-change" data-step="3">Change</button>
                </div>
                <div class="review-content" id="paymentMethodSummary">
                  <!-- Populated by JavaScript -->
                </div>
              </div>

              <!-- Items Summary -->
              <div class="review-section">
                <div class="review-header">
                  <h4>
                    <i class="ri-shopping-cart-line"></i>
                    Order Items (<%= cartItems ? cartItems.length : 0 %>)
                  </h4>
                  <button class="btn-change" data-step="1">Change</button>
                </div>
                <div class="review-content">
                  <div class="items-summary">
                    <% if (cartItems && cartItems.length > 0) { %>
                      <% cartItems.forEach(item => { %>
                      <div class="summary-item">
                        <div class="summary-item-image">
                          <img
                            src="<%= item.product && item.product.mainImage ? item.product.mainImage : '/api/placeholder/60/60' %>"
                            alt="<%= item.product && item.product.model ? item.product.model : 'Product Image' %>"
                          />
                        </div>
                        <div class="summary-item-details">
                          <h6><%= item.product && item.product.model ? item.product.model : 'Unknown Product' %></h6>
                          <p>Qty: <%= item.quantity || 1 %> × ₹<%= item.discountedPrice ? item.discountedPrice.toFixed(2) : '0.00' %></p>
                        </div>
                        <div class="summary-item-price">
                          ₹<%= ((item.discountedPrice || 0) * (item.quantity || 1)).toFixed(2) %>
                        </div>
                      </div>
                      <% }) %>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="step-footer">
            <button class="btn-secondary prev-step" data-prev="3">
              <i class="ri-arrow-left-line"></i>
              Back to Payment
            </button>
            <button class="btn-place-order" id="placeOrderBtn">
              <i class="ri-secure-payment-line"></i>
              Place Order
            </button>
          </div>
        </div>
      </div>

      <!-- Order Summary Sidebar -->
      <div class="col-lg-4">
        <div class="order-summary-sidebar floating-card" id="orderSummary">
          <div class="summary-header">
            <h3>
              <i class="ri-file-list-3-line"></i>
              Order Summary
            </h3>
          </div>
          
          <div class="summary-content">
            <div class="summary-row">
              <span class="summary-label">Subtotal (<%= cartItems ? cartItems.length : 0 %> items)</span>
              <span class="summary-value">₹<%= originalSubtotal ? originalSubtotal.toFixed(2) : '0.00' %></span>
            </div>

            <% if (offerDiscount && offerDiscount > 0) { %>
            <div class="summary-row discount">
              <span class="summary-label">
                <i class="ri-price-tag-3-line"></i>
                Offer Discount
              </span>
              <span class="summary-value">-₹<%= offerDiscount.toFixed(2) %></span>
            </div>
            <% } %>

            <div id="couponDiscountRow" class="summary-row discount <%= !appliedCoupon ? 'd-none' : '' %>">
              <span class="summary-label">
                <i class="ri-coupon-line"></i>
                Coupon (<span id="couponCodeDisplay"><%= appliedCoupon ? appliedCoupon.code : '' %></span>)
              </span>
              <span class="summary-value" id="couponDiscountDisplay">-₹<%= couponDiscount ? couponDiscount.toFixed(2) : '0.00' %></span>
            </div>

            <div class="summary-row">
              <span class="summary-label">
                <i class="ri-truck-line"></i>
                Shipping
              </span>
              <span class="summary-value free">FREE</span>
            </div>

            <div class="summary-row">
              <span class="summary-label">Tax (8%)</span>
              <span class="summary-value">₹<%= tax ? tax.toFixed(2) : '0.00' %></span>
            </div>

            <div class="summary-divider"></div>

            <div class="summary-total">
              <span class="total-label">Total Amount</span>
              <span class="total-value">₹<%= totalAmount ? totalAmount.toFixed(2) : '0.00' %></span>
            </div>

            <% if ((offerDiscount > 0) || (appliedCoupon && couponDiscount > 0)) { %>
            <div class="savings-info">
              <div class="savings-header">
                <i class="ri-gift-line"></i>
                <span>Total Savings</span>
              </div>
              <div class="savings-amount">
                ₹<%= (offerDiscount + (couponDiscount || 0)).toFixed(2) %>
              </div>
            </div>
            <% } %>

            <!-- Delivery Info -->
            <div class="delivery-promises">
              <div class="promise-item">
                <i class="ri-truck-line"></i>
                <span>Free delivery on all orders</span>
              </div>
              <div class="promise-item">
                <i class="ri-time-line"></i>
                <span>Delivery in 3-5 business days</span>
              </div>
              <div class="promise-item">
                <i class="ri-shield-check-line"></i>
                <span>Secure payment guaranteed</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content modern-modal">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="ri-map-pin-add-line"></i>
          Add New Address
        </h5>
        <button type="button" class="btn-close-modal" data-bs-dismiss="modal">
          <i class="ri-close-line"></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="addressForm" class="address-form">
          <div class="form-row">
            <div class="form-group">
              <label for="fullName">Full Name</label>
              <div class="input-group">
                <i class="ri-user-line"></i>
                <input type="text" id="fullName" name="fullName" placeholder="Enter your full name" />
              </div>
              <div class="form-error" id="fullNameError"></div>
            </div>
            <div class="form-group">
              <label for="phone">Phone Number</label>
              <div class="input-group">
                <i class="ri-phone-line"></i>
                <input type="tel" id="phone" name="phone" placeholder="+91 12345 67890" />
              </div>
              <div class="form-error" id="phoneError"></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="pincode">PIN Code</label>
              <div class="input-group">
                <i class="ri-map-pin-line"></i>
                <input type="text" id="pincode" name="pincode" placeholder="Enter 6-digit pincode" />
              </div>
              <div class="form-error" id="pincodeError"></div>
            </div>
            <div class="form-group">
              <label for="state">State</label>
              <div class="input-group">
                <i class="ri-government-line"></i>
                <select id="state" name="state">
                  <option value="">Select your state</option>
                  <!-- Add all states here -->
                  <option value="Kerala">Kerala</option>
                  <option value="Karnataka">Karnataka</option>
                  <option value="Tamil Nadu">Tamil Nadu</option>
                  <!-- Add more states as needed -->
                </select>
              </div>
              <div class="form-error" id="stateError"></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="district">District</label>
              <div class="input-group">
                <i class="ri-building-line"></i>
                <input type="text" id="district" name="district" placeholder="Enter your district" />
              </div>
              <div class="form-error" id="districtError"></div>
            </div>
            <div class="form-group">
              <label for="landmark">Landmark (Optional)</label>
              <div class="input-group">
                <i class="ri-navigation-line"></i>
                <input type="text" id="landmark" name="landmark" placeholder="Nearby landmark" />
              </div>
            </div>
          </div>

          <div class="form-group full-width">
            <label for="street">Complete Address</label>
            <div class="input-group">
              <i class="ri-home-line"></i>
              <textarea id="street" name="street" rows="3" placeholder="House/Building number, Street, Locality"></textarea>
            </div>
            <div class="form-error" id="streetError"></div>
          </div>

          <div class="form-group full-width">
            <div class="checkbox-group">
              <input type="checkbox" id="isDefault" name="isDefault" />
              <label for="isDefault">Set as default address</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" form="addressForm" class="btn-primary" id="saveAddressBtn">
          <i class="ri-check-line"></i>
          Save Address
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Available Coupons Modal -->
<div class="modal fade" id="availableCouponsModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content modern-modal">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="ri-coupon-line"></i>
          Available Coupons
        </h5>
        <button type="button" class="btn-close-modal" data-bs-dismiss="modal">
          <i class="ri-close-line"></i>
        </button>
      </div>
      <div class="modal-body">
        <% if (availableCoupons && availableCoupons.length > 0) { %>
          <div class="coupons-list">
            <% availableCoupons.forEach(coupon => { %>
              <div class="coupon-card">
                <div class="coupon-left">
                  <div class="coupon-code"><%= coupon.code %></div>
                  <div class="coupon-discount"><%= coupon.discountDisplay %></div>
                  <% if (coupon.minOrderAmount > 0) { %>
                    <div class="coupon-condition">Min. Order: ₹<%= coupon.minOrderAmount %></div>
                  <% } %>
                </div>
                <div class="coupon-right">
                  <button class="btn-apply-coupon-modal" data-coupon-code="<%= coupon.code %>">
                    Apply
                  </button>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="no-coupons">
            <i class="ri-coupon-line"></i>
            <h4>No coupons available</h4>
            <p>Check back later for exciting offers!</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<%- include("../partials/user/footer") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
// Checkout functionality will go here
document.addEventListener('DOMContentLoaded', function() {
  // Initialize checkout functionality
  initializeCheckout();
});

function initializeCheckout() {
  // Step navigation
  setupStepNavigation();

  // Stock adjustment functionality
  setupStockAdjustmentFunctionality();

  // Address functionality
  setupAddressFunctionality();

  // Payment functionality
  setupPaymentFunctionality();

  // Coupon functionality
  setupCouponFunctionality();

  // Order placement
  setupOrderPlacement();
}

function setupStepNavigation() {
  // Navigation between steps
  document.querySelectorAll('.next-step').forEach(btn => {
    btn.addEventListener('click', function() {
      const nextStep = parseInt(this.dataset.next);
      goToStep(nextStep);
    });
  });
  
  document.querySelectorAll('.prev-step').forEach(btn => {
    btn.addEventListener('click', function() {
      const prevStep = parseInt(this.dataset.prev);
      goToStep(prevStep);
    });
  });
  
  document.querySelectorAll('.btn-change').forEach(btn => {
    btn.addEventListener('click', function() {
      const step = parseInt(this.dataset.step);
      goToStep(step);
    });
  });
}

function goToStep(stepNumber) {
  // Hide all step contents
  document.querySelectorAll('.checkout-step-content').forEach(content => {
    content.classList.remove('active');
  });
  
  // Show target step
  document.getElementById(`step-${stepNumber}-content`).classList.add('active');
  
  // Update progress indicator
  document.querySelectorAll('.progress-step').forEach((step, index) => {
    const stepNum = index + 1;
    step.classList.remove('active', 'completed');
    
    if (stepNum < stepNumber) {
      step.classList.add('completed');
    } else if (stepNum === stepNumber) {
      step.classList.add('active');
    }
  });
  
  // Scroll to top
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

function setupAddressFunctionality() {
  // Address selection
  document.querySelectorAll('.address-card').forEach(card => {
    card.addEventListener('click', function() {
      // Remove selection from all cards
      document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
      
      // Select this card
      this.classList.add('selected');
      
      // Check the radio button
      const radio = this.querySelector('input[type="radio"]');
      if (radio) radio.checked = true;
      
      // Update summary
      updateAddressSummary();
    });
  });
  
  // Continue to payment validation
  document.getElementById('continueToPaymentBtn').addEventListener('click', function() {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
      showNotification('error', 'Please select a delivery address');
      return;
    }
    goToStep(3);
  });
}

function setupPaymentFunctionality() {
  // Payment method selection
  document.querySelectorAll('.payment-card').forEach(card => {
    card.addEventListener('click', function() {
      const radio = this.querySelector('input[type="radio"]');
      if (radio && !radio.disabled) {
        radio.checked = true;
        
        // Update visual selection
        document.querySelectorAll('.payment-card').forEach(c => c.classList.remove('selected'));
        this.classList.add('selected');
        
        // Update summary
        updatePaymentSummary();
      }
    });
  });
}

function setupCouponFunctionality() {
  // Apply coupon
  document.getElementById('applyCoupon').addEventListener('click', applyCoupon);
  
  // Remove coupon
  const removeCouponBtn = document.getElementById('removeCoupon');
  if (removeCouponBtn) {
    removeCouponBtn.addEventListener('click', removeCoupon);
  }
  
  // Apply from modal
  document.querySelectorAll('.btn-apply-coupon-modal').forEach(btn => {
    btn.addEventListener('click', function() {
      const couponCode = this.dataset.couponCode;
      document.getElementById('couponCode').value = couponCode;
      
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('availableCouponsModal'));
      if (modal) modal.hide();
      
      // Apply coupon
      applyCoupon();
    });
  });
}

function setupOrderPlacement() {
  document.getElementById('placeOrderBtn').addEventListener('click', function() {
    // Validate all selections
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    
    if (!selectedAddress) {
      showNotification('error', 'Please select a delivery address');
      goToStep(2);
      return;
    }
    
    if (!selectedPayment) {
      showNotification('error', 'Please select a payment method');
      goToStep(3);
      return;
    }
    
    // Place order based on payment method
    const paymentMethod = selectedPayment.value;
    placeOrder(paymentMethod);
  });
}

// Helper functions
function updateAddressSummary() {
  const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
  if (selectedAddress) {
    const addressCard = selectedAddress.closest('.address-card');
    const addressData = {
      name: addressCard.querySelector('.address-name').textContent,
      details: Array.from(addressCard.querySelectorAll('.address-details p')).map(p => p.textContent).join(', '),
      phone: addressCard.querySelector('.address-phone').textContent
    };
    
    const summaryHtml = `
      <div class="address-summary">
        <h6>${addressData.name}</h6>
        <p>${addressData.details}</p>
        <div class="phone-info">
          <i class="ri-phone-line"></i>
          ${addressData.phone}
        </div>
      </div>
    `;
    
    document.getElementById('selectedAddressSummary').innerHTML = summaryHtml;
  }
}

function updatePaymentSummary() {
  const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
  if (selectedPayment) {
    const paymentCard = selectedPayment.closest('.payment-card');
    const paymentInfo = paymentCard.querySelector('.payment-info');
    const icon = paymentCard.querySelector('.payment-icon i').classList[0];
    
    const summaryHtml = `
      <div class="payment-summary">
        <div class="payment-method">
          <i class="${icon}"></i>
          <div>
            <h6>${paymentInfo.querySelector('h5').textContent}</h6>
            <p>${paymentInfo.querySelector('p').textContent}</p>
          </div>
        </div>
      </div>
    `;
    
    document.getElementById('paymentMethodSummary').innerHTML = summaryHtml;
  }
}

async function applyCoupon() {
  const couponCode = document.getElementById('couponCode').value.trim();
  if (!couponCode) {
    showNotification('error', 'Please enter a coupon code');
    return;
  }
  
  try {
    const response = await fetch('/api/checkout/apply-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode })
    });
    
    const data = await response.json();
    
    if (data.success) {
      showNotification('success', data.message);
      setTimeout(() => window.location.reload(), 1500);
    } else {
      showNotification('error', data.message);
    }
  } catch (error) {
    showNotification('error', 'Failed to apply coupon');
  }
}

async function removeCoupon() {
  try {
    const response = await fetch('/api/checkout/remove-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const data = await response.json();
    
    if (data.success) {
      showNotification('success', data.message);
      setTimeout(() => window.location.reload(), 1000);
    } else {
      showNotification('error', data.message);
    }
  } catch (error) {
    showNotification('error', 'Failed to remove coupon');
  }
}

async function placeOrder(paymentMethod) {
  const orderData = {
    addressId: document.querySelector('input[name="selectedAddress"]:checked').value,
    paymentMethod: paymentMethod
  };
  
  try {
    if (paymentMethod === 'razorpay') {
      // Handle Razorpay payment
      await processRazorpayPayment(orderData);
    } else {
      // Handle COD and Wallet payments
      await processDirectPayment(orderData);
    }
  } catch (error) {
    showNotification('error', 'Failed to place order');
  }
}

async function processRazorpayPayment(orderData) {
  // Create Razorpay order
  const response = await fetch('/api/checkout/create-payment', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(orderData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    const options = {
      key: data.key,
      amount: data.amount,
      currency: 'INR',
      name: data.name,
      description: data.description,
      order_id: data.order.id,
      handler: function(response) {
        // Verify payment
        verifyRazorpayPayment(response);
      },
      prefill: data.prefill,
      theme: data.theme,
      modal: {
        ondismiss: function() {
          handlePaymentFailure('Payment was cancelled by user');
        }
      }
    };
    
    const rzp = new Razorpay(options);
    rzp.open();
    
    // Handle payment failure
    rzp.on('payment.failed', function(response) {
      handlePaymentFailure(response.error.description || 'Payment failed');
    });
  } else {
    showNotification('error', data.message || 'Failed to create payment order');
  }
}

async function handlePaymentFailure(reason) {
  try {
    const response = await fetch('/api/checkout/payment-failure', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        error_description: reason
      })
    });
    
    const data = await response.json();
    
    if (data.canRetry && data.redirectUrl) {
      showNotification('error', data.message || 'Payment failed. Redirecting to order details...');
      setTimeout(() => {
        window.location.href = data.redirectUrl;
      }, 2000);
    } else {
      showNotification('error', data.message || 'Payment failed. Redirecting to orders...');
      setTimeout(() => {
        window.location.href = data.redirectUrl || '/orders';
      }, 2000);
    }
  } catch (error) {
    console.error('Error handling payment failure:', error);
    showNotification('error', 'Payment failed. Redirecting to orders...');
    setTimeout(() => {
      window.location.href = '/orders';
    }, 2000);
  }
}

async function verifyRazorpayPayment(response) {
  try {
    const verifyResponse = await fetch('/api/checkout/verify-payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(response)
    });
    
    const data = await verifyResponse.json();
    
    if (data.success) {
      showNotification('success', 'Payment successful! Redirecting...');
      setTimeout(() => {
        window.location.href = `/order-success/${data.orderId}`;
      }, 1500);
    } else {
      // Handle payment failure - redirect to order details page
      if (data.redirectUrl) {
        showNotification('error', data.message || 'Payment failed. Redirecting to order details...');
        setTimeout(() => {
          window.location.href = data.redirectUrl;
        }, 2000);
      } else {
        showNotification('error', data.message || 'Payment verification failed');
      }
    }
  } catch (error) {
    console.error('Error verifying payment:', error);
    // Handle network errors by redirecting to orders page
    showNotification('error', 'Payment verification failed. Redirecting to orders...');
    setTimeout(() => {
      window.location.href = '/orders';
    }, 2000);
  }
}

async function processDirectPayment(orderData) {
  const response = await fetch('/api/checkout/place-order', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(orderData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    showNotification('success', 'Order placed successfully!');
    setTimeout(() => {
      window.location.href = `/order-success/${data.orderId}`;
    }, 2000);
  } else {
    showNotification('error', data.message);
  }
}

function setupStockAdjustmentFunctionality() {
  console.log('Setting up stock adjustment functionality...'); // Debug log

  // Wait for DOM to be fully loaded
  setTimeout(() => {
    // Fix All button
    const fixAllBtn = document.getElementById('fixAllStockIssues');
    console.log('Fix All button found:', fixAllBtn); // Debug log
    console.log('Button element:', fixAllBtn ? fixAllBtn.outerHTML : 'null'); // Debug log

    if (fixAllBtn) {
      // Add a simple test click handler first
      fixAllBtn.addEventListener('click', async function(e) {
        e.preventDefault(); // Prevent any default behavior
        console.log('Fix All button clicked!'); // Debug log

        // Show immediate feedback
        this.disabled = true;
        this.textContent = 'Fixing...';

        try {
          const stockConflicts = <%- JSON.stringify(stockConflicts || []) %>;
          console.log('Stock conflicts:', stockConflicts); // Debug log
          console.log('Stock conflicts type:', typeof stockConflicts); // Debug log
          console.log('Stock conflicts length:', stockConflicts ? stockConflicts.length : 'null'); // Debug log

          if (!stockConflicts || stockConflicts.length === 0) {
            console.log('No stock conflicts found');
            this.disabled = false;
            this.textContent = 'Fix All';
            showNotification('info', 'No stock conflicts to fix');
            return;
          }

          const adjustments = stockConflicts.map(conflict => ({
            productId: conflict.productId,
            newQuantity: conflict.availableStock
          }));

          console.log('Adjustments to make:', adjustments); // Debug log

          await adjustMultipleQuantities(adjustments);

        } catch (error) {
          console.error('Error in Fix All:', error);
          this.disabled = false;
          this.textContent = 'Fix All';
          showNotification('error', 'Failed to fix stock issues');
        }
      });
    }
  }, 100); // Small delay to ensure DOM is ready

  // Quantity controls for conflicted items
  document.querySelectorAll('.qty-input').forEach(input => {
    const productId = input.dataset.productId;
    const availableStock = parseInt(input.dataset.availableStock);
    const container = input.closest('.cart-review-item');
    const minusBtn = container.querySelector('.qty-btn.minus');
    const plusBtn = container.querySelector('.qty-btn.plus');

    // Update button states
    function updateButtonStates() {
      const value = parseInt(input.value);
      minusBtn.disabled = value <= 0;
      plusBtn.disabled = value >= Math.min(5, availableStock);
    }

    // Minus button
    minusBtn?.addEventListener('click', function() {
      const currentValue = parseInt(input.value);
      if (currentValue > 0) {
        input.value = currentValue - 1;
        updateButtonStates();
        updateQuantity(productId, parseInt(input.value));
      }
    });

    // Plus button
    plusBtn?.addEventListener('click', function() {
      const currentValue = parseInt(input.value);
      const maxAllowed = Math.min(5, availableStock);
      if (currentValue < maxAllowed) {
        input.value = currentValue + 1;
        updateButtonStates();
        updateQuantity(productId, parseInt(input.value));
      }
    });

    // Direct input change
    input.addEventListener('change', function() {
      const value = parseInt(this.value);
      const maxAllowed = Math.min(5, availableStock);

      if (isNaN(value) || value < 0) {
        this.value = 0;
      } else if (value > maxAllowed) {
        this.value = maxAllowed;
        showNotification('warning', `Maximum ${maxAllowed} items allowed`);
      }

      updateButtonStates();
      updateQuantity(productId, parseInt(this.value));
    });

    // Initialize button states
    updateButtonStates();
  });
}

// Debounced quantity update function
let updateTimeouts = {};

function updateQuantity(productId, newQuantity) {
  // Clear existing timeout for this product
  if (updateTimeouts[productId]) {
    clearTimeout(updateTimeouts[productId]);
  }

  // Set new timeout
  updateTimeouts[productId] = setTimeout(async () => {
    await adjustItemQuantity(productId, newQuantity);
  }, 800);
}

async function adjustItemQuantity(productId, newQuantity) {
  try {
    const response = await fetch('/api/checkout/adjust-quantities', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      credentials: 'same-origin',
      body: JSON.stringify({
        adjustments: [{
          productId: productId,
          newQuantity: newQuantity
        }]
      })
    });

    const data = await response.json();

    if (data.success && data.results[0].success) {
      // Reload page to reflect changes
      window.location.reload();
    } else {
      showNotification('error', data.results[0]?.message || 'Failed to update quantity');
    }
  } catch (error) {
    console.error('Error adjusting quantity:', error);
    showNotification('error', 'Failed to update quantity');
  }
}

async function adjustMultipleQuantities(adjustments) {
  console.log('adjustMultipleQuantities called with:', adjustments); // Debug log

  try {
    console.log('Making API call to /api/checkout/adjust-quantities'); // Debug log

    const response = await fetch('/api/checkout/adjust-quantities', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      credentials: 'same-origin',
      body: JSON.stringify({ adjustments })
    });

    console.log('API response status:', response.status); // Debug log

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('API response data:', data); // Debug log

    if (data.success) {
      showNotification('success', 'Stock issues fixed');
      setTimeout(() => {
        console.log('Reloading page...'); // Debug log
        window.location.reload();
      }, 1000);
    } else {
      console.log('API returned failure:', data.message);
      showNotification('error', data.message || 'Failed to fix stock issues');

      // Re-enable the button
      const fixAllBtn = document.getElementById('fixAllStockIssues');
      if (fixAllBtn) {
        fixAllBtn.disabled = false;
        fixAllBtn.textContent = 'Fix All';
      }
    }
  } catch (error) {
    console.error('Error adjusting quantities:', error);
    showNotification('error', 'Failed to fix stock issues');

    // Re-enable the button
    const fixAllBtn = document.getElementById('fixAllStockIssues');
    if (fixAllBtn) {
      fixAllBtn.disabled = false;
      fixAllBtn.textContent = 'Fix All';
    }
  }
}

function showNotification(type, message) {
  Swal.fire({
    toast: true,
    position: 'top-end',
    icon: type,
    title: message,
    showConfirmButton: false,
    timer: 3000
  });
}



// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  updateAddressSummary();
  updatePaymentSummary();


});
</script>
