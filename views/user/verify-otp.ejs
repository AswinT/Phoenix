<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OTP Verification - Phoenix</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/styles/shared/modern-auth-base.css">
    <link rel="stylesheet" href="/styles/user/verifyOtp.css">
  </head>
  <body class="auth-body">
    <div class="auth-paper-texture">
      <div class="auth-centered-container auth-fade-in">
        <div class="auth-centered-form">
          <div class="auth-logo-container">
            <img
              src="/assets/phoenix-logo.png"
              alt="Phoenix Logo"
              width="40" height="40"
            />
            <span class="auth-logo-text">Phoenix</span>
          </div>

          <div style="text-align: center; margin-bottom: 2rem;">
            <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #000000 0%, #333333 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 1rem;">
              <i class="fas fa-shield-alt" style="color: white; font-size: 2rem;"></i>
            </div>
            <h1 class="auth-title">OTP Verification</h1>
            <p class="auth-subtitle">Enter the verification code sent to</p>
            <h5 style="color: #000; font-weight: 600; margin-bottom: 1.5rem;" id="userEmail">
              <%= maskedEmail || 'your***@example.com' %>
            </h5>
          </div>

          <!-- Timer display -->
          <div style="text-align: center; margin-bottom: 2rem;">
            <p style="margin: 0; color: #6c757d;">Code expires in: <span class="timer" id="timer" style="color: #dc3545; font-weight: 600; font-size: 1.1rem;">01:00</span></p>
            <p class="timer-expired" id="timerExpired" style="display: none; color: #dc3545; font-weight: 500; margin-top: 0.5rem;">OTP has expired. Please request a new one.</p>
          </div>

          <form id="otpForm">
            <div class="otp-inputs" style="display: flex; justify-content: center; gap: 0.75rem; margin: 2rem 0;">
              <input
                type="text"
                class="otp-input"
                name="digit1"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit2"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit3"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit4"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit5"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit6"
                maxlength="1"
                required
              />
            </div>

            <button type="submit" class="auth-btn auth-btn-primary auth-btn-full">
              Verify Code
            </button>
          </form>

          <div id="statusMessage" class="status-message" style="margin-top: 1rem; padding: 0.75rem; border-radius: 0.5rem; text-align: center; display: none;"></div>

          <div style="text-align: center; margin-top: 2rem;">
            <p style="margin-bottom: 0.5rem; color: #6c757d;">Didn't receive the code?</p>
            <a href="#" class="auth-link" id="resendBtn" style="font-weight: 600;">Resend Code</a>
          </div>
        </div>
      </div>
    </div>
    <script>
      const inputs = document.querySelectorAll(".otp-input");
      const otpForm = document.getElementById("otpForm");
      const statusMessage = document.getElementById("statusMessage");
      const resendBtn = document.getElementById("resendBtn");
      const timerElement = document.getElementById("timer");
      const timerExpiredElement = document.getElementById("timerExpired");
      const submitBtn = otpForm.querySelector('button[type="submit"]');

      let timeLeft = 30; // 30 seconds timer
      let timerId;

      // Start timer function
      function startTimer() {
        // Reset timer UI
        timerElement.style.display = 'inline';
        timerExpiredElement.style.display = 'none';
        submitBtn.disabled = false;

        // Clear any existing timer
        if (timerId) {
          clearInterval(timerId);
        }

        // Set initial time
        timeLeft = 60;
        updateTimerDisplay();

        // Start countdown
        timerId = setInterval(() => {
          timeLeft -= 1;
          updateTimerDisplay();

          if (timeLeft <= 0) {
            clearInterval(timerId);
            handleExpiredOTP();
          }
        }, 1000);
      }

      // Update timer display
      function updateTimerDisplay() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        // Change color when time is running out
        if (timeLeft <= 10) {
          timerElement.style.color = '#dc3545'; // Red color
        } else {
          timerElement.style.color = '#212529'; // Default color
        }
      }

      // Handle expired OTP
      function handleExpiredOTP() {
        timerElement.style.display = 'none';
        timerExpiredElement.style.display = 'block';
        submitBtn.disabled = true;
        showStatus('OTP has expired. Please request a new one.', 'error');
      }

      // Auto-advance to next input field and prevent letters
      inputs.forEach((input, index) => {
        input.addEventListener("input", (e) => {
          let value = input.value;

          // Remove any non-digit characters
          value = value.replace(/\D/g, '');

          // Update input value with only digits
          input.value = value;

          // Auto-advance to next input if digit entered
          if (value.length === 1 && index < inputs.length - 1) {
            inputs[index + 1].focus();
          }
        });

        // Prevent non-digit characters from being typed
        input.addEventListener("keypress", (e) => {
          // Allow backspace, delete, tab, escape, enter
          if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
              // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
              (e.keyCode === 65 && e.ctrlKey === true) ||
              (e.keyCode === 67 && e.ctrlKey === true) ||
              (e.keyCode === 86 && e.ctrlKey === true) ||
              (e.keyCode === 88 && e.ctrlKey === true)) {
            return;
          }

          // Ensure that it is a number and stop the keypress
          if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
          }
        });

        input.addEventListener("keydown", (e) => {
          if (e.key === "Backspace" && input.value === "" && index > 0) {
            inputs[index - 1].focus();
          }
        });

        // Prevent paste of non-digit content
        input.addEventListener("paste", (e) => {
          e.preventDefault();
          const paste = (e.clipboardData || window.clipboardData).getData('text');
          const digitsOnly = paste.replace(/\D/g, '');

          if (digitsOnly) {
            // Fill current and subsequent inputs with pasted digits
            for (let i = 0; i < digitsOnly.length && (index + i) < inputs.length; i++) {
              inputs[index + i].value = digitsOnly[i];
            }

            // Focus on the next empty input or the last filled input
            const nextIndex = Math.min(index + digitsOnly.length, inputs.length - 1);
            inputs[nextIndex].focus();
          }
        });
      });

      // Handle form submission
      otpForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Check if timer expired
        if (timeLeft <= 0) {
          showStatus('OTP has expired. Please request a new one.', 'error');
          return;
        }

        // Collect OTP digits
        const otpDigits = Array.from(inputs).map(input => input.value);
        const otpCode = otpDigits.join('');

        // Check if all digits are filled
        if (otpDigits.some(digit => digit === '')) {
          showStatus('Please enter all 6 digits of the OTP code', 'error');
          return;
        }

        // Check if all digits are numbers
        if (otpDigits.some(digit => !/^\d$/.test(digit))) {
          showStatus('OTP must contain only numbers', 'error');
          return;
        }

        // Prepare data for submission
        const formData = {
          otp: otpCode,
          email: document.getElementById('userEmail').textContent.trim()
        };

        try {
          // Show loading state
          const originalBtnText = submitBtn.textContent;
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Verifying...';

          // Send OTP to backend
          const response = await fetch('/verify-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          // Reset button state
          submitBtn.disabled = false;
          submitBtn.textContent = originalBtnText;

          if (data.success) {
            // Stop the timer
            clearInterval(timerId);

            showStatus('OTP verified successfully! Redirecting...', 'success');
            // Redirect after successful verification (optional)
            setTimeout(() => {
              window.location.href = '/login'; // Change to your redirect URL
            }, 2000);
          } else {
            showStatus(data.message || 'Invalid OTP. Please try again.', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showStatus('Failed to verify OTP. Please try again.', 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = originalBtnText;
        }
      });

      // Handle resend code
      resendBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        const email = document.getElementById('userEmail').textContent.trim();

        try {
          resendBtn.textContent = 'Sending...';
          resendBtn.style.pointerEvents = 'none';

          const response = await fetch('/resend-signup-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email })
          });

          const data = await response.json();

          if (data.success) {

            startTimer();

            showStatus('New OTP code sent successfully!', 'success');
            // Clear previous inputs
            inputs.forEach(input => {
              input.value = '';
            });
            inputs[0].focus();
          } else {
            showStatus(data.message || 'Failed to resend OTP. Please try again.', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showStatus('Failed to resend OTP. Please try again.', 'error');
        } finally {
          resendBtn.textContent = 'Resend Code';
          resendBtn.style.pointerEvents = 'auto';
        }
      });

      // Helper function to show status messages
      function showStatus(message, type) {
        statusMessage.textContent = message;
        statusMessage.className = 'status-message';
        statusMessage.classList.add(type === 'success' ? 'status-success' : 'status-error');
        statusMessage.style.display = 'block';

        // Hide message after 5 seconds
        setTimeout(() => {
          statusMessage.style.display = 'none';
        }, 5000);
      }

      // Initialize timer on page load
      document.addEventListener('DOMContentLoaded', () => {
        startTimer();
      });
    </script>
  </body>
</html>