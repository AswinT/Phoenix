<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign Up - Phoenix</title>

    <!-- Font imports for the new typography -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Audiowide:wght@400&family=Raleway:wght@300;400;500;600;700&family=Montserrat:wght@400;500;600&display=swap"
      rel="stylesheet"
    />

    <!-- Icon and Bootstrap -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link rel="stylesheet" href="/styles/user/signupPage.css" />

    <style>
      /* Validation styling that works with our new theme */
      .password-requirements {
        font-family: "Montserrat", sans-serif;
        font-size: 0.75rem;
        color: #456882;
        margin-top: 0.25rem;
        margin-bottom: 0.5rem;
        opacity: 0.9;
      }

      .is-valid {
        border-color: #456882 !important;
        box-shadow: 0 0 0 2px rgba(69, 104, 130, 0.2) !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23456882' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }

      .is-invalid {
        border-color: #d63031 !important;
        box-shadow: 0 0 0 2px rgba(214, 48, 49, 0.2) !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23d63031'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23d63031' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        padding-right: calc(1.5em + 0.75rem) !important;
      }
    </style>
  </head>

  <body class="elegant-body">
    <!-- Animated background particles -->
    <div class="bg-particles">
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
      <div class="particle"></div>
    </div>

    <div class="signup-wrapper">
      <div class="container">
        <div class="signup-card">
          <!-- Left side - Brand section (simplified) -->
          <div class="brand-section">
            <div class="brand-content">
              <div class="brand-logo">
                <img
                  src="../../assets/phoenix-logo.png"
                  alt="Phoenix Logo"
                  class="logo-img"
                />
                <h1 class="brand-title">Phoenix</h1>
              </div>
            </div>
          </div>

          <!-- Right side - Form section -->
          <div class="form-section">
            <div class="form-container">
              <div class="form-header">
                <h2 class="form-title">Create Your Account</h2>
                <p class="form-subtitle">
                  Start your premium audio journey with us
                </p>
              </div>

              <form id="userSignup" method="post" class="signup-form">
                <div class="input-group-custom">
                  <label for="fullName" class="form-label-custom"
                    >Full Name</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="text"
                      name="fullName"
                      class="form-input-custom"
                      id="fullName"
                      placeholder="Enter your full name"
                    />
                    <i class="ri-user-line input-icon"></i>
                  </div>
                  <div id="fullNameError" class="error-message"></div>
                </div>

                <div class="input-group-custom">
                  <label for="email" class="form-label-custom"
                    >Email Address</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="email"
                      name="email"
                      class="form-input-custom"
                      id="email"
                      placeholder="Enter your email address"
                    />
                    <i class="ri-mail-line input-icon"></i>
                  </div>
                  <div id="emailError" class="error-message"></div>
                </div>

                <div class="input-group-custom">
                  <label for="phoneNumber" class="form-label-custom"
                    >Phone Number</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="tel"
                      name="phoneNumber"
                      class="form-input-custom"
                      id="phoneNumber"
                      placeholder="Enter your phone number"
                    />
                    <i class="ri-phone-line input-icon"></i>
                  </div>
                  <div id="phoneNumberError" class="error-message"></div>
                </div>

                <div class="input-group-custom">
                  <label for="password" class="form-label-custom"
                    >Password</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="password"
                      name="password"
                      class="form-input-custom"
                      id="password"
                      placeholder="Create a strong password"
                    />
                    <i class="ri-lock-line input-icon"></i>
                    <button
                      class="password-toggle toggle-password"
                      type="button"
                      tabindex="-1"
                    >
                      <i class="ri-eye-off-line"></i>
                    </button>
                  </div>
                  <div class="password-requirements" id="passwordRequirements">
                    Password must include: 8+ characters, uppercase, lowercase,
                    numbers, and special characters (@$!%*?&_-#)
                  </div>
                  <div id="passwordError" class="error-message"></div>
                </div>

                <div class="input-group-custom">
                  <label for="confirmPassword" class="form-label-custom"
                    >Confirm Password</label
                  >
                  <div class="input-wrapper">
                    <input
                      type="password"
                      name="confirmPassword"
                      class="form-input-custom"
                      id="confirmPassword"
                      placeholder="Confirm your password"
                    />
                    <i class="ri-shield-check-line input-icon"></i>
                    <button
                      class="password-toggle toggle-password"
                      type="button"
                      tabindex="-1"
                    >
                      <i class="ri-eye-off-line"></i>
                    </button>
                  </div>
                  <div id="confirmPasswordError" class="error-message"></div>
                </div>

                <button type="submit" class="btn-signup" id="submitButton">
                  <span class="btn-text">Create Account</span>
                  <i class="ri-arrow-right-line btn-icon"></i>
                </button>

                <div class="divider-custom">
                  <span>or continue with</span>
                </div>

                <a href="/auth/google" class="btn-google">
                  <i class="ri-google-fill"></i>
                  <span>Sign up with Google</span>
                </a>

                <div class="form-footer">
                  <p class="login-link">
                    Already have an account?
                    <a href="/login" class="link-primary">Sign in here</a>
                  </p>
                  <p class="referral-link">
                    Have a referral code?
                    <a
                      href="#"
                      class="link-secondary"
                      data-bs-toggle="modal"
                      data-bs-target="#referralModal"
                    >
                      Enter code for â‚¹50 bonus
                    </a>
                  </p>
                </div>
              </form>
            </div>
          </div>
        </div>

        <div class="footer-text">
          <p>&copy; 2025 Phoenix Audio. All rights reserved.</p>
        </div>
      </div>
    </div>

    <!-- Referral Modal -->
    <div
      class="modal fade"
      id="referralModal"
      tabindex="-1"
      aria-labelledby="referralModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-custom">
          <div class="modal-header modal-header-custom">
            <h5 class="modal-title" id="referralModalLabel">
              <i class="ri-gift-line me-2"></i>Enter Referral Code
            </h5>
            <button
              type="button"
              class="btn-close modal-close-custom"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body modal-body-custom">
            <div class="referral-info">
              <div class="referral-icon">
                <i class="ri-gift-fill"></i>
              </div>
              <p class="referral-desc">
                Get â‚¹50 bonus in your wallet when you use a friend's referral
                code!
              </p>
            </div>
            <form id="referralForm">
              <div class="input-group-custom">
                <label for="referralCodeInput" class="form-label-custom"
                  >Referral Code</label
                >
                <div class="input-wrapper">
                  <input
                    type="text"
                    class="form-input-custom"
                    id="referralCodeInput"
                    placeholder="Enter referral code (e.g., SAVE30USER123)"
                    style="text-transform: uppercase"
                  />
                  <i class="ri-coupon-line input-icon"></i>
                </div>
                <div id="referralCodeError" class="error-message"></div>
                <div id="referralCodeSuccess" class="success-message"></div>
              </div>
            </form>
          </div>
          <div class="modal-footer modal-footer-custom">
            <button
              type="button"
              class="btn-secondary-modal"
              data-bs-dismiss="modal"
            >
              Skip for now
            </button>
            <button
              type="button"
              class="btn-primary-modal"
              id="applyReferralBtn"
            >
              <i class="ri-check-line me-1"></i>Apply Code
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // [Same JavaScript code as before - no changes needed]
      // Validation helper functions
      function setInvalid(element) {
        element.classList.add("is-invalid");
        element.classList.remove("is-valid");
      }

      function setValid(element) {
        element.classList.add("is-valid");
        element.classList.remove("is-invalid");
      }

      // Enhanced validation functions
      function validateFullName(fullName) {
        const trimmedName = fullName.trim();
        if (trimmedName.length < 3) return false;

        const nameWords = trimmedName
          .split(" ")
          .filter((word) => word.length > 0);
        if (nameWords.length < 2) return false;

        return /^[A-Za-z\s'-]+$/.test(trimmedName);
      }

      function validateEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        if (!emailRegex.test(email)) return false;

        // Check for disposable email domains
        const disposableDomains = [
          "mailinator.com",
          "tempmail.com",
          "temp-mail.org",
          "guerrillamail.com",
          "yopmail.com",
          "sharklasers.com",
        ];
        const domain = email.split("@")[1];
        return !disposableDomains.includes(domain);
      }

      function validatePhoneNumber(phoneNumber) {
        // Remove any non-digit characters
        const cleanPhone = phoneNumber.replace(/\D/g, "");

        // Check length (10 digits standard or 11-15 with country code)
        if (
          cleanPhone.length !== 10 &&
          (cleanPhone.length < 11 || cleanPhone.length > 15)
        ) {
          return false;
        }

        // Check for obviously fake patterns
        if (
          /^(.)\1+$/.test(cleanPhone) ||
          /^0{10}$/.test(cleanPhone) ||
          /^1{10}$/.test(cleanPhone)
        ) {
          return false;
        }

        return true;
      }

      function validatePassword(password) {
        const minLength = password.length >= 8;
        const hasUppercase = /[A-Z]/.test(password);
        const hasLowercase = /[a-z]/.test(password);
        const hasNumber = /\d/.test(password);
        const hasSpecial = /[@$!%*?&_\-#]/.test(password);

        // Check for common patterns
        const hasCommonPattern = /123456|password|qwerty/i.test(password);

        return (
          minLength &&
          hasUppercase &&
          hasLowercase &&
          hasNumber &&
          hasSpecial &&
          !hasCommonPattern
        );
      }

      // Password toggle functionality
      document.querySelectorAll(".toggle-password").forEach((button) => {
        button.addEventListener("click", function () {
          const input = this.parentElement.querySelector("input");
          const icon = this.querySelector("i");

          if (input.type === "password") {
            input.type = "text";
            icon.classList.replace("ri-eye-off-line", "ri-eye-line");
          } else {
            input.type = "password";
            icon.classList.replace("ri-eye-line", "ri-eye-off-line");
          }
        });
      });

      // Real-time validation events
      document
        .getElementById("fullName")
        .addEventListener("input", function () {
          const fullName = this.value.trim();
          const fullNameError = document.getElementById("fullNameError");

          if (fullName === "") {
            fullNameError.textContent = "";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (!validateFullName(fullName)) {
            const nameWords = fullName
              .split(" ")
              .filter((word) => word.length > 0);
            if (nameWords.length < 2) {
              fullNameError.textContent =
                "Please provide both first and last name.";
            } else if (!/^[A-Za-z\s'-]+$/.test(fullName)) {
              fullNameError.textContent = "Name contains invalid characters.";
            } else {
              fullNameError.textContent =
                "Full name must be at least 3 characters.";
            }
            setInvalid(this);
          } else {
            fullNameError.textContent = "";
            setValid(this);
          }
        });

      document.getElementById("email").addEventListener("input", function () {
        const email = this.value.trim();
        const emailError = document.getElementById("emailError");

        if (email === "") {
          emailError.textContent = "";
          this.classList.remove("is-invalid");
          this.classList.remove("is-valid");
        } else if (!validateEmail(email)) {
          const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
          if (!emailRegex.test(email)) {
            emailError.textContent = "Please enter a valid email address.";
          } else {
            emailError.textContent =
              "Please use a non-disposable email address.";
          }
          setInvalid(this);
        } else {
          emailError.textContent = "";
          setValid(this);
        }
      });

      document
        .getElementById("phoneNumber")
        .addEventListener("input", function () {
          const phoneNumber = this.value.trim();
          const phoneNumberError = document.getElementById("phoneNumberError");

          if (phoneNumber === "") {
            phoneNumberError.textContent = "";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (!validatePhoneNumber(phoneNumber)) {
            const cleanPhone = phoneNumber.replace(/\D/g, "");

            if (
              /^(.)\1+$/.test(cleanPhone) ||
              /^0{10}$/.test(cleanPhone) ||
              /^1{10}$/.test(cleanPhone)
            ) {
              phoneNumberError.textContent =
                "Please enter a valid phone number.";
            } else {
              phoneNumberError.textContent =
                "Phone number must be 10 digits or include a valid country code.";
            }
            setInvalid(this);
          } else {
            phoneNumberError.textContent = "";
            setValid(this);
          }
        });

      document
        .getElementById("password")
        .addEventListener("input", function () {
          const password = this.value;
          const passwordError = document.getElementById("passwordError");

          if (password === "") {
            passwordError.textContent = "";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (!validatePassword(password)) {
            // Detailed feedback
            const minLength = password.length >= 8;
            const hasUppercase = /[A-Z]/.test(password);
            const hasLowercase = /[a-z]/.test(password);
            const hasNumber = /\d/.test(password);
            const hasSpecial = /[@$!%*?&_\-#]/.test(password);
            const hasCommonPattern = /123456|password|qwerty/i.test(password);

            let errorMsg = "Password must include: ";
            const missing = [];

            if (!minLength) missing.push("at least 8 characters");
            if (!hasUppercase) missing.push("uppercase letter");
            if (!hasLowercase) missing.push("lowercase letter");
            if (!hasNumber) missing.push("numbers");
            if (!hasSpecial) missing.push("special characters");
            if (hasCommonPattern)
              missing.push("avoid common patterns (123456, password, qwerty)");

            passwordError.textContent = errorMsg + missing.join(", ");
            setInvalid(this);
          } else {
            passwordError.textContent = "";
            setValid(this);
          }

          // Also check confirm password if it has content
          const confirmPassword = document.getElementById("confirmPassword");
          if (confirmPassword.value) {
            if (password !== confirmPassword.value) {
              document.getElementById("confirmPasswordError").textContent =
                "Passwords do not match.";
              setInvalid(confirmPassword);
            } else {
              document.getElementById("confirmPasswordError").textContent = "";
              setValid(confirmPassword);
            }
          }
        });

      document
        .getElementById("confirmPassword")
        .addEventListener("input", function () {
          const confirmPassword = this.value;
          const password = document.getElementById("password").value;
          const confirmPasswordError = document.getElementById(
            "confirmPasswordError"
          );

          if (confirmPassword === "") {
            confirmPasswordError.textContent = "";
            this.classList.remove("is-invalid");
            this.classList.remove("is-valid");
          } else if (password !== confirmPassword) {
            confirmPasswordError.textContent = "Passwords do not match.";
            setInvalid(this);
          } else {
            confirmPasswordError.textContent = "";
            setValid(this);
          }
        });

      // Form submission handler
      document
        .getElementById("userSignup")
        .addEventListener("submit", async (event) => {
          event.preventDefault();

          const fullName = document.getElementById("fullName").value.trim();
          const email = document.getElementById("email").value.trim();
          const phoneNumber = document
            .getElementById("phoneNumber")
            .value.trim();
          const password = document.getElementById("password").value;
          const confirmPassword =
            document.getElementById("confirmPassword").value;

          // Clear previous errors
          document.getElementById("fullNameError").textContent = "";
          document.getElementById("emailError").textContent = "";
          document.getElementById("phoneNumberError").textContent = "";
          document.getElementById("passwordError").textContent = "";
          document.getElementById("confirmPasswordError").textContent = "";

          let isValid = true;

          // Validate all fields
          if (!fullName || !validateFullName(fullName)) {
            const nameWords = fullName
              .split(" ")
              .filter((word) => word.length > 0);
            if (nameWords.length < 2) {
              document.getElementById("fullNameError").textContent =
                "Please provide both first and last name.";
            } else {
              document.getElementById("fullNameError").textContent =
                "Full name must be at least 3 characters with valid characters.";
            }
            setInvalid(document.getElementById("fullName"));
            isValid = false;
          }

          if (!email || !validateEmail(email)) {
            document.getElementById("emailError").textContent =
              "Valid email is required (non-disposable).";
            setInvalid(document.getElementById("email"));
            isValid = false;
          }

          if (!phoneNumber || !validatePhoneNumber(phoneNumber)) {
            document.getElementById("phoneNumberError").textContent =
              "Valid phone number is required.";
            setInvalid(document.getElementById("phoneNumber"));
            isValid = false;
          }

          if (!password || !validatePassword(password)) {
            document.getElementById("passwordError").textContent =
              "Password must be at least 8 characters with uppercase, lowercase, numbers, and special characters.";
            setInvalid(document.getElementById("password"));
            isValid = false;
          }

          if (password !== confirmPassword) {
            document.getElementById("confirmPasswordError").textContent =
              "Passwords do not match.";
            setInvalid(document.getElementById("confirmPassword"));
            isValid = false;
          }

          if (isValid) {
            // Show loading state
            const submitButton = document.getElementById("submitButton");
            const btnText = submitButton.querySelector(".btn-text");
            const btnIcon = submitButton.querySelector(".btn-icon");

            submitButton.disabled = true;
            btnText.textContent = "Creating Account...";
            btnIcon.className = "ri-loader-4-line btn-icon rotating";

            try {
              const response = await fetch("/signup", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  fullName,
                  email,
                  phoneNumber,
                  password,
                  confirmPassword,
                  referralCode: window.appliedReferralCode || null,
                }),
              });

              const result = await response.json();
              submitButton.disabled = false;
              btnText.textContent = "Create Account";
              btnIcon.className = "ri-arrow-right-line btn-icon";

              if (result.success) {
                Swal.fire({
                  icon: "success",
                  title: "Registration Complete!",
                  text: "Please check your email for the OTP verification code to complete your account setup.",
                  confirmButtonColor: "#1B3C53",
                  confirmButtonText: "Verify Email",
                }).then(() => {
                  window.location.href = "/verify-otp";
                });
              } else {
                // Handle validation errors from server
                if (result.errors) {
                  const errors = result.errors;
                  for (const field in errors) {
                    const errorElement = document.getElementById(
                      `${field}Error`
                    );
                    if (errorElement) {
                      errorElement.textContent = errors[field];
                      setInvalid(document.getElementById(field));
                    }
                  }
                } else {
                  // Generic error
                  Swal.fire({
                    icon: "error",
                    title: "Signup Failed",
                    text: result.message || "Something went wrong!",
                  });
                }
              }
            } catch (err) {
              console.log("Signup error:", err);
              submitButton.disabled = false;
              btnText.textContent = "Create Account";
              btnIcon.className = "ri-arrow-right-line btn-icon";

              Swal.fire({
                icon: "error",
                title: "Error",
                text: "Server not responding. Try again later.",
              });
            }
          }
        });

      // Referral Modal Functionality
      let appliedReferralCode = null;
      window.appliedReferralCode = null;

      const referralCodeInput = document.getElementById("referralCodeInput");
      const referralCodeError = document.getElementById("referralCodeError");
      const referralCodeSuccess = document.getElementById(
        "referralCodeSuccess"
      );
      const applyReferralBtn = document.getElementById("applyReferralBtn");

      // Real-time referral code validation
      referralCodeInput.addEventListener("input", function () {
        const code = this.value.trim().toUpperCase();
        this.value = code;

        // Clear previous messages
        referralCodeError.textContent = "";
        referralCodeSuccess.textContent = "";

        if (code.length === 0) {
          applyReferralBtn.disabled = false;
          return;
        }

        // Basic validation
        if (code.length < 6) {
          referralCodeError.textContent =
            "Referral code must be at least 6 characters";
          applyReferralBtn.disabled = true;
        } else {
          applyReferralBtn.disabled = false;
        }
      });

      // Apply referral code
      applyReferralBtn.addEventListener("click", async function () {
        const code = referralCodeInput.value.trim().toUpperCase();

        if (!code) {
          // Skip referral
          bootstrap.Modal.getInstance(
            document.getElementById("referralModal")
          ).hide();
          return;
        }

        // Show loading state
        const originalText = this.innerHTML;
        this.disabled = true;
        this.innerHTML =
          '<i class="ri-loader-4-line rotating me-1"></i> Validating...';

        try {
          const response = await fetch("/users/referrals/validate", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ referralCode: code }),
          });

          const result = await response.json();

          if (result.success) {
            referralCodeSuccess.textContent = `âœ“ Valid referral code! You'll get â‚¹50 in your wallet.`;
            referralCodeError.textContent = "";
            appliedReferralCode = code;
            window.appliedReferralCode = code;

            // Show success and close modal after delay
            setTimeout(() => {
              bootstrap.Modal.getInstance(
                document.getElementById("referralModal")
              ).hide();

              // Show success toast
              Swal.fire({
                icon: "success",
                title: "Referral Code Applied!",
                text: "You'll receive â‚¹50 in your wallet after signup.",
                timer: 3000,
                showConfirmButton: false,
                toast: true,
                position: "top-end",
              });
            }, 1500);
          } else {
            referralCodeError.textContent =
              result.message || "Invalid referral code";
            referralCodeSuccess.textContent = "";
          }
        } catch (error) {
          console.error("Error validating referral code:", error);
          referralCodeError.textContent =
            "Error validating referral code. Please try again.";
          referralCodeSuccess.textContent = "";
        }

        // Reset button
        this.disabled = false;
        this.innerHTML = originalText;
      });

      // Reset modal when closed
      document
        .getElementById("referralModal")
        .addEventListener("hidden.bs.modal", function () {
          if (!appliedReferralCode) {
            referralCodeInput.value = "";
            referralCodeError.textContent = "";
            referralCodeSuccess.textContent = "";
          }
        });
    </script>
  </body>
</html>
