<%- include("../partials/user/header") %>

<!-- Include Modern Product Card Styles -->
<link rel="stylesheet" href="/styles/user/modern-product-card.css">

<!-- Enhanced Price Validation Styles -->
<style>
  /* Price input validation styles */
  .price-input-group {
    position: relative;
    margin-bottom: 8px;
  }

  .price-input.error {
    border-color: #dc3545 !important;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    background-color: #fff5f5;
  }

  .price-input.success {
    border-color: #28a745 !important;
    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
  }

  .price-error-message {
    font-size: 0.75rem;
    color: #dc3545;
    margin-top: 4px;
    min-height: 18px;
    display: flex;
    align-items: center;
    opacity: 0;
    transform: translateY(-5px);
    transition: all 0.3s ease;
  }

  .price-error-message.show {
    opacity: 1;
    transform: translateY(0);
  }

  .price-error-message i {
    margin-right: 4px;
    font-size: 0.8rem;
  }

  .price-range-error {
    background-color: #fff3cd;
    border: 1px solid #ffeaa7;
    color: #856404;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 0.85rem;
    margin-top: 8px;
    display: none;
    align-items: center;
  }

  .price-range-error.show {
    display: flex;
  }

  .price-range-error i {
    margin-right: 6px;
  }

  .server-validation-errors {
    margin-top: 8px;
  }

  .alert-sm {
    padding: 6px 10px;
    font-size: 0.8rem;
    margin-bottom: 4px;
  }

  /* Toast notification styles */
  .price-toast {
    position: fixed;
    top: 20px;
    right: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    padding: 16px 20px;
    max-width: 350px;
    z-index: 9999;
    transform: translateX(400px);
    transition: transform 0.3s ease;
    border-left: 4px solid #ffc107;
  }

  .price-toast.show {
    transform: translateX(0);
  }

  .price-toast.error {
    border-left-color: #dc3545;
  }

  .price-toast.success {
    border-left-color: #28a745;
  }

  .price-toast-header {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .price-toast-header i {
    margin-right: 8px;
    font-size: 1.1rem;
  }

  .price-toast-body {
    font-size: 0.85rem;
    color: #666;
    line-height: 1.4;
  }

  .price-toast-close {
    position: absolute;
    top: 8px;
    right: 8px;
    background: none;
    border: none;
    font-size: 1.2rem;
    color: #999;
    cursor: pointer;
    padding: 4px;
    line-height: 1;
  }

  .price-toast-close:hover {
    color: #666;
  }

  /* Loading state for apply filters button */
  .apply-filters-btn.loading {
    opacity: 0.7;
    pointer-events: none;
  }

  .apply-filters-btn.loading::after {
    content: '';
    width: 16px;
    height: 16px;
    border: 2px solid #ffffff;
    border-top: 2px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: inline-block;
    margin-left: 8px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Improved focus states for accessibility */
  .price-input:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  .price-input:focus.error {
    border-color: #dc3545;
    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
  }

  /* Screen reader only class for accessibility */
  .sr-only {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
  }
</style>

<!-- Shop Banner Section -->
<section class="shop-banner-section">
  <div class="audio-visualizer-shop">
    <div class="frequency-bar-shop" style="--delay: 0s; --height: 15px;"></div>
    <div class="frequency-bar-shop" style="--delay: 0.2s; --height: 25px;"></div>
    <div class="frequency-bar-shop" style="--delay: 0.4s; --height: 20px;"></div>
    <div class="frequency-bar-shop" style="--delay: 0.6s; --height: 30px;"></div>
    <div class="frequency-bar-shop" style="--delay: 0.8s; --height: 18px;"></div>
  </div>
  <div class="container">
    <div class="row align-items-center justify-content-center text-center">
      <div class="col-lg-8">
        <div class="shop-banner-content">
          <h1 class="shop-banner-title">Discover Premium Headphones</h1>
          <p class="shop-banner-subtitle">Immerse yourself in superior sound quality with our curated collection</p>
          <nav aria-label="breadcrumb" class="shop-breadcrumb">
            <ol class="breadcrumb justify-content-center mb-0">
              <li class="breadcrumb-item"><a href="/" class="text-decoration-none">Home</a></li>
              <li class="breadcrumb-item active" aria-current="page">Shop</li>
            </ol>
          </nav>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Shop Content -->
<section class="shop-content-section">
  <div class="container">
    <div class="row g-4">
      <!-- Filters Sidebar -->
      <div class="col-lg-3">
        <div class="filters-container">
          <div class="filter-card floating-card">
            <div class="filter-header">
              <h3 class="filter-title">
                <i class="ri-equalizer-line me-2"></i>Filters
              </h3>
              <button class="filter-toggle d-lg-none" onclick="toggleFilters()">
                <i class="ri-arrow-down-s-line"></i>
              </button>
            </div>

            <div class="filter-content" id="filterContent">
              <!-- Category Filter -->
              <div class="filter-section">
                <h4 class="filter-section-title">
                  <i class="ri-folder-music-line me-2"></i>Categories
                </h4>
                <div class="filter-dropdown-container">
                  <select class="filter-dropdown" id="categorySelect" multiple>
                    <option value="">All Categories</option>
                    <% if (categories && categories.length > 0) { %>
                      <% categories.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                      <% }) %>
                    <% } %>
                  </select>
                  <i class="ri-arrow-down-s-line dropdown-arrow"></i>
                </div>
              </div>

              <!-- Brand Filter -->
              <div class="filter-section">
                <h4 class="filter-section-title">
                  <i class="ri-headphone-line me-2"></i>Brands
                </h4>
                <div class="filter-dropdown-container">
                  <select class="filter-dropdown" id="brandSelect" multiple>
                    <option value="">All Brands</option>
                    <% if (brands && brands.length > 0) { %>
                      <% brands.forEach(brand => { %>
                        <option value="<%= brand %>"><%= brand %></option>
                      <% }) %>
                    <% } %>
                  </select>
                  <i class="ri-arrow-down-s-line dropdown-arrow"></i>
                </div>
              </div>

              <!-- Price Range Filter -->
              <div class="filter-section">
                <h4 class="filter-section-title">
                  <i class="ri-money-rupee-circle-line me-2"></i>Price Range
                </h4>
                <div class="price-filter">
                  <div class="price-inputs">
                    <div class="price-input-group">
                      <span class="price-currency">₹</span>
                      <input type="number"
                             class="price-input"
                             id="minPriceInput"
                             placeholder="Min"
                             min="0"
                             max="1000000"
                             step="1"
                             value="<%= minPrice || 0 %>"
                             aria-label="Minimum price"
                             aria-describedby="minPriceError">
                      <div class="price-error-message" id="minPriceError" role="alert" aria-live="polite"></div>
                    </div>
                    <div class="price-separator">-</div>
                    <div class="price-input-group">
                      <span class="price-currency">₹</span>
                      <input type="number"
                             class="price-input"
                             id="maxPriceInput"
                             placeholder="Max"
                             min="0"
                             max="1000000"
                             step="1"
                             value="<%= maxPrice || 50000 %>"
                             aria-label="Maximum price"
                             aria-describedby="maxPriceError">
                      <div class="price-error-message" id="maxPriceError" role="alert" aria-live="polite"></div>
                    </div>
                  </div>
                  <!-- General price range error -->
                  <div class="price-range-error" id="priceRangeError" role="alert" aria-live="polite"></div>

                  <!-- Server-side validation errors -->
                  <% if (typeof priceValidationErrors !== 'undefined' && priceValidationErrors && priceValidationErrors.length > 0) { %>
                    <div class="server-validation-errors">
                      <% priceValidationErrors.forEach(error => { %>
                        <div class="alert alert-warning alert-sm">
                          <i class="ri-alert-line me-1"></i><%= error %>
                        </div>
                      <% }) %>
                    </div>
                  <% } %>
                </div>
              </div>

              <!-- Filter Actions -->
              <div class="filter-actions">
                <button class="btn-apply-filters" onclick="applyFilters()">
                  <i class="ri-check-line me-2"></i>Apply Filters
                </button>
                <button class="btn-reset-filters" onclick="resetFilters()">
                  <i class="ri-refresh-line me-2"></i>Reset
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Products Grid -->
      <div class="col-lg-9">
        <!-- Sort and View Options -->
        <div class="shop-controls floating-card">
          <div class="sort-section">
            <div class="sort-label">
              <i class="ri-sound-module-line me-2"></i>Sort by:
            </div>
            <div class="sort-dropdown">
              <select class="custom-select" id="sortSelect" onchange="sortProducts()">
                <option value="recommended" <%= sortOption === 'recommended' ? 'selected' : '' %>>Recommended</option>
                <option value="price-asc" <%= sortOption === 'price-asc' ? 'selected' : '' %>>Price: Low to High</option>
                <option value="price-desc" <%= sortOption === 'price-desc' ? 'selected' : '' %>>Price: High to Low</option>
                <option value="date-desc" <%= sortOption === 'date-desc' ? 'selected' : '' %>>New Arrivals</option>
                <option value="stock-desc" <%= sortOption === 'stock-desc' ? 'selected' : '' %>>Best Selling</option>
                <option value="name-asc" <%= sortOption === 'name-asc' ? 'selected' : '' %>>Name: A to Z</option>
                <option value="name-desc" <%= sortOption === 'name-desc' ? 'selected' : '' %>>Name: Z to A</option>
              </select>
              <i class="ri-arrow-down-s-line sort-arrow"></i>
            </div>
          </div>
          <div class="view-section">
            <div class="view-label d-none d-sm-block">
              <i class="ri-layout-grid-line me-2"></i>View:
            </div>
            <div class="view-options">
              <button type="button" class="view-btn active" data-view="grid">
                <i class="ri-grid-line"></i>
              </button>
              <button type="button" class="view-btn" data-view="list">
                <i class="ri-list-check"></i>
              </button>
            </div>
          </div>
        </div>

        <!-- Products -->
        <div class="modern-products-grid shop-layout" id="productGrid">
          <% if (products && products.length > 0) { %>
            <% products.forEach(product => { %>
              <%
                const now = new Date();
                const createdAt = new Date(product.createdAt);
                const diffDays = (now - createdAt) / (1000 * 60 * 60 * 24);
                const isNew = diffDays <= 30;
                const stockStatus = product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock';
                const stockText = product.stock > 10 ? 'In Stock' : product.stock > 0 ? `Only ${product.stock} left` : 'Out of Stock';
              %>
              <div class="product-item"
                   data-category="<%= product.category._id %>"
                   data-price="<%= product.finalPrice %>"
                   data-date="<%= new Date(product.createdAt).getTime() %>"
                   data-stock="<%= product.stock %>">
                <div class="modern-product-card">
                  <!-- Product Image Section -->
                  <div class="modern-product-image-section">
                    <!-- Product Badges -->
                    <div class="modern-product-badges">
                      <% if (isNew) { %>
                      <span class="modern-product-badge modern-badge-new">New</span>
                      <% } %>
                      <% if (product.discountPercentage > 0) { %>
                      <span class="modern-product-badge modern-badge-offer">
                        <%= Math.round(product.discountPercentage) %>% OFF
                      </span>
                      <% } %>
                    </div>

                    <!-- Wishlist Button -->
                    <button class="modern-wishlist-btn btn-wishlist-shop" data-product-id="<%= product._id %>">
                      <i class="ri-heart-line"></i>
                    </button>

                    <!-- Small Cart Icon -->
                    <button class="modern-cart-icon add-to-cart" data-product-id="<%= product._id %>">
                      <i class="ri-shopping-cart-line"></i>
                    </button>

                    <!-- Product Image -->
                    <a href="/products/<%= product._id %>">
                      <img
                        src="<%= product.mainImage || '/api/placeholder/500/600' %>"
                        alt="<%= product.model %>"
                        class="modern-product-image"
                      />
                    </a>

                    <!-- Quick View Overlay -->
                    <div class="modern-quick-view-overlay">
                      <button class="modern-quick-view-btn" onclick="window.location.href='/products/<%= product._id %>'">
                        Quick View
                      </button>
                    </div>
                  </div>

                  <!-- Product Info Section -->
                  <div class="modern-product-info">
                    <!-- Brand -->
                    <div class="modern-product-brand"><%= product.brand %></div>

                    <!-- Title -->
                    <h3 class="modern-product-title">
                      <a href="/products/<%= product._id %>"><%= product.model %></a>
                    </h3>

                    <!-- Rating (placeholder for future implementation) -->
                    <div class="modern-product-rating">
                      <div class="modern-rating-stars">
                        <i class="ri-star-fill modern-rating-star"></i>
                        <i class="ri-star-fill modern-rating-star"></i>
                        <i class="ri-star-fill modern-rating-star"></i>
                        <i class="ri-star-fill modern-rating-star"></i>
                        <i class="ri-star-line modern-rating-star empty"></i>
                      </div>
                      <span class="modern-rating-count">(4.2)</span>
                    </div>

                    <!-- Price -->
                    <div class="modern-product-price">
                      <% if (product.discountPercentage > 0) { %>
                      <div class="modern-price-group">
                        <span class="modern-current-price">₹<%= product.finalPrice.toFixed(2) %></span>
                        <span class="modern-original-price">₹<%= product.regularPrice.toFixed(2) %></span>
                        <span class="modern-discount-badge">Save ₹<%= (product.regularPrice - product.finalPrice).toFixed(0) %></span>
                      </div>
                      <% if (product.bestOfferTitle) { %>
                      <p class="modern-offer-text"><%= product.bestOfferTitle %></p>
                      <% } %>
                      <% } else { %>
                      <div class="modern-price-group">
                        <span class="modern-current-price">₹<%= product.finalPrice.toFixed(2) %></span>
                      </div>
                      <% } %>
                    </div>

                    <!-- Stock Status -->
                    <div class="modern-stock-status">
                      <span class="modern-stock-indicator modern-stock-<%= stockStatus %>">
                        <%= stockText %>
                      </span>
                    </div>

                    <!-- Action Buttons -->
                    <div class="modern-product-actions">
                      <button 
                        class="modern-add-to-cart-btn add-to-cart" 
                        data-product-id="<%= product._id %>"
                        <%= product.stock === 0 ? 'disabled' : '' %>
                      >
                        <i class="ri-shopping-cart-line"></i>
                        <span><%= product.stock === 0 ? 'Out of Stock' : 'Add to Cart' %></span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="empty-state">
              <i class="ri-headphone-line"></i>
              <p>No products available at the moment.</p>
            </div>
          <% } %>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
          <nav aria-label="Page navigation">
            <ul class="pagination">
              <li class="page-item <%= pagination.hasPrevPage ? '' : 'disabled' %>">
                <a class="page-link" href="<%= pagination.hasPrevPage ? `?page=${pagination.prevPage}${queryString}` : '#' %>" aria-label="Previous">
                  <span aria-hidden="true">«</span>
                </a>
              </li>

              <% if (pagination.currentPage > 3 && pagination.totalPages > 5) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=1<%= queryString %>">1</a>
                </li>
                <% if (pagination.currentPage > 4) { %>
                  <li class="page-item disabled">
                    <a class="page-link" href="#">...</a>
                  </li>
                <% } %>
              <% } %>

              <% pagination.pages.forEach(page => { %>
                <li class="page-item <%= page === pagination.currentPage ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= page %><%= queryString %>"><%= page %></a>
                </li>
              <% }) %>

              <% if (pagination.currentPage < pagination.totalPages - 2 && pagination.totalPages > 5) { %>
                <% if (pagination.currentPage < pagination.totalPages - 3) { %>
                  <li class="page-item disabled">
                    <a class="page-link" href="#">...</a>
                  </li>
                <% } %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= pagination.totalPages %><%= queryString %>"><%= pagination.totalPages %></a>
                </li>
              <% } %>

              <li class="page-item <%= pagination.hasNextPage ? '' : 'disabled' %>">
                <a class="page-link" href="<%= pagination.hasNextPage ? `?page=${pagination.nextPage}${queryString}` : '#' %>" aria-label="Next">
                  <span aria-hidden="true">»</span>
                </a>
              </li>
            </ul>
          </nav>

          <!-- Product Count Information -->
          <div class="product-count-info">
            <% const startItem = (pagination.currentPage - 1) * 12 + 1; %>
            <% const endItem = Math.min(pagination.currentPage * 12, totalProducts); %>
            Showing <%= startItem %> to <%= endItem %> of <%= totalProducts %> products
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<%- include("../partials/user/footer") %>

<script>
  // Global variables for price validation
  let minPriceInput, maxPriceInput, minPriceError, maxPriceError, priceRangeError;

  // Validation configuration
  const PRICE_CONFIG = {
    MIN_VALUE: 0,
    MAX_VALUE: 1000000,
    MIN_RANGE_GAP: 10,
    DECIMAL_PLACES: 2
  };

  // Individual input validation functions
  function validateMinPrice(value, maxValue = null) {
    const errors = [];
    const numValue = parseFloat(value);

    if (value === '' || value === null || value === undefined) {
      return { isValid: true, value: PRICE_CONFIG.MIN_VALUE, errors: [] };
    }

    if (isNaN(numValue)) {
      errors.push('Must be a valid number');
      return { isValid: false, value: PRICE_CONFIG.MIN_VALUE, errors };
    }

    if (numValue < PRICE_CONFIG.MIN_VALUE) {
      errors.push('Cannot be negative');
      return { isValid: false, value: PRICE_CONFIG.MIN_VALUE, errors };
    }

    if (numValue > PRICE_CONFIG.MAX_VALUE) {
      errors.push(`Cannot exceed ₹${PRICE_CONFIG.MAX_VALUE.toLocaleString()}`);
      return { isValid: false, value: PRICE_CONFIG.MAX_VALUE, errors };
    }

    if (maxValue !== null && numValue > maxValue) {
      errors.push('Cannot be greater than maximum price');
      return { isValid: false, value: numValue, errors };
    }

    // Round to specified decimal places
    const roundedValue = Math.round(numValue * Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES)) / Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES);

    return { isValid: true, value: roundedValue, errors: [] };
  }

  function validateMaxPrice(value, minValue = null) {
    const errors = [];
    const numValue = parseFloat(value);

    if (value === '' || value === null || value === undefined) {
      return { isValid: true, value: 50000, errors: [] };
    }

    if (isNaN(numValue)) {
      errors.push('Must be a valid number');
      return { isValid: false, value: 50000, errors };
    }

    if (numValue < PRICE_CONFIG.MIN_VALUE) {
      errors.push('Cannot be negative');
      return { isValid: false, value: 50000, errors };
    }

    if (numValue > PRICE_CONFIG.MAX_VALUE) {
      errors.push(`Cannot exceed ₹${PRICE_CONFIG.MAX_VALUE.toLocaleString()}`);
      return { isValid: false, value: PRICE_CONFIG.MAX_VALUE, errors };
    }

    if (minValue !== null && numValue < minValue) {
      errors.push('Cannot be less than minimum price');
      return { isValid: false, value: numValue, errors };
    }

    // Round to specified decimal places
    const roundedValue = Math.round(numValue * Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES)) / Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES);

    return { isValid: true, value: roundedValue, errors: [] };
  }

  // Comprehensive price range validation
  function validatePriceRange() {
    const minValue = minPriceInput ? minPriceInput.value.trim() : document.getElementById('minPriceInput').value.trim();
    const maxValue = maxPriceInput ? maxPriceInput.value.trim() : document.getElementById('maxPriceInput').value.trim();

    const minValidation = validateMinPrice(minValue);
    const maxValidation = validateMaxPrice(maxValue);

    let finalMinPrice = minValidation.value;
    let finalMaxPrice = maxValidation.value;
    let allErrors = [];
    let isValid = true;

    // Collect individual input errors
    if (!minValidation.isValid) {
      isValid = false;
      allErrors = allErrors.concat(minValidation.errors.map(err => `Min price: ${err}`));
    }

    if (!maxValidation.isValid) {
      isValid = false;
      allErrors = allErrors.concat(maxValidation.errors.map(err => `Max price: ${err}`));
    }

    // Cross-validation between min and max
    if (minValidation.isValid && maxValidation.isValid) {
      if (finalMinPrice > finalMaxPrice) {
        isValid = false;
        allErrors.push('Minimum price cannot be greater than maximum price');
      }
    }

    return {
      isValid,
      minPrice: finalMinPrice,
      maxPrice: finalMaxPrice,
      errors: allErrors
    };
  }

  // Enhanced toast notification system
  function showPriceToast(type, title, message, duration = 4000) {
    // Remove existing toasts
    const existingToasts = document.querySelectorAll('.price-toast');
    existingToasts.forEach(toast => toast.remove());

    // Create toast element
    const toast = document.createElement('div');
    toast.className = `price-toast ${type}`;

    const iconMap = {
      error: 'ri-error-warning-line',
      warning: 'ri-alert-line',
      success: 'ri-check-line',
      info: 'ri-information-line'
    };

    toast.innerHTML = `
      <button class="price-toast-close" onclick="this.parentElement.remove()">×</button>
      <div class="price-toast-header">
        <i class="${iconMap[type] || iconMap.info}"></i>
        ${title}
      </div>
      <div class="price-toast-body">${message}</div>
    `;

    document.body.appendChild(toast);

    // Trigger show animation
    setTimeout(() => toast.classList.add('show'), 100);

    // Auto remove
    setTimeout(() => {
      if (toast.parentNode) {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
      }
    }, duration);
  }

  // Filter functions for server-side filtering and pagination
  function applyFilters() {
    const url = new URL(window.location.href);
    const params = url.searchParams;

    params.set('page', '1');

    // Handle category filters from dropdown
    const categorySelect = document.getElementById('categorySelect');
    const selectedCategories = Array.from(categorySelect.selectedOptions)
      .map(option => option.value)
      .filter(value => value !== '');

    params.delete('category');

    if (selectedCategories.length > 0) {
      selectedCategories.forEach(cat => params.append('category', cat));
    }

    // Handle brand filters from dropdown
    const brandSelect = document.getElementById('brandSelect');
    const selectedBrands = Array.from(brandSelect.selectedOptions)
      .map(option => option.value)
      .filter(value => value !== '');

    params.delete('brand');

    if (selectedBrands.length > 0) {
      selectedBrands.forEach(brand => params.append('brand', brand));
    }

    // Add loading state to prevent multiple submissions
    const applyButton = document.querySelector('.apply-filters-btn, button[onclick="applyFilters()"]');
    if (applyButton) {
      applyButton.classList.add('loading');
      applyButton.disabled = true;
    }

    // Comprehensive price validation before applying filters
    const priceValidation = validatePriceRange();
    if (!priceValidation.isValid) {
      // Remove loading state
      if (applyButton) {
        applyButton.classList.remove('loading');
        applyButton.disabled = false;
      }

      // Get current input elements
      const currentMinInput = minPriceInput || document.getElementById('minPriceInput');
      const currentMaxInput = maxPriceInput || document.getElementById('maxPriceInput');

      // Focus on first invalid input for accessibility
      if (currentMinInput && currentMinInput.classList.contains('error')) {
        currentMinInput.focus();
        currentMinInput.setAttribute('aria-invalid', 'true');
      } else if (currentMaxInput && currentMaxInput.classList.contains('error')) {
        currentMaxInput.focus();
        currentMaxInput.setAttribute('aria-invalid', 'true');
      }

      showPriceToast('error', 'Price Validation Error', priceValidation.errors.join(', '));

      // Announce error to screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'assertive');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Price validation failed: ${priceValidation.errors.join(', ')}`;
      document.body.appendChild(announcement);
      setTimeout(() => announcement.remove(), 1000);

      return; // Prevent form submission
    }

    // Clear any previous validation states
    const currentMinInput = minPriceInput || document.getElementById('minPriceInput');
    const currentMaxInput = maxPriceInput || document.getElementById('maxPriceInput');
    
    if (currentMinInput) currentMinInput.removeAttribute('aria-invalid');
    if (currentMaxInput) currentMaxInput.removeAttribute('aria-invalid');

    const minPrice = priceValidation.minPrice;
    const maxPrice = priceValidation.maxPrice;

    params.set('minPrice', minPrice);
    params.set('maxPrice', maxPrice);

    const sortValue = document.getElementById('sortSelect').value;
    params.set('sort', sortValue);

    // Show success feedback
    showPriceToast('success', 'Filters Applied', 'Searching products with your criteria...', 2000);

    window.location.href = url.toString();
  }

  function sortProducts() {
    const sortValue = document.getElementById('sortSelect').value;

    const url = new URL(window.location.href);
    url.searchParams.set('sort', sortValue);

    window.location.href = url.toString();
  }

  // Reset all filters function
  function resetFilters() {
    // Reset category dropdown
    const categorySelect = document.getElementById('categorySelect');
    categorySelect.selectedIndex = 0;
    
    // Reset brand dropdown
    const brandSelect = document.getElementById('brandSelect');
    brandSelect.selectedIndex = 0;

    // Reset price range with validation cleanup
    document.getElementById('minPriceInput').value = 0;
    document.getElementById('maxPriceInput').value = 50000;

    // Get current input elements
    const currentMinInput = minPriceInput || document.getElementById('minPriceInput');
    const currentMaxInput = maxPriceInput || document.getElementById('maxPriceInput');
    const currentMinError = minPriceError || document.getElementById('minPriceError');
    const currentMaxError = maxPriceError || document.getElementById('maxPriceError');
    const currentRangeError = priceRangeError || document.getElementById('priceRangeError');

    // Clear validation states
    if (currentMinInput) {
      currentMinInput.classList.remove('error', 'success');
      currentMinInput.removeAttribute('aria-invalid');
    }
    if (currentMaxInput) {
      currentMaxInput.classList.remove('error', 'success');
      currentMaxInput.removeAttribute('aria-invalid');
    }

    // Clear error messages
    if (currentMinError) {
      currentMinError.classList.remove('show');
      currentMinError.innerHTML = '';
    }
    if (currentMaxError) {
      currentMaxError.classList.remove('show');
      currentMaxError.innerHTML = '';
    }
    if (currentRangeError) {
      currentRangeError.classList.remove('show');
      currentRangeError.innerHTML = '';
    }

    // Show success feedback
    showPriceToast('info', 'Filters Reset', 'All filters have been cleared', 2000);

    // Reset sort to recommended
    document.getElementById('sortSelect').value = 'recommended';

    // Redirect to shop page without any filters
    window.location.href = '/shopPage';
  }

  // Toggle filters on mobile
  function toggleFilters() {
    const filterContent = document.getElementById('filterContent');
    const filterToggle = document.querySelector('.filter-toggle i');
    
    if (filterContent.classList.contains('show')) {
      filterContent.classList.remove('show');
      filterToggle.className = 'ri-arrow-down-s-line';
    } else {
      filterContent.classList.add('show');
      filterToggle.className = 'ri-arrow-up-s-line';
    }
  }

  // Initialize filters from URL parameters
  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Set category selections
    const categoryParams = urlParams.getAll('category');
    const categorySelect = document.getElementById('categorySelect');
    
    if (categoryParams.length > 0) {
      categorySelect.selectedIndex = -1;
      
      Array.from(categorySelect.options).forEach(option => {
        if (categoryParams.includes(option.value)) {
          option.selected = true;
        }
      });
    }

    // Set brand selections
    const brandParams = urlParams.getAll('brand');
    const brandSelect = document.getElementById('brandSelect');
    
    if (brandParams.length > 0) {
      brandSelect.selectedIndex = -1;
      
      Array.from(brandSelect.options).forEach(option => {
        if (brandParams.includes(option.value)) {
          option.selected = true;
        }
      });
    }

    // Set price values
    const minPrice = urlParams.get('minPrice');
    const maxPrice = urlParams.get('maxPrice');

    if (minPrice) {
      document.getElementById('minPriceInput').value = minPrice;
    }

    if (maxPrice) {
      document.getElementById('maxPriceInput').value = maxPrice;
    }

    const sortValue = urlParams.get('sort');
    if (sortValue) {
      document.getElementById('sortSelect').value = sortValue;
    }

    // Comprehensive price validation system - assign to global variables
    minPriceInput = document.getElementById('minPriceInput');
    maxPriceInput = document.getElementById('maxPriceInput');
    minPriceError = document.getElementById('minPriceError');
    maxPriceError = document.getElementById('maxPriceError');
    priceRangeError = document.getElementById('priceRangeError');

    // Validation configuration
    const PRICE_CONFIG = {
      MIN_VALUE: 0,
      MAX_VALUE: 1000000,
      MIN_RANGE_GAP: 10,
      DECIMAL_PLACES: 2
    };

    // Individual input validation functions
    function validateMinPrice(value, maxValue = null) {
      const errors = [];
      const numValue = parseFloat(value);

      if (value === '' || value === null || value === undefined) {
        return { isValid: true, value: PRICE_CONFIG.MIN_VALUE, errors: [] };
      }

      if (isNaN(numValue)) {
        errors.push('Must be a valid number');
        return { isValid: false, value: PRICE_CONFIG.MIN_VALUE, errors };
      }

      if (numValue < PRICE_CONFIG.MIN_VALUE) {
        errors.push('Cannot be negative');
        return { isValid: false, value: PRICE_CONFIG.MIN_VALUE, errors };
      }

      if (numValue > PRICE_CONFIG.MAX_VALUE) {
        errors.push(`Cannot exceed ₹${PRICE_CONFIG.MAX_VALUE.toLocaleString()}`);
        return { isValid: false, value: PRICE_CONFIG.MAX_VALUE, errors };
      }

      if (maxValue !== null && numValue > maxValue) {
        errors.push('Cannot be greater than maximum price');
        return { isValid: false, value: numValue, errors };
      }

      // Round to specified decimal places
      const roundedValue = Math.round(numValue * Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES)) / Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES);

      return { isValid: true, value: roundedValue, errors: [] };
    }

    function validateMaxPrice(value, minValue = null) {
      const errors = [];
      const numValue = parseFloat(value);

      if (value === '' || value === null || value === undefined) {
        return { isValid: true, value: 50000, errors: [] };
      }

      if (isNaN(numValue)) {
        errors.push('Must be a valid number');
        return { isValid: false, value: 50000, errors };
      }

      if (numValue < PRICE_CONFIG.MIN_VALUE) {
        errors.push('Cannot be negative');
        return { isValid: false, value: 50000, errors };
      }

      if (numValue > PRICE_CONFIG.MAX_VALUE) {
        errors.push(`Cannot exceed ₹${PRICE_CONFIG.MAX_VALUE.toLocaleString()}`);
        return { isValid: false, value: PRICE_CONFIG.MAX_VALUE, errors };
      }

      if (minValue !== null && numValue < minValue) {
        errors.push('Cannot be less than minimum price');
        return { isValid: false, value: numValue, errors };
      }

      // Round to specified decimal places
      const roundedValue = Math.round(numValue * Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES)) / Math.pow(10, PRICE_CONFIG.DECIMAL_PLACES);

      return { isValid: true, value: roundedValue, errors: [] };
    }

    // Comprehensive price range validation
    function validatePriceRange() {
      const minValue = minPriceInput.value.trim();
      const maxValue = maxPriceInput.value.trim();

      const minValidation = validateMinPrice(minValue);
      const maxValidation = validateMaxPrice(maxValue);

      let finalMinPrice = minValidation.value;
      let finalMaxPrice = maxValidation.value;
      let allErrors = [];
      let isValid = true;

      // Collect individual input errors
      if (!minValidation.isValid) {
        isValid = false;
        allErrors = allErrors.concat(minValidation.errors.map(err => `Min price: ${err}`));
      }

      if (!maxValidation.isValid) {
        isValid = false;
        allErrors = allErrors.concat(maxValidation.errors.map(err => `Max price: ${err}`));
      }

      // Cross-validation between min and max
      if (minValidation.isValid && maxValidation.isValid) {
        if (finalMinPrice > finalMaxPrice) {
          isValid = false;
          allErrors.push('Minimum price cannot be greater than maximum price');
        }
      }

      return {
        isValid,
        minPrice: finalMinPrice,
        maxPrice: finalMaxPrice,
        errors: allErrors
      };
    }

    // UI update functions
    function updateInputValidationUI(input, errorElement, validation) {
      // Clear previous states
      input.classList.remove('error', 'success');
      errorElement.classList.remove('show');
      errorElement.innerHTML = '';

      if (!validation.isValid) {
        input.classList.add('error');
        errorElement.innerHTML = `<i class="ri-error-warning-line"></i>${validation.errors[0]}`;
        errorElement.classList.add('show');
      } else if (input.value.trim() !== '') {
        input.classList.add('success');
      }

      // Update input value if it was corrected
      if (parseFloat(input.value) !== validation.value && validation.value !== null) {
        input.value = validation.value;
      }
    }

    function updatePriceRangeUI() {
      const validation = validatePriceRange();

      // Update individual input UIs
      const minValidation = validateMinPrice(minPriceInput.value.trim());
      const maxValidation = validateMaxPrice(maxPriceInput.value.trim());

      updateInputValidationUI(minPriceInput, minPriceError, minValidation);
      updateInputValidationUI(maxPriceInput, maxPriceError, maxValidation);

      // Update range error
      priceRangeError.classList.remove('show');
      priceRangeError.innerHTML = '';

      if (!validation.isValid && validation.errors.length > 0) {
        const rangeSpecificErrors = validation.errors.filter(err =>
          err.includes('greater than maximum') || err.includes('less than minimum')
        );

        if (rangeSpecificErrors.length > 0) {
          priceRangeError.innerHTML = `<i class="ri-alert-line"></i>${rangeSpecificErrors[0]}`;
          priceRangeError.classList.add('show');
        }
      }
    }

    // Real-time validation event listeners
    minPriceInput.addEventListener('input', debounce(updatePriceRangeUI, 300));
    maxPriceInput.addEventListener('input', debounce(updatePriceRangeUI, 300));
    minPriceInput.addEventListener('blur', updatePriceRangeUI);
    maxPriceInput.addEventListener('blur', updatePriceRangeUI);

    // Keyboard navigation support
    minPriceInput.addEventListener('keydown', handlePriceInputKeydown);
    maxPriceInput.addEventListener('keydown', handlePriceInputKeydown);

    function handlePriceInputKeydown(event) {
      // Allow: backspace, delete, tab, escape, enter
      if ([46, 8, 9, 27, 13].indexOf(event.keyCode) !== -1 ||
          // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
          (event.keyCode === 65 && event.ctrlKey === true) ||
          (event.keyCode === 67 && event.ctrlKey === true) ||
          (event.keyCode === 86 && event.ctrlKey === true) ||
          (event.keyCode === 88 && event.ctrlKey === true) ||
          // Allow: home, end, left, right, down, up
          (event.keyCode >= 35 && event.keyCode <= 40)) {
        return;
      }

      // Ensure that it is a number and stop the keypress
      if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && (event.keyCode < 96 || event.keyCode > 105)) {
        event.preventDefault();
      }

      // Handle Enter key to apply filters
      if (event.keyCode === 13) {
        event.preventDefault();
        applyFilters();
      }
    }

    // Debounce function to limit validation frequency
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Cart and Wishlist functionality
    const cartCountElement = document.querySelector('.cart-count');
    const wishlistCountElement = document.querySelector('.wishlist-count');

    // Add to cart functionality
    document.querySelectorAll('.add-to-cart').forEach(button => {
      button.addEventListener('click', async function() {
        const productId = this.dataset.productId;

        try {
          const response = await fetch('/api/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, quantity: 1 })
          });
          const result = await response.json();

          if (response.status === 401 || !result.success) {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: result.message || 'Please log in to add items to your cart',
              showConfirmButton: false,
              timer: 2000
            }).then(() => {
              window.location.href = '/login';
            });
          } else if (result.success) {
            if (cartCountElement) {
              cartCountElement.textContent = result.cartCount;
              cartCountElement.dataset.count = result.cartCount;
            }

            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'success',
              title: result.message,
              showConfirmButton: false,
              timer: 1500
            });
          } else {
            if (result.message === 'Please log in to add items to your cart' || result.requiresAuth) {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 2000
              }).then(() => {
                window.location.href = '/login';
              });
            } else {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 1500
              });
            }
          }
        } catch (error) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error adding to cart',
            showConfirmButton: false,
            timer: 1500
          });
        }
      });
    });

    // Wishlist functionality
    document.querySelectorAll('.btn-wishlist-shop').forEach(button => {
      button.addEventListener('click', async function() {
        const productId = this.dataset.productId;

        try {
          const response = await fetch('/api/wishlist/toggle', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
          });
          const result = await response.json();

          if (response.status === 401 || !result.success) {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: result.message || 'Please log in to manage your wishlist',
              showConfirmButton: false,
              timer: 2000
            }).then(() => {
              window.location.href = '/login';
            });
          } else if (result.success) {
            const icon = this.querySelector('i');
            if (result.isWishlisted) {
              icon.className = 'ri-heart-fill';
              this.classList.add('wishlisted');
            } else {
              icon.className = 'ri-heart-line';
              this.classList.remove('wishlisted');
            }

            if (wishlistCountElement) {
              wishlistCountElement.textContent = result.wishlistCount;
              wishlistCountElement.dataset.count = result.wishlistCount;
            }

            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'success',
              title: result.message,
              showConfirmButton: false,
              timer: 1500
            });
          } else {
            if (result.message === 'Please log in to manage your wishlist' || result.requiresAuth) {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 2000
              }).then(() => {
                window.location.href = '/login';
              });
            } else {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message,
                showConfirmButton: false,
                timer: 1500
              });
            }
          }
        } catch (error) {
          Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Error managing wishlist',
            showConfirmButton: false,
            timer: 1500
          });
        }
      });
    });

    // Enhanced toast notification system
    function showPriceToast(type, title, message, duration = 4000) {
      // Remove existing toasts
      const existingToasts = document.querySelectorAll('.price-toast');
      existingToasts.forEach(toast => toast.remove());

      // Create toast element
      const toast = document.createElement('div');
      toast.className = `price-toast ${type}`;

      const iconMap = {
        error: 'ri-error-warning-line',
        warning: 'ri-alert-line',
        success: 'ri-check-line',
        info: 'ri-information-line'
      };

      toast.innerHTML = `
        <button class="price-toast-close" onclick="this.parentElement.remove()">×</button>
        <div class="price-toast-header">
          <i class="${iconMap[type] || iconMap.info}"></i>
          ${title}
        </div>
        <div class="price-toast-body">${message}</div>
      `;

      document.body.appendChild(toast);

      // Trigger show animation
      setTimeout(() => toast.classList.add('show'), 100);

      // Auto remove
      setTimeout(() => {
        if (toast.parentNode) {
          toast.classList.remove('show');
          setTimeout(() => toast.remove(), 300);
        }
      }, duration);
    }

    // Initialize validation on page load
    setTimeout(updatePriceRangeUI, 100);
  });
</script>