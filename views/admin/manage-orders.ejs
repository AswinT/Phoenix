<%- include('../partials/admin/sidebar') %>

<div class="main-content">
  <div class="page-header">
    <div>
      <h1 class="page-title"><%= title %></h1>
      <p class="page-subtitle">Track, update and manage customer orders</p>
    </div>
    <div class="header-actions">
      <a href="/admin/orders/export" class="btn-primary">
        <i class="ri-download-line"></i>
        Export Orders
      </a>
    </div>
  </div>

  <div class="content-card">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2 class="chart-title">Filter Orders</h2>
      <div id="filter-status" class="filter-status">
        <!-- Filter status badges will be displayed here -->
      </div>
    </div>

    <form id="filter-form" action="/admin/orders" method="GET">
      <div class="filters">
        <div class="filter-group">
          <label class="form-label">Order Status</label>
          <select class="form-select" name="status" id="status-filter">
            <option value="" <%= filters.status === '' ? 'selected' : '' %>>All Statuses</option>
            <option value="Placed" <%= filters.status === 'Placed' ? 'selected' : '' %>>Pending</option>
            <option value="Processing" <%= filters.status === 'Processing' ? 'selected' : '' %>>Processing</option>
            <option value="Shipped" <%= filters.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="Delivered" <%= filters.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="Cancelled" <%= filters.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="Returned" <%= filters.status === 'Returned' ? 'selected' : '' %>>Returned</option>
            <option value="Partially Cancelled" <%= filters.status === 'Partially Cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
            <option value="Partially Returned" <%= filters.status === 'Partially Returned' ? 'selected' : '' %>>Partially Returned</option>
            <option value="Return Requested" <%= filters.status === 'Return Requested' ? 'selected' : '' %>>Return Requested</option>
            <option value="Partially Return Requested" <%= filters.status === 'Partially Return Requested' ? 'selected' : '' %>>Partially Return Requested</option>
            <option value="Pending Payment" <%= filters.status === 'Pending Payment' ? 'selected' : '' %>>Pending Payment</option>
          </select>
          <div class="invalid-feedback" id="status-error"></div>
        </div>

        <div class="filter-group">
          <label class="form-label">Payment Method</label>
          <select class="form-select" name="payment" id="payment-filter">
            <option value="" <%= filters.payment === '' ? 'selected' : '' %>>All Methods</option>
            <option value="COD" <%= filters.payment === 'COD' ? 'selected' : '' %>>Cash on Delivery</option>
            <option value="Card" <%= filters.payment === 'Card' ? 'selected' : '' %>>Credit/Debit Card</option>
            <option value="Wallet" <%= filters.payment === 'Wallet' ? 'selected' : '' %>>Wallet</option>
            <option value="UPI" <%= filters.payment === 'UPI' ? 'selected' : '' %>>UPI/Net Banking</option>
          </select>
          <div class="invalid-feedback" id="payment-error"></div>
        </div>

        <div class="filter-group">
          <label class="form-label">Order Amount</label>
          <div class="d-flex gap-2">
            <input
              type="number"
              placeholder="Min ₹"
              class="form-control"
              name="min_amount"
              id="min-amount"
              value="<%= filters.min_amount %>"
              min="0"
              step="0.01"
            />
            <input
              type="number"
              placeholder="Max ₹"
              class="form-control"
              name="max_amount"
              id="max-amount"
              value="<%= filters.max_amount %>"
              min="0"
              step="0.01"
            />
          </div>
          <div class="invalid-feedback" id="amount-error"></div>
        </div>

        <div class="filter-group">
          <label class="form-label">Order Date</label>
          <div class="d-flex gap-2">
            <input
              type="date"
              class="form-control"
              name="start_date"
              id="start-date"
              value="<%= filters.start_date %>"
            />
            <input
              type="date"
              class="form-control"
              name="end_date"
              id="end-date"
              value="<%= filters.end_date %>"
            />
          </div>
          <div class="invalid-feedback" id="date-error"></div>
        </div>
      </div>

      <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="filter-info">
          <small class="text-muted" id="filter-info">
            <% if (typeof filterErrors !== 'undefined' && filterErrors.length > 0) { %>
              <span class="text-danger">
                <i class="ri-error-warning-line me-1"></i>
                <%= filterErrors.join(', ') %>
              </span>
            <% } else if (orders && orders.length > 0) { %>
              Showing <%= orders.length %> of <%= totalOrders || 0 %> orders
              <% if (hasActiveFilters) { %>
                <span class="text-info">(filtered)</span>
              <% } %>
            <% } else if (hasActiveFilters) { %>
              <span class="text-warning">No orders match the current filters</span>
            <% } else { %>
              No orders found
            <% } %>
          </small>
        </div>
        <div class="filter-actions d-flex gap-2">
          <button type="button" id="reset-filters" class="btn-secondary">
            <i class="ri-refresh-line me-1"></i>Reset Filters
          </button>
          <button type="submit" id="apply-filters" class="btn-primary">
            <i class="ri-filter-3-line me-1"></i>Apply Filters
          </button>
        </div>
      </div>
    </form>

    <!-- Loading overlay -->
    <div id="filter-loading" class="filter-loading" style="display: none;">
      <div class="loading-spinner">
        <i class="ri-loader-4-line spin"></i>
        <span>Applying filters...</span>
      </div>
    </div>
  </div>

  <div class="table-container">
    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>Order ID</th>
            <th>Customer</th>
            <th>Date</th>
            <th>Total</th>
            <th class="d-none-mobile">Payment Method</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (orders && orders.length > 0) { %>
            <% orders.forEach(order => { %>
              <tr>
                <td>
                  <div class="fw-semibold">#<%= order.orderNumber %></div>
                  <div class="small text-muted d-md-none"><%= order.paymentMethod || 'N/A' %></div>
                </td>
                <td><%= order.customerName %></td>
                <td><%= order.formattedDate %></td>
                <td><%= order.formattedTotal %></td>
                <td class="d-none-mobile"><%= order.paymentMethod || 'N/A' %></td>
                <td>
                  <% 
                    let statusClass = '';
                    switch(order.orderStatus) {
                      case 'Pending':
                      case 'Placed':
                        statusClass = 'status-badge active';
                        break;
                      case 'Processing':
                        statusClass = 'status-badge active';
                        break;
                      case 'Shipped':
                        statusClass = 'status-badge active';
                        break;
                      case 'Delivered':
                        statusClass = 'status-badge active';
                        break;
                      case 'Cancelled':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Returned':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Partially Cancelled':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Partially Returned':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Return Requested':
                        statusClass = 'status-badge active';
                        break;
                      case 'Partially Return Requested':
                        statusClass = 'status-badge active';
                        break;
                      case 'Pending Payment':
                        statusClass = 'status-badge blocked';
                        break;
                      default:
                        statusClass = 'status-badge active';
                    }
                  %>
                  <span class="<%= statusClass %>"><%= order.orderStatus %></span>
                </td>
                <td>
                  <div class="d-flex flex-column gap-2">
                    <div class="d-flex align-items-center gap-2">
                      <%
                        // Status transitions logic
                        let allowedStatuses = [];
                        let nextStatus = '';
                        if (order.orderStatus === 'Placed') {
                          nextStatus = 'Processing';
                          allowedStatuses = ['Processing', 'Cancelled'];
                        } else if (order.orderStatus === 'Processing') {
                          nextStatus = 'Shipped';
                          allowedStatuses = ['Shipped', 'Cancelled'];
                        } else if (order.orderStatus === 'Shipped') {
                          nextStatus = 'Delivered';
                          allowedStatuses = ['Delivered'];
                        } else if (order.orderStatus === 'Partially Cancelled') {
                          nextStatus = 'Processing';
                          allowedStatuses = ['Processing', 'Shipped', 'Delivered', 'Cancelled'];
                        } else if (order.orderStatus === 'Pending Payment') {
                          nextStatus = 'Cancelled';
                          allowedStatuses = ['Cancelled'];
                        } else {
                          allowedStatuses = [];
                        }

                        const isTerminalStatus = ['Delivered', 'Cancelled', 'Returned', 'Partially Returned', 'Return Requested', 'Partially Return Requested'].includes(order.orderStatus);
                      %>
                      
                      <% if (!isTerminalStatus) { %>
                        <select class="form-select form-select-sm" id="status-<%= order._id %>" style="min-width: 120px;">
                          <option value="<%= order.orderStatus %>"><%= order.orderStatus %></option>
                          <% if (nextStatus) { %>
                            <option value="<%= nextStatus %>" selected><%= nextStatus %></option>
                          <% } %>
                          <% allowedStatuses.forEach(status => { %>
                            <% if (status !== nextStatus && status !== order.orderStatus) { %>
                              <option value="<%= status %>"><%= status %></option>
                            <% } %>
                          <% }); %>
                        </select>
                        <button class="btn-primary btn-sm" data-order-id="<%= order._id %>">
                          <% if (nextStatus) { %>
                            Update to <%= nextStatus %>
                          <% } else { %>
                            Update
                          <% } %>
                        </button>
                      <% } else { %>
                        <span class="text-muted small">
                          <i class="ri-information-line"></i>
                          <%
                            let statusMessage = '';
                            if (order.orderStatus.includes('Return')) {
                              statusMessage = 'Use Return Management';
                            } else if (order.orderStatus === 'Delivered') {
                              statusMessage = 'Order Complete';
                            } else if (order.orderStatus === 'Cancelled') {
                              statusMessage = 'Order Cancelled';
                            } else if (order.orderStatus === 'Returned') {
                              statusMessage = 'Order Returned';
                            } else {
                              statusMessage = 'Final Status';
                            }
                          %>
                          <%= statusMessage %>
                        </span>
                      <% } %>
                    </div>
                    
                    <div class="d-flex gap-1">
                      <a href="/admin/orders/<%= order._id %>" class="btn-action btn-edit" title="View Order">
                        <i class="ri-eye-line"></i>
                      </a>
                      <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Placed') { %>
                      <a href="/admin/orders/<%= order._id %>/invoice" class="btn-action btn-edit" title="Download Invoice">
                        <i class="ri-file-download-line"></i>
                      </a>
                      <% } %>
                      <% if (order.orderStatus === 'Shipped') { %>
                      <a href="/admin/orders/<%= order._id %>/track" class="btn-action btn-edit" title="Track Order">
                        <i class="ri-truck-line"></i>
                      </a>
                      <% } %>
                    </div>
                  </div>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="7" class="text-center py-5">
                <div class="no-results">
                  <% if (typeof filterErrors !== 'undefined' && filterErrors.length > 0) { %>
                    <i class="ri-error-warning-line text-danger"></i>
                    <h5 class="text-danger mb-2">Filter Error</h5>
                    <p class="text-muted mb-3">
                      <%= filterErrors.join('. ') %>
                    </p>
                    <button type="button" onclick="window.location.href='/admin/orders'" class="btn btn-outline-primary">
                      <i class="ri-refresh-line me-1"></i>Clear Filters
                    </button>
                  <% } else if (hasActiveFilters) { %>
                    <i class="ri-search-line text-warning"></i>
                    <h5 class="text-muted mb-2">No Matching Orders</h5>
                    <p class="text-muted mb-3">
                      No orders match your current filter criteria.<br>
                      Try adjusting your filters or clearing them to see all orders.
                    </p>
                    <div class="d-flex gap-2 justify-content-center">
                      <button type="button" onclick="window.location.href='/admin/orders'" class="btn btn-outline-primary">
                        <i class="ri-refresh-line me-1"></i>Clear Filters
                      </button>
                      <button type="button" onclick="document.getElementById('reset-filters').click()" class="btn btn-outline-secondary">
                        <i class="ri-filter-off-line me-1"></i>Reset Filters
                      </button>
                    </div>
                  <% } else { %>
                    <i class="ri-inbox-line text-muted"></i>
                    <h5 class="text-muted mb-2">No Orders Yet</h5>
                    <p class="text-muted mb-3">
                      There are no orders in the system yet.<br>
                      Orders will appear here once customers start placing them.
                    </p>
                    <a href="/admin/dashboard" class="btn btn-outline-primary">
                      <i class="ri-dashboard-line me-1"></i>Go to Dashboard
                    </a>
                  <% } %>
                </div>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <% if (pagination && pagination.totalPages > 0) { %>
      <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="text-muted small">
          Showing <%= orders.length %> of <%= pagination.totalPages * 10 %> orders 
          (Page <%= pagination.currentPage %> of <%= pagination.totalPages %>)
        </div>
        <nav>
          <ul class="pagination mb-0">
            <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
              <a href="?page=<%= pagination.prevPage %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                <i class="ri-arrow-left-line"></i> Previous
              </a>
            </li>
            
            <% pagination.pages.forEach(pageNum => { %>
              <% if (pagination.pages.length <= 7 || 
                    pageNum === 1 || 
                    pageNum === pagination.totalPages || 
                    (pageNum >= pagination.currentPage - 1 && pageNum <= pagination.currentPage + 1)) { %>
                <li class="page-item <%= pagination.currentPage === pageNum ? 'active' : '' %>">
                  <a href="?page=<%= pageNum %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                    <%= pageNum %>
                  </a>
                </li>
              <% } else if (
                (pageNum === 2 && pagination.currentPage > 3) ||
                (pageNum === pagination.totalPages - 1 && pagination.currentPage < pagination.totalPages - 2)
              ) { %>
                <li class="page-item disabled">
                  <span class="page-link">...</span>
                </li>
              <% } %>
            <% }) %>
            
            <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
              <a href="?page=<%= pagination.nextPage %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                Next <i class="ri-arrow-right-line"></i>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    <% } %>
  </div>
</div>

<style>
  .filter-status {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .filter-badge {
    background: #e3f2fd;
    color: #1976d2;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .filter-badge .remove-filter {
    cursor: pointer;
    margin-left: 0.25rem;
    opacity: 0.7;
  }

  .filter-badge .remove-filter:hover {
    opacity: 1;
  }

  .filter-loading {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    border-radius: 0.5rem;
  }

  .loading-spinner {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #4361EE;
    font-weight: 500;
  }

  .spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .content-card {
    position: relative;
  }

  .invalid-feedback {
    display: none;
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
  }

  .form-control.is-invalid,
  .form-select.is-invalid {
    border-color: #dc3545;
  }

  .form-control.is-invalid ~ .invalid-feedback,
  .form-select.is-invalid ~ .invalid-feedback {
    display: block;
  }

  .filter-info {
    color: #6c757d;
    font-size: 0.875rem;
  }

  .no-results {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
  }

  .no-results i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize filter functionality
    initializeFilters();

    // Display current filter status
    updateFilterStatus();

    // Filter form submission
    const filterForm = document.getElementById('filter-form');
    const applyButton = document.getElementById('apply-filters');
    const resetButton = document.getElementById('reset-filters');

    // Form validation and submission
    filterForm.addEventListener('submit', function(e) {
      e.preventDefault();

      if (validateFilters()) {
        showLoading(true);

        // Build query parameters
        const formData = new FormData(filterForm);
        const params = new URLSearchParams();

        for (let [key, value] of formData.entries()) {
          if (value.trim() !== '') {
            params.append(key, value.trim());
          }
        }

        // Always start from page 1 when applying filters
        params.set('page', '1');

        // Navigate to filtered results
        window.location.href = '/admin/orders?' + params.toString();
      }
    });

    // Reset filters
    resetButton.addEventListener('click', function(e) {
      e.preventDefault();

      Swal.fire({
        title: 'Reset Filters',
        text: 'Are you sure you want to clear all filters?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#4361EE',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, reset filters',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          showLoading(true);
          window.location.href = '/admin/orders?page=1';
        }
      });
    });
    
    // Status update functionality
    document.querySelectorAll('.btn-primary.btn-sm').forEach(button => {
      button.addEventListener('click', function() {
        const orderId = this.getAttribute('data-order-id');
        const statusSelect = document.getElementById(`status-${orderId}`);
        const newStatus = statusSelect.value;
        
        // Show confirmation dialog
        Swal.fire({
          title: 'Update Order Status',
          text: `Are you sure you want to update this order status to ${newStatus}?`,
          icon: 'question',
          showCancelButton: true,
          confirmButtonColor: '#4361EE',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, update it!'
        }).then((result) => {
          if (result.isConfirmed) {
            // Send AJAX request to update status
            fetch(`/admin/orders/${orderId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: newStatus }),
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to update order status');
              }
              return response.json();
            })
            .then(data => {
              // Success message
              Swal.fire({
                title: 'Updated!',
                text: `Order status has been updated to ${newStatus}`,
                icon: 'success',
                confirmButtonColor: '#4361EE'
              }).then(() => {
                // Refresh the page to show updated status
                window.location.reload();
              });
            })
            .catch(error => {
              // Error message
              Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonColor: '#4361EE'
              });
            });
          }
        });
      });
    });
    
    // Export Orders
    document.querySelector('.btn-primary[href*="export"]').addEventListener('click', function(e) {
      e.preventDefault();

      Swal.fire({
        title: 'Export Orders',
        text: 'Exporting orders data as Excel file with current filters applied',
        icon: 'info',
        confirmButtonColor: '#4361EE',
        showCancelButton: true,
        cancelButtonColor: '#d33',
        confirmButtonText: 'Export Excel',
        cancelButtonText: 'Cancel',
        showLoaderOnConfirm: true,
        preConfirm: () => {
          return new Promise((resolve) => {
            // Build export URL with current filters
            const params = new URLSearchParams(window.location.search);
            const exportUrl = '/admin/orders/export?' + params.toString();

            // Create a temporary link to trigger download
            const link = document.createElement('a');
            link.href = exportUrl;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // Resolve after a short delay to show success
            setTimeout(() => {
              resolve();
            }, 1000);
          });
        }
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: 'Export Started!',
            text: 'Your file download should begin shortly.',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
          });
        }
      }).catch((error) => {
        Swal.fire({
          title: 'Export Failed',
          text: 'There was an error exporting the orders. Please try again.',
          icon: 'error',
          confirmButtonColor: '#4361EE'
        });
      });
    });

    // Initialize filter functionality
    function initializeFilters() {
      // Set max date for date inputs to today
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('start-date').setAttribute('max', today);
      document.getElementById('end-date').setAttribute('max', today);

      // Add real-time validation
      document.getElementById('min-amount').addEventListener('input', validateAmountRange);
      document.getElementById('max-amount').addEventListener('input', validateAmountRange);
      document.getElementById('start-date').addEventListener('change', validateDateRange);
      document.getElementById('end-date').addEventListener('change', validateDateRange);
    }

    // Validate all filters
    function validateFilters() {
      let isValid = true;

      // Clear previous errors
      clearValidationErrors();

      // Validate amount range
      if (!validateAmountRange()) isValid = false;

      // Validate date range
      if (!validateDateRange()) isValid = false;

      return isValid;
    }

    // Validate amount range
    function validateAmountRange() {
      const minAmount = parseFloat(document.getElementById('min-amount').value) || 0;
      const maxAmount = parseFloat(document.getElementById('max-amount').value) || Infinity;

      if (minAmount < 0) {
        showValidationError('min-amount', 'Minimum amount cannot be negative');
        return false;
      }

      if (maxAmount < 0) {
        showValidationError('max-amount', 'Maximum amount cannot be negative');
        return false;
      }

      if (minAmount > 0 && maxAmount < Infinity && minAmount > maxAmount) {
        showValidationError('amount-error', 'Minimum amount cannot be greater than maximum amount');
        return false;
      }

      return true;
    }

    // Validate date range
    function validateDateRange() {
      const startDate = document.getElementById('start-date').value;
      const endDate = document.getElementById('end-date').value;

      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        const today = new Date();
        today.setHours(23, 59, 59, 999);

        if (start > end) {
          showValidationError('date-error', 'Start date cannot be after end date');
          return false;
        }

        if (start > today || end > today) {
          showValidationError('date-error', 'Dates cannot be in the future');
          return false;
        }
      }

      return true;
    }

    // Show validation error
    function showValidationError(elementId, message) {
      const element = document.getElementById(elementId);
      if (element) {
        if (element.classList.contains('form-control') || element.classList.contains('form-select')) {
          element.classList.add('is-invalid');
        }

        const errorElement = document.getElementById(elementId.replace('-', '-') + (elementId.includes('-error') ? '' : '-error'));
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }
    }

    // Clear validation errors
    function clearValidationErrors() {
      document.querySelectorAll('.form-control, .form-select').forEach(el => {
        el.classList.remove('is-invalid');
      });
      document.querySelectorAll('.invalid-feedback').forEach(el => {
        el.style.display = 'none';
        el.textContent = '';
      });
    }

    // Show/hide loading state
    function showLoading(show) {
      const loadingElement = document.getElementById('filter-loading');
      const applyButton = document.getElementById('apply-filters');
      const resetButton = document.getElementById('reset-filters');

      if (show) {
        loadingElement.style.display = 'flex';
        applyButton.disabled = true;
        resetButton.disabled = true;
        applyButton.innerHTML = '<i class="ri-loader-4-line spin me-1"></i>Applying...';
      } else {
        loadingElement.style.display = 'none';
        applyButton.disabled = false;
        resetButton.disabled = false;
        applyButton.innerHTML = '<i class="ri-filter-3-line me-1"></i>Apply Filters';
      }
    }

    // Update filter status display
    function updateFilterStatus() {
      const filterStatus = document.getElementById('filter-status');
      const urlParams = new URLSearchParams(window.location.search);
      const badges = [];

      // Status filter
      const status = urlParams.get('status');
      if (status) {
        const statusText = status === 'Placed' ? 'Pending' : status;
        badges.push(createFilterBadge('Status', statusText, 'status'));
      }

      // Payment filter
      const payment = urlParams.get('payment');
      if (payment) {
        badges.push(createFilterBadge('Payment', payment, 'payment'));
      }

      // Amount filter
      const minAmount = urlParams.get('min_amount');
      const maxAmount = urlParams.get('max_amount');
      if (minAmount || maxAmount) {
        const amountText = `₹${minAmount || '0'} - ₹${maxAmount || '∞'}`;
        badges.push(createFilterBadge('Amount', amountText, 'amount'));
      }

      // Date filter
      const startDate = urlParams.get('start_date');
      const endDate = urlParams.get('end_date');
      if (startDate || endDate) {
        const dateText = `${startDate || '...'} to ${endDate || '...'}`;
        badges.push(createFilterBadge('Date', dateText, 'date'));
      }

      filterStatus.innerHTML = badges.join('');
    }

    // Create filter badge
    function createFilterBadge(label, value, type) {
      return `
        <span class="filter-badge">
          <strong>${label}:</strong> ${value}
          <i class="ri-close-line remove-filter" onclick="removeFilter('${type}')" title="Remove filter"></i>
        </span>
      `;
    }

    // Remove individual filter
    window.removeFilter = function(type) {
      const urlParams = new URLSearchParams(window.location.search);

      switch(type) {
        case 'status':
          urlParams.delete('status');
          break;
        case 'payment':
          urlParams.delete('payment');
          break;
        case 'amount':
          urlParams.delete('min_amount');
          urlParams.delete('max_amount');
          break;
        case 'date':
          urlParams.delete('start_date');
          urlParams.delete('end_date');
          break;
      }

      urlParams.set('page', '1');
      window.location.href = '/admin/orders?' + urlParams.toString();
    };

    // Preserve filter parameters in pagination links
    document.querySelectorAll('.pagination a').forEach(link => {
      link.addEventListener('click', function(e) {
        if (this.closest('.page-item').classList.contains('disabled')) {
          e.preventDefault();
          return;
        }
      });
    });
  });
</script>

<style>
/* Additional styles for order management specific components */
.form-select-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

/* Status badge animations */
.status-badge.blocked {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .filters {
    grid-template-columns: 1fr;
  }
  
  .d-flex.gap-2 {
    flex-direction: column;
    gap: 0.5rem !important;
  }
  
  .table td {
    padding: 0.75rem 0.5rem;
  }
  
  .btn-action {
    width: 28px;
    height: 28px;
    font-size: 0.75rem;
  }
}

@media (max-width: 576px) {
  .d-flex.flex-column.gap-2 {
    align-items: flex-start;
  }
  
  .form-select-sm {
    width: 100%;
    margin-bottom: 0.5rem;
  }
  
  .btn-sm {
    width: 100%;
  }
}
</style>