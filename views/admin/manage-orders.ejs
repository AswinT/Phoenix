<%- include('../partials/admin/sidebar') %>

<div class="main-content">
  <div class="page-header">
    <div>
      <h1 class="page-title"><%= title %></h1>
      <p class="page-subtitle">Track, update and manage customer orders</p>
    </div>
    <div class="header-actions">
      <a href="/admin/orders/export" class="btn-primary">
        <i class="ri-download-line"></i>
        Export Orders
      </a>
    </div>
  </div>

  <div class="content-card">
    <h2 class="chart-title">Filter Orders</h2>
    <form id="filter-form" action="/admin/getOrders" method="GET">
      <div class="filters">
        <div class="filter-group">
          <label class="form-label">Order Status</label>
          <select class="form-select" name="status">
            <option value="" <%= filters.status === '' ? 'selected' : '' %>>All Statuses</option>
            <option value="Pending" <%= filters.status === 'Placed' ? 'selected' : '' %>>Pending</option>
            <option value="Processing" <%= filters.status === 'Processing' ? 'selected' : '' %>>Processing</option>
            <option value="Shipped" <%= filters.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="Delivered" <%= filters.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="Cancelled" <%= filters.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="Returned" <%= filters.status === 'Returned' ? 'selected' : '' %>>Returned</option>
            <option value="Partially Cancelled" <%= filters.status === 'Partially Cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
            <option value="Partially Returned" <%= filters.status === 'Partially Returned' ? 'selected' : '' %>>Partially Returned</option>
            <option value="Return Requested" <%= filters.status === 'Return Requested' ? 'selected' : '' %>>Return Requested</option>
            <option value="Partially Return Requested" <%= filters.status === 'Partially Return Requested' ? 'selected' : '' %>>Partially Return Requested</option>
            <option value="Pending Payment" <%= filters.status === 'Pending Payment' ? 'selected' : '' %>>Pending Payment</option>
          </select>
        </div>

        <div class="filter-group">
          <label class="form-label">Payment Method</label>
          <select class="form-select" name="payment">
            <option value="" <%= filters.payment === '' ? 'selected' : '' %>>All Methods</option>
            <option value="COD" <%= filters.payment === 'COD' ? 'selected' : '' %>>Cash on Delivery</option>
            <option value="CARD" <%= filters.payment === 'Card' ? 'selected' : '' %>>Credit/Debit Card</option>
            <option value="WALLET" <%= filters.payment === 'Wallet' ? 'selected' : '' %>>Wallet</option>
            <option value="UPI" <%= filters.payment === 'UPI' ? 'selected' : '' %>>UPI/Net Banking</option>
          </select>
        </div>

        <div class="filter-group">
          <label class="form-label">Order Amount</label>
          <div class="d-flex gap-2">
            <input
              type="number"
              placeholder="Min ₹"
              class="form-control"
              name="min_amount"
              value="<%= filters.min_amount %>"
            />
            <input
              type="number"
              placeholder="Max ₹"
              class="form-control"
              name="max_amount"
              value="<%= filters.max_amount %>"
            />
          </div>
        </div>

        <div class="filter-group">
          <label class="form-label">Order Date</label>
          <div class="d-flex gap-2">
            <input
              type="date"
              class="form-control"
              name="start_date"
              value="<%= filters.start_date %>"
            />
            <input
              type="date"
              class="form-control"
              name="end_date"
              value="<%= filters.end_date %>"
            />
          </div>
        </div>
      </div>

      <div class="d-flex justify-content-end gap-2 mt-3">
        <button type="reset" class="btn-secondary">Reset Filters</button>
        <button type="submit" class="btn-primary">Apply Filters</button>
      </div>
    </form>
  </div>

  <div class="table-container">
    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>Order ID</th>
            <th>Customer</th>
            <th>Date</th>
            <th>Total</th>
            <th class="d-none-mobile">Payment Method</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (orders && orders.length > 0) { %>
            <% orders.forEach(order => { %>
              <tr>
                <td>
                  <div class="fw-semibold">#<%= order.orderNumber %></div>
                  <div class="small text-muted d-md-none"><%= order.paymentMethod || 'N/A' %></div>
                </td>
                <td><%= order.customerName %></td>
                <td><%= order.formattedDate %></td>
                <td><%= order.formattedTotal %></td>
                <td class="d-none-mobile"><%= order.paymentMethod || 'N/A' %></td>
                <td>
                  <% 
                    let statusClass = '';
                    switch(order.orderStatus) {
                      case 'Pending':
                      case 'Placed':
                        statusClass = 'status-badge active';
                        break;
                      case 'Processing':
                        statusClass = 'status-badge active';
                        break;
                      case 'Shipped':
                        statusClass = 'status-badge active';
                        break;
                      case 'Delivered':
                        statusClass = 'status-badge active';
                        break;
                      case 'Cancelled':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Returned':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Partially Cancelled':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Partially Returned':
                        statusClass = 'status-badge blocked';
                        break;
                      case 'Return Requested':
                        statusClass = 'status-badge active';
                        break;
                      case 'Partially Return Requested':
                        statusClass = 'status-badge active';
                        break;
                      case 'Pending Payment':
                        statusClass = 'status-badge blocked';
                        break;
                      default:
                        statusClass = 'status-badge active';
                    }
                  %>
                  <span class="<%= statusClass %>"><%= order.orderStatus %></span>
                </td>
                <td>
                  <div class="d-flex flex-column gap-2">
                    <div class="d-flex align-items-center gap-2">
                      <%
                        // Status transitions logic
                        let allowedStatuses = [];
                        let nextStatus = '';
                        if (order.orderStatus === 'Placed') {
                          nextStatus = 'Processing';
                          allowedStatuses = ['Processing', 'Cancelled'];
                        } else if (order.orderStatus === 'Processing') {
                          nextStatus = 'Shipped';
                          allowedStatuses = ['Shipped', 'Cancelled'];
                        } else if (order.orderStatus === 'Shipped') {
                          nextStatus = 'Delivered';
                          allowedStatuses = ['Delivered'];
                        } else if (order.orderStatus === 'Partially Cancelled') {
                          nextStatus = 'Processing';
                          allowedStatuses = ['Processing', 'Shipped', 'Delivered', 'Cancelled'];
                        } else if (order.orderStatus === 'Pending Payment') {
                          nextStatus = 'Cancelled';
                          allowedStatuses = ['Cancelled'];
                        } else {
                          allowedStatuses = [];
                        }

                        const isTerminalStatus = ['Delivered', 'Cancelled', 'Returned', 'Partially Returned', 'Return Requested', 'Partially Return Requested'].includes(order.orderStatus);
                      %>
                      
                      <% if (!isTerminalStatus) { %>
                        <select class="form-select form-select-sm" id="status-<%= order._id %>" style="min-width: 120px;">
                          <option value="<%= order.orderStatus %>"><%= order.orderStatus %></option>
                          <% if (nextStatus) { %>
                            <option value="<%= nextStatus %>" selected><%= nextStatus %></option>
                          <% } %>
                          <% allowedStatuses.forEach(status => { %>
                            <% if (status !== nextStatus && status !== order.orderStatus) { %>
                              <option value="<%= status %>"><%= status %></option>
                            <% } %>
                          <% }); %>
                        </select>
                        <button class="btn-primary btn-sm" data-order-id="<%= order._id %>">
                          <% if (nextStatus) { %>
                            Update to <%= nextStatus %>
                          <% } else { %>
                            Update
                          <% } %>
                        </button>
                      <% } else { %>
                        <span class="text-muted small">
                          <i class="ri-information-line"></i>
                          <%
                            let statusMessage = '';
                            if (order.orderStatus.includes('Return')) {
                              statusMessage = 'Use Return Management';
                            } else if (order.orderStatus === 'Delivered') {
                              statusMessage = 'Order Complete';
                            } else if (order.orderStatus === 'Cancelled') {
                              statusMessage = 'Order Cancelled';
                            } else if (order.orderStatus === 'Returned') {
                              statusMessage = 'Order Returned';
                            } else {
                              statusMessage = 'Final Status';
                            }
                          %>
                          <%= statusMessage %>
                        </span>
                      <% } %>
                    </div>
                    
                    <div class="d-flex gap-1">
                      <a href="/admin/orders/<%= order._id %>" class="btn-action btn-edit" title="View Order">
                        <i class="ri-eye-line"></i>
                      </a>
                      <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Placed') { %>
                      <a href="/admin/orders/<%= order._id %>/invoice" class="btn-action btn-edit" title="Download Invoice">
                        <i class="ri-file-download-line"></i>
                      </a>
                      <% } %>
                      <% if (order.orderStatus === 'Shipped') { %>
                      <a href="/admin/orders/<%= order._id %>/track" class="btn-action btn-edit" title="Track Order">
                        <i class="ri-truck-line"></i>
                      </a>
                      <% } %>
                    </div>
                  </div>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="7" class="text-center py-4">
                <i class="ri-inbox-line fs-1 d-block mb-2 text-muted"></i>
                <span class="text-muted">No orders found</span>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <% if (pagination && pagination.totalPages > 0) { %>
      <div class="d-flex justify-content-between align-items-center mt-3">
        <div class="text-muted small">
          Showing <%= orders.length %> of <%= pagination.totalPages * 10 %> orders 
          (Page <%= pagination.currentPage %> of <%= pagination.totalPages %>)
        </div>
        <nav>
          <ul class="pagination mb-0">
            <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
              <a href="?page=<%= pagination.prevPage %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                <i class="ri-arrow-left-line"></i> Previous
              </a>
            </li>
            
            <% pagination.pages.forEach(pageNum => { %>
              <% if (pagination.pages.length <= 7 || 
                    pageNum === 1 || 
                    pageNum === pagination.totalPages || 
                    (pageNum >= pagination.currentPage - 1 && pageNum <= pagination.currentPage + 1)) { %>
                <li class="page-item <%= pagination.currentPage === pageNum ? 'active' : '' %>">
                  <a href="?page=<%= pageNum %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                    <%= pageNum %>
                  </a>
                </li>
              <% } else if (
                (pageNum === 2 && pagination.currentPage > 3) ||
                (pageNum === pagination.totalPages - 1 && pagination.currentPage < pagination.totalPages - 2)
              ) { %>
                <li class="page-item disabled">
                  <span class="page-link">...</span>
                </li>
              <% } %>
            <% }) %>
            
            <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
              <a href="?page=<%= pagination.nextPage %>&status=<%= filters.status %>&payment=<%= filters.payment %>&min_amount=<%= filters.min_amount %>&max_amount=<%= filters.max_amount %>&start_date=<%= filters.start_date %>&end_date=<%= filters.end_date %>" class="page-link">
                Next <i class="ri-arrow-right-line"></i>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    <% } %>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Filter form submission
    const filterForm = document.getElementById('filter-form');
    
    // Reset filters
    filterForm.addEventListener('reset', function(e) {
      e.preventDefault();

      Swal.fire({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 1500,
        icon: 'info',
        title: 'Filters have been reset',
      }).then(() => {
        window.location.href = '/admin/orders?page=1';
      });
    });
    
    // Status update functionality
    document.querySelectorAll('.btn-primary.btn-sm').forEach(button => {
      button.addEventListener('click', function() {
        const orderId = this.getAttribute('data-order-id');
        const statusSelect = document.getElementById(`status-${orderId}`);
        const newStatus = statusSelect.value;
        
        // Show confirmation dialog
        Swal.fire({
          title: 'Update Order Status',
          text: `Are you sure you want to update this order status to ${newStatus}?`,
          icon: 'question',
          showCancelButton: true,
          confirmButtonColor: '#4361EE',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, update it!'
        }).then((result) => {
          if (result.isConfirmed) {
            // Send AJAX request to update status
            fetch(`/admin/orders/${orderId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ status: newStatus }),
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to update order status');
              }
              return response.json();
            })
            .then(data => {
              // Success message
              Swal.fire({
                title: 'Updated!',
                text: `Order status has been updated to ${newStatus}`,
                icon: 'success',
                confirmButtonColor: '#4361EE'
              }).then(() => {
                // Refresh the page to show updated status
                window.location.reload();
              });
            })
            .catch(error => {
              // Error message
              Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error',
                confirmButtonColor: '#4361EE'
              });
            });
          }
        });
      });
    });
    
    // Export Orders
    document.querySelector('.btn-primary[href*="export"]').addEventListener('click', function(e) {
      e.preventDefault();
      
      Swal.fire({
        title: 'Export Orders',
        text: 'Exporting orders data as CSV',
        icon: 'info',
        confirmButtonColor: '#4361EE',
        showCancelButton: true,
        cancelButtonColor: '#d33',
        confirmButtonText: 'Export',
        cancelButtonText: 'Cancel',
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = '/admin/orders/export';
        }
      });
    });

    // Preserve filter parameters in pagination links
    document.querySelectorAll('.pagination a').forEach(link => {
      link.addEventListener('click', function(e) {
        if (this.closest('.page-item').classList.contains('disabled')) {
          e.preventDefault();
          return;
        }
      });
    });
  });
</script>

<style>
/* Additional styles for order management specific components */
.form-select-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
}

/* Status badge animations */
.status-badge.blocked {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .filters {
    grid-template-columns: 1fr;
  }
  
  .d-flex.gap-2 {
    flex-direction: column;
    gap: 0.5rem !important;
  }
  
  .table td {
    padding: 0.75rem 0.5rem;
  }
  
  .btn-action {
    width: 28px;
    height: 28px;
    font-size: 0.75rem;
  }
}

@media (max-width: 576px) {
  .d-flex.flex-column.gap-2 {
    align-items: flex-start;
  }
  
  .form-select-sm {
    width: 100%;
    margin-bottom: 0.5rem;
  }
  
  .btn-sm {
    width: 100%;
  }
}
</style>