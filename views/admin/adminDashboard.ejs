<%- include('../partials/admin/sidebar') %>

  <!-- Main Content -->
  <div class="main-content">
    <div class="page-header">
      <div>
        <h1 class="page-title">Dashboard</h1>
        <p class="text-muted mb-0">Welcome back, Admin! Here's what's happening with your store today.</p>
      </div>
      <div class="header-actions">
        <!-- Clean header section - ledger book functionality removed -->
      </div>
    </div>

    <!-- Enhanced Stats Row -->
    <div class="row g-4 mb-4" id="statsRow">
      <!-- Users Stats -->
      <div class="col-sm-6 col-lg-3">
        <div class="stat-card stat-card-users" data-stat="users">
          <div class="stat-card-inner">
            <div class="stat-icon-wrapper">
              <div class="stat-icon users">
                <i class="ri-user-3-line"></i>
              </div>
            </div>
            <div class="stat-content">
              <h3 class="stat-title">Total Users</h3>
              <div class="stat-value-wrapper">
                <p class="stat-value" data-value="<%= dashboardStats.totalUsers.value %>">
                  <%= dashboardStats.totalUsers.value %>
                </p>
                <div class="stat-growth <%= dashboardStats.totalUsers.growth.isPositive ? 'positive' : 'negative' %>">
                  <i class="ri-arrow-<%= dashboardStats.totalUsers.growth.isPositive ? 'up' : 'down' %>-line"></i>
                  <span><%= dashboardStats.totalUsers.growth.percentage %>%</span>
                </div>
              </div>
              <p class="stat-subtitle">from last month</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Orders Stats -->
      <div class="col-sm-6 col-lg-3">
        <div class="stat-card stat-card-orders" data-stat="orders">
          <div class="stat-card-inner">
            <div class="stat-icon-wrapper">
              <div class="stat-icon orders">
                <i class="ri-shopping-bag-3-line"></i>
              </div>
            </div>
            <div class="stat-content">
              <h3 class="stat-title">Total Orders</h3>
              <div class="stat-value-wrapper">
                <p class="stat-value" data-value="<%= dashboardStats.totalOrders.value %>">
                  <%= dashboardStats.totalOrders.value %>
                </p>
                <div class="stat-growth <%= dashboardStats.totalOrders.growth.isPositive ? 'positive' : 'negative' %>">
                  <i class="ri-arrow-<%= dashboardStats.totalOrders.growth.isPositive ? 'up' : 'down' %>-line"></i>
                  <span><%= dashboardStats.totalOrders.growth.percentage %>%</span>
                </div>
              </div>
              <p class="stat-subtitle">from last month</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Sales Stats -->
      <div class="col-sm-6 col-lg-3">
        <div class="stat-card stat-card-sales" data-stat="sales">
          <div class="stat-card-inner">
            <div class="stat-icon-wrapper">
              <div class="stat-icon sales">
                <i class="ri-money-rupee-circle-line"></i>
              </div>
            </div>
            <div class="stat-content">
              <h3 class="stat-title">Total Revenue</h3>
              <div class="stat-value-wrapper">
                <p class="stat-value" data-value="<%= dashboardStats.totalSales.value %>">
                  <%= dashboardStats.totalSales.value %>
                </p>
                <div class="stat-growth <%= dashboardStats.totalSales.growth.isPositive ? 'positive' : 'negative' %>">
                  <i class="ri-arrow-<%= dashboardStats.totalSales.growth.isPositive ? 'up' : 'down' %>-line"></i>
                  <span><%= dashboardStats.totalSales.growth.percentage %>%</span>
                </div>
              </div>
              <p class="stat-subtitle">from last month</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Pending Stats -->
      <div class="col-sm-6 col-lg-3">
        <div class="stat-card stat-card-pending" data-stat="pending">
          <div class="stat-card-inner">
            <div class="stat-icon-wrapper">
              <div class="stat-icon pending">
                <i class="ri-hourglass-line"></i>
              </div>
            </div>
            <div class="stat-content">
              <h3 class="stat-title">Pending Orders</h3>
              <div class="stat-value-wrapper">
                <p class="stat-value" data-value="<%= dashboardStats.pendingOrders.value %>">
                  <%= dashboardStats.pendingOrders.value %>
                </p>
                <div class="stat-growth <%= dashboardStats.pendingOrders.growth.isPositive ? 'negative' : 'positive' %>">
                  <i class="ri-arrow-<%= dashboardStats.pendingOrders.growth.isPositive ? 'up' : 'down' %>-line"></i>
                  <span><%= dashboardStats.pendingOrders.growth.percentage %>%</span>
                </div>
              </div>
              <p class="stat-subtitle">from last month</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Interactive Analytics Charts Section -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="section-header">
          <h2 class="section-title">Analytics Dashboard</h2>
          <p class="text-muted">Interactive charts and performance insights</p>
        </div>
      </div>
    </div>

    <!-- Chart Controls -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="chart-controls">
          <div class="filter-group">
            <label for="periodFilter" class="form-label">Time Period:</label>
            <select id="periodFilter" class="form-select" onchange="updateCharts()">
              <option value="daily">Daily (Last 30 days)</option>
              <option value="weekly">Weekly (Last 52 weeks)</option>
              <option value="monthly" selected>Monthly (This year)</option>
              <option value="yearly">Yearly (Last 5 years)</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="yearFilter" class="form-label">Year:</label>
            <select id="yearFilter" class="form-select" onchange="updateCharts()">
              <option value="2025" selected>2025</option>
              <option value="2024">2024</option>
              <option value="2023">2023</option>
              <option value="2022">2022</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Charts Row -->
    <div class="row g-4 mb-4">
      <!-- Sales Chart -->
      <div class="col-lg-6">
        <div class="chart-card">
          <div class="chart-header">
            <h3 class="chart-title">Sales Overview</h3>
            <div class="chart-legend">
              <span class="legend-item sales">Sales</span>
              <span class="legend-item revenue">Revenue</span>
            </div>
          </div>
          <div class="chart-container">
            <div class="chart-loading" id="salesChartLoading" style="display: none;">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading chart data...</p>
            </div>
            <div class="chart-error" id="salesChartError" style="display: none;">
              <i class="ri-error-warning-line text-danger"></i>
              <p class="mt-2 text-danger">Failed to load chart data</p>
            </div>
            <canvas id="salesChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Orders Chart -->
      <div class="col-lg-6">
        <div class="chart-card">
          <div class="chart-header">
            <h3 class="chart-title">Order Trends</h3>
            <div class="chart-legend">
              <span class="legend-item orders">Orders</span>
            </div>
          </div>
          <div class="chart-container">
            <div class="chart-loading" id="ordersChartLoading" style="display: none;">
              <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading chart data...</p>
            </div>
            <div class="chart-error" id="ordersChartError" style="display: none;">
              <i class="ri-error-warning-line text-danger"></i>
              <p class="mt-2 text-danger">Failed to load chart data</p>
            </div>
            <canvas id="ordersChart"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- Top Performance Section -->
    <div class="row mb-4">
      <div class="col-12">
        <div class="section-header">
          <h2 class="section-title">Top Performance</h2>
          <p class="text-muted">Best selling products, categories, and brands</p>
        </div>
      </div>
    </div>

    <!-- Top Performance Lists -->
    <div class="row g-4 mb-4">
      <!-- Top Products -->
      <div class="col-lg-4">
        <div class="performance-card">
          <div class="performance-header">
            <h3 class="performance-title">
              <i class="ri-product-hunt-line me-2"></i>Top Products
            </h3>
          </div>
          <div class="performance-list" id="topProductsList">
            <div class="performance-loading" id="topProductsLoading">
              <div class="spinner-border spinner-border-sm text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <span class="ms-2">Loading products...</span>
            </div>
            <div class="performance-error" id="topProductsError" style="display: none;">
              <i class="ri-error-warning-line text-danger"></i>
              <span class="ms-2 text-danger">Failed to load products</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Top Categories -->
      <div class="col-lg-4">
        <div class="performance-card">
          <div class="performance-header">
            <h3 class="performance-title">
              <i class="ri-price-tag-3-line me-2"></i>Top Categories
            </h3>
          </div>
          <div class="performance-list" id="topCategoriesList">
            <div class="performance-loading" id="topCategoriesLoading">
              <div class="spinner-border spinner-border-sm text-success" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <span class="ms-2">Loading categories...</span>
            </div>
            <div class="performance-error" id="topCategoriesError" style="display: none;">
              <i class="ri-error-warning-line text-danger"></i>
              <span class="ms-2 text-danger">Failed to load categories</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Top Brands -->
      <div class="col-lg-4">
        <div class="performance-card">
          <div class="performance-header">
            <h3 class="performance-title">
              <i class="ri-award-line me-2"></i>Top Brands
            </h3>
          </div>
          <div class="performance-list" id="topBrandsList">
            <div class="performance-loading" id="topBrandsLoading">
              <div class="spinner-border spinner-border-sm text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <span class="ms-2">Loading brands...</span>
            </div>
            <div class="performance-error" id="topBrandsError" style="display: none;">
              <i class="ri-error-warning-line text-danger"></i>
              <span class="ms-2 text-danger">Failed to load brands</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sales Analysis section removed for cleaner dashboard layout -->


  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    // Global variables for charts
    let salesChart, ordersChart;

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
      initializeCharts();
      initializeStatCards();
      updateDashboard(); // Load both charts and performance data
    });

    // Initialize statistics cards with animations
    function initializeStatCards() {
      const statCards = document.querySelectorAll('.stat-card');

      // Add entrance animation
      statCards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';

        setTimeout(() => {
          card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, index * 100);
      });

      // Add number counting animation
      animateStatValues();
    }

    // Animate stat values with counting effect
    function animateStatValues() {
      const statValues = document.querySelectorAll('.stat-value');

      statValues.forEach(valueElement => {
        const targetValue = valueElement.getAttribute('data-value');
        const numericValue = parseInt(targetValue.replace(/[^\d]/g, ''));

        if (!isNaN(numericValue) && numericValue > 0) {
          let currentValue = 0;
          const increment = Math.ceil(numericValue / 30);
          const duration = 1000;
          const stepTime = duration / (numericValue / increment);

          const counter = setInterval(() => {
            currentValue += increment;
            if (currentValue >= numericValue) {
              currentValue = numericValue;
              clearInterval(counter);
            }

            // Format the value based on original format
            if (targetValue.includes('₹')) {
              valueElement.textContent = `₹${currentValue.toLocaleString('en-IN')}`;
            } else {
              valueElement.textContent = currentValue.toString();
            }
          }, stepTime);
        }
      });
    }

    // Add loading state to stat cards
    function showStatCardsLoading(show = true) {
      const statCards = document.querySelectorAll('.stat-card');
      statCards.forEach(card => {
        if (show) {
          card.classList.add('loading');
        } else {
          card.classList.remove('loading');
        }
      });
    }

    // Update stat cards with new data (for future use)
    function updateStatCards(newData) {
      showStatCardsLoading(true);

      setTimeout(() => {
        // Update values here when implementing real-time updates
        showStatCardsLoading(false);
        animateStatValues();
      }, 500);
    }

    // Initialize Chart.js charts
    function initializeCharts() {
      // Sales Chart
      const salesCtx = document.getElementById('salesChart').getContext('2d');
      salesChart = new Chart(salesCtx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Sales (₹)',
            data: [],
            borderColor: '#4361EE',
            backgroundColor: 'rgba(67, 97, 238, 0.1)',
            borderWidth: 3,
            fill: true,
            tension: 0.4
          }, {
            label: 'Revenue (₹)',
            data: [],
            borderColor: '#28a745',
            backgroundColor: 'rgba(40, 167, 69, 0.1)',
            borderWidth: 3,
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return '₹' + value.toLocaleString('en-IN');
                }
              }
            }
          }
        }
      });

      // Orders Chart
      const ordersCtx = document.getElementById('ordersChart').getContext('2d');
      ordersChart = new Chart(ordersCtx, {
        type: 'bar',
        data: {
          labels: [],
          datasets: [{
            label: 'Orders',
            data: [],
            backgroundColor: '#FFC107',
            borderColor: '#FF8C00',
            borderWidth: 2,
            borderRadius: 8
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                stepSize: 1
              }
            }
          }
        }
      });
    }

    // Main function to update entire dashboard
    async function updateDashboard() {
      await Promise.all([
        updateCharts(),
        loadTopPerformance()
      ]);
    }

    // Update charts with new data
    async function updateCharts() {
      const period = document.getElementById('periodFilter').value;
      const year = document.getElementById('yearFilter').value;

      // Show loading indicators
      showChartLoading(true);
      hideChartErrors();

      try {
        const response = await fetch(`/admin/dashboard/analytics?period=${period}&year=${year}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.data) {
          const analyticsData = data.data;

          // Update labels based on period
          let labels = [];
          if (period === 'yearly') {
            labels = analyticsData.labels || [];
          } else if (period === 'monthly') {
            labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          } else if (period === 'weekly') {
            labels = (analyticsData.labels || []).map(week => `Week ${week}`);
          } else if (period === 'daily') {
            // For daily, use the labels as they come from the backend (DD/MM format)
            labels = analyticsData.labels || [];
          }

          // Update sales chart
          if (salesChart && analyticsData.salesData && analyticsData.revenueData) {
            salesChart.data.labels = labels;
            salesChart.data.datasets[0].data = analyticsData.salesData;
            salesChart.data.datasets[1].data = analyticsData.revenueData;
            salesChart.update('active');
          }

          // Update orders chart
          if (ordersChart && analyticsData.orderData) {
            ordersChart.data.labels = labels;
            ordersChart.data.datasets[0].data = analyticsData.orderData;
            ordersChart.update('active');
          }

          // Hide loading indicators
          showChartLoading(false);

        } else {
          throw new Error(data.message || 'Invalid data received from server');
        }
      } catch (error) {
        console.error('Error updating charts:', error);
        showChartLoading(false);
        showChartErrors(error.message);

        // Show user-friendly error notification
        showNotification('Failed to update charts. Please try again.', 'error');
      }
    }

    // Load top performance data with filter support
    async function loadTopPerformance() {
      const period = document.getElementById('periodFilter').value;
      const year = document.getElementById('yearFilter').value;

      // Show loading indicators
      showPerformanceLoading(true);
      hidePerformanceErrors();

      try {
        const response = await fetch(`/admin/dashboard/top-performance?period=${period}&year=${year}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.data) {
          const performanceData = data.data;

          // Update top products
          updateTopProductsList(performanceData.topProducts || []);

          // Update top categories
          updateTopCategoriesList(performanceData.topCategories || []);

          // Update top brands
          updateTopBrandsList(performanceData.topBrands || []);

          // Hide loading indicators
          showPerformanceLoading(false);

        } else {
          throw new Error(data.message || 'Invalid performance data received');
        }
      } catch (error) {
        console.error('Error loading top performance:', error);
        showPerformanceLoading(false);
        showPerformanceErrors(error.message);

        // Show user-friendly error notification
        showNotification('Failed to load performance data. Please try again.', 'error');
      }
    }

    // Utility functions for loading states and error handling
    function showChartLoading(show) {
      const salesLoading = document.getElementById('salesChartLoading');
      const ordersLoading = document.getElementById('ordersChartLoading');
      const salesChart = document.getElementById('salesChart');
      const ordersChart = document.getElementById('ordersChart');

      if (show) {
        salesLoading.style.display = 'flex';
        ordersLoading.style.display = 'flex';
        salesChart.style.opacity = '0.3';
        ordersChart.style.opacity = '0.3';
      } else {
        salesLoading.style.display = 'none';
        ordersLoading.style.display = 'none';
        salesChart.style.opacity = '1';
        ordersChart.style.opacity = '1';
      }
    }

    function showChartErrors(message) {
      const salesError = document.getElementById('salesChartError');
      const ordersError = document.getElementById('ordersChartError');

      if (message) {
        salesError.querySelector('p').textContent = `Failed to load chart data: ${message}`;
        ordersError.querySelector('p').textContent = `Failed to load chart data: ${message}`;
      }

      salesError.style.display = 'flex';
      ordersError.style.display = 'flex';
    }

    function hideChartErrors() {
      document.getElementById('salesChartError').style.display = 'none';
      document.getElementById('ordersChartError').style.display = 'none';
    }

    function showPerformanceLoading(show) {
      const elements = ['topProductsLoading', 'topCategoriesLoading', 'topBrandsLoading'];
      elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          element.style.display = show ? 'flex' : 'none';
        }
      });
    }

    function showPerformanceErrors(message) {
      const elements = ['topProductsError', 'topCategoriesError', 'topBrandsError'];
      elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          if (message) {
            element.querySelector('span').textContent = `Failed to load data: ${message}`;
          }
          element.style.display = 'flex';
        }
      });
    }

    function hidePerformanceErrors() {
      const elements = ['topProductsError', 'topCategoriesError', 'topBrandsError'];
      elements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          element.style.display = 'none';
        }
      });
    }

    function showNotification(message, type = 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
      notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
      notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;

      document.body.appendChild(notification);

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 5000);
    }

    // Update top products list
    function updateTopProductsList(products) {
      const container = document.getElementById('topProductsList');

      // Clear loading and error states
      const loading = container.querySelector('.performance-loading');
      const error = container.querySelector('.performance-error');
      if (loading) loading.style.display = 'none';
      if (error) error.style.display = 'none';

      // Clear existing items
      const existingItems = container.querySelectorAll('.performance-item');
      existingItems.forEach(item => item.remove());

      if (products.length === 0) {
        const noData = document.createElement('div');
        noData.className = 'text-center text-muted py-4';
        noData.innerHTML = '<i class="ri-inbox-line"></i><br>No sales data available for the selected period';
        container.appendChild(noData);
        return;
      }

      products.forEach(product => {
        const item = document.createElement('div');
        item.className = 'performance-item';
        item.innerHTML = `
          <div class="performance-rank">${product.rank}</div>
          <div class="performance-info">
            <div class="performance-name">${product.name || 'Unknown Product'}</div>
            <div class="performance-brand">${product.brand || 'Unknown Brand'}</div>
            <div class="performance-details">
              <span class="performance-metric">Qty: ${product.quantitySold || 0}</span>
              <span class="performance-metric">₹${Math.round(product.revenue || 0).toLocaleString('en-IN')}</span>
              <span class="performance-metric">${product.salesPercentage || 0}% of sales</span>
            </div>
          </div>
        `;
        container.appendChild(item);
      });
    }

    // Update top categories list
    function updateTopCategoriesList(categories) {
      const container = document.getElementById('topCategoriesList');

      // Clear loading and error states
      const loading = container.querySelector('.performance-loading');
      const error = container.querySelector('.performance-error');
      if (loading) loading.style.display = 'none';
      if (error) error.style.display = 'none';

      // Clear existing items
      const existingItems = container.querySelectorAll('.performance-item');
      existingItems.forEach(item => item.remove());

      if (categories.length === 0) {
        const noData = document.createElement('div');
        noData.className = 'text-center text-muted py-4';
        noData.innerHTML = '<i class="ri-inbox-line"></i><br>No sales data available for the selected period';
        container.appendChild(noData);
        return;
      }

      categories.forEach(category => {
        const item = document.createElement('div');
        item.className = 'performance-item';
        item.innerHTML = `
          <div class="performance-rank">${category.rank}</div>
          <div class="performance-info">
            <div class="performance-name">${category.name || 'Unknown Category'}</div>
            <div class="performance-details">
              <span class="performance-metric">Qty: ${category.quantitySold || 0}</span>
              <span class="performance-metric">₹${Math.round(category.revenue || 0).toLocaleString('en-IN')}</span>
              <span class="performance-metric">${category.revenuePercentage || 0}% of revenue</span>
            </div>
          </div>
        `;
        container.appendChild(item);
      });
    }

    // Update top brands list
    function updateTopBrandsList(brands) {
      const container = document.getElementById('topBrandsList');

      // Clear loading and error states
      const loading = container.querySelector('.performance-loading');
      const error = container.querySelector('.performance-error');
      if (loading) loading.style.display = 'none';
      if (error) error.style.display = 'none';

      // Clear existing items
      const existingItems = container.querySelectorAll('.performance-item');
      existingItems.forEach(item => item.remove());

      if (brands.length === 0) {
        const noData = document.createElement('div');
        noData.className = 'text-center text-muted py-4';
        noData.innerHTML = '<i class="ri-inbox-line"></i><br>No sales data available for the selected period';
        container.appendChild(noData);
        return;
      }

      brands.forEach(brand => {
        const item = document.createElement('div');
        item.className = 'performance-item';
        item.innerHTML = `
          <div class="performance-rank">${brand.rank}</div>
          <div class="performance-info">
            <div class="performance-name">${brand.name || 'Unknown Brand'}</div>
            <div class="performance-brand">${brand.productCount || 0} products</div>
            <div class="performance-details">
              <span class="performance-metric">Qty: ${brand.quantitySold || 0}</span>
              <span class="performance-metric">₹${Math.round(brand.revenue || 0).toLocaleString('en-IN')}</span>
              <span class="performance-metric">${brand.revenuePercentage || 0}% of revenue</span>
            </div>
          </div>
        `;
        container.appendChild(item);
      });
    }



    // Highlight active link
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
      link.addEventListener('click', function() {
        navLinks.forEach(l => l.classList.remove('active'));
        this.classList.add('active');
      });
    });
  </script>


</body>
</html>